
TDK_top-prev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b148  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  0800b310  0800b310  0001b310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b66c  0800b66c  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b66c  0800b66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b674  0800b674  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b674  0800b674  0001b674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b67c  0800b67c  0001b67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0800b680  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a9c  200000e8  0800b764  000200e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001b84  0800b764  00021b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e62  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043fb  00000000  00000000  00045f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  0004a378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0004b590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d2d  00000000  00000000  0004c668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192c6  00000000  00000000  00072395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9502  00000000  00000000  0008b65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164b5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005138  00000000  00000000  00164bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000e8 	.word	0x200000e8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b2f8 	.word	0x0800b2f8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000ec 	.word	0x200000ec
 8000204:	0800b2f8 	.word	0x0800b2f8

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b974 	b.w	8000e04 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468e      	mov	lr, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d14d      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	4694      	mov	ip, r2
 8000b46:	d969      	bls.n	8000c1c <__udivmoddi4+0xe8>
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b152      	cbz	r2, 8000b64 <__udivmoddi4+0x30>
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	f1c2 0120 	rsb	r1, r2, #32
 8000b56:	fa20 f101 	lsr.w	r1, r0, r1
 8000b5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b62:	4094      	lsls	r4, r2
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	0c21      	lsrs	r1, r4, #16
 8000b6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b6e:	fa1f f78c 	uxth.w	r7, ip
 8000b72:	fb08 e316 	mls	r3, r8, r6, lr
 8000b76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b7a:	fb06 f107 	mul.w	r1, r6, r7
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8a:	f080 811f 	bcs.w	8000dcc <__udivmoddi4+0x298>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 811c 	bls.w	8000dcc <__udivmoddi4+0x298>
 8000b94:	3e02      	subs	r6, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb00 f707 	mul.w	r7, r0, r7
 8000bac:	42a7      	cmp	r7, r4
 8000bae:	d90a      	bls.n	8000bc6 <__udivmoddi4+0x92>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb8:	f080 810a 	bcs.w	8000dd0 <__udivmoddi4+0x29c>
 8000bbc:	42a7      	cmp	r7, r4
 8000bbe:	f240 8107 	bls.w	8000dd0 <__udivmoddi4+0x29c>
 8000bc2:	4464      	add	r4, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bca:	1be4      	subs	r4, r4, r7
 8000bcc:	2600      	movs	r6, #0
 8000bce:	b11d      	cbz	r5, 8000bd8 <__udivmoddi4+0xa4>
 8000bd0:	40d4      	lsrs	r4, r2
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0xc2>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	f000 80ef 	beq.w	8000dc6 <__udivmoddi4+0x292>
 8000be8:	2600      	movs	r6, #0
 8000bea:	e9c5 0100 	strd	r0, r1, [r5]
 8000bee:	4630      	mov	r0, r6
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	fab3 f683 	clz	r6, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d14a      	bne.n	8000c94 <__udivmoddi4+0x160>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xd4>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80f9 	bhi.w	8000dfa <__udivmoddi4+0x2c6>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	469e      	mov	lr, r3
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d0e0      	beq.n	8000bd8 <__udivmoddi4+0xa4>
 8000c16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c1a:	e7dd      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000c1c:	b902      	cbnz	r2, 8000c20 <__udivmoddi4+0xec>
 8000c1e:	deff      	udf	#255	; 0xff
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	f040 8092 	bne.w	8000d4e <__udivmoddi4+0x21a>
 8000c2a:	eba1 010c 	sub.w	r1, r1, ip
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2601      	movs	r6, #1
 8000c38:	0c20      	lsrs	r0, r4, #16
 8000c3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c46:	fb0e f003 	mul.w	r0, lr, r3
 8000c4a:	4288      	cmp	r0, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x12c>
 8000c4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x12a>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2c0>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	1a09      	subs	r1, r1, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c68:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x156>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x154>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2ca>
 8000c88:	4608      	mov	r0, r1
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c92:	e79c      	b.n	8000bce <__udivmoddi4+0x9a>
 8000c94:	f1c6 0720 	rsb	r7, r6, #32
 8000c98:	40b3      	lsls	r3, r6
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ca6:	fa01 f306 	lsl.w	r3, r1, r6
 8000caa:	431c      	orrs	r4, r3
 8000cac:	40f9      	lsrs	r1, r7
 8000cae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cba:	0c20      	lsrs	r0, r4, #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000cc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b8>
 8000cd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4461      	add	r1, ip
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	458e      	cmp	lr, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1e2>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2b4>
 8000d0e:	458e      	cmp	lr, r1
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2b4>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d1e:	eba1 010e 	sub.w	r1, r1, lr
 8000d22:	42a1      	cmp	r1, r4
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46a6      	mov	lr, r4
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x212>
 8000d2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d32:	eb61 010e 	sbc.w	r1, r1, lr
 8000d36:	fa01 f707 	lsl.w	r7, r1, r7
 8000d3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d3e:	40f1      	lsrs	r1, r6
 8000d40:	431f      	orrs	r7, r3
 8000d42:	e9c5 7100 	strd	r7, r1, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	40d8      	lsrs	r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4301      	orrs	r1, r0
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d70:	0c0b      	lsrs	r3, r1, #16
 8000d72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d76:	fb00 f60e 	mul.w	r6, r0, lr
 8000d7a:	429e      	cmp	r6, r3
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x260>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b8>
 8000d8c:	429e      	cmp	r6, r3
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b8>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1b9b      	subs	r3, r3, r6
 8000d96:	b289      	uxth	r1, r1
 8000d98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb06 f30e 	mul.w	r3, r6, lr
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x28a>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000dba:	3e02      	subs	r6, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0x104>
 8000dc6:	462e      	mov	r6, r5
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e705      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	e6e3      	b.n	8000b98 <__udivmoddi4+0x64>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6f8      	b.n	8000bc6 <__udivmoddi4+0x92>
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f8>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f8>
 8000de4:	4646      	mov	r6, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x28a>
 8000de8:	4620      	mov	r0, r4
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1e2>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x260>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b8>
 8000df4:	3b02      	subs	r3, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x12c>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e709      	b.n	8000c12 <__udivmoddi4+0xde>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x156>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	0a5a      	lsrs	r2, r3, #9
 8000e18:	490f      	ldr	r1, [pc, #60]	; (8000e58 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e1a:	fba1 1202 	umull	r1, r2, r1, r2
 8000e1e:	09d2      	lsrs	r2, r2, #7
 8000e20:	490e      	ldr	r1, [pc, #56]	; (8000e5c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000e22:	fb01 f202 	mul.w	r2, r1, r2
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	0a5b      	lsrs	r3, r3, #9
 8000e30:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e32:	fba2 2303 	umull	r2, r3, r2, r3
 8000e36:	09db      	lsrs	r3, r3, #7
 8000e38:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	441a      	add	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	00044b83 	.word	0x00044b83
 8000e5c:	3b9aca00 	.word	0x3b9aca00

08000e60 <HAL_TIM_PeriodElapsedCallback>:

int fu,fl,lu,ll;
int r = 0;
int t = 0;
int x = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM5){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a4a      	ldr	r2, [pc, #296]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	f040 808e 	bne.w	8000f90 <HAL_TIM_PeriodElapsedCallback+0x130>
		UART_Send_SetMotorPosition(1, 1010, 200);
 8000e74:	22c8      	movs	r2, #200	; 0xc8
 8000e76:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f004 f84c 	bl	8004f18 <_Z26UART_Send_SetMotorPositionttt>
		//software	reset
		if(r==1){
 8000e80:	4b46      	ldr	r3, [pc, #280]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d104      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x32>
		  HAL_NVIC_SystemReset();
 8000e88:	f005 fe83 	bl	8006b92 <HAL_NVIC_SystemReset>
		  r = 0;
 8000e8c:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
		}
		//reset sensors
		hz_origin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000e92:	2108      	movs	r1, #8
 8000e94:	4842      	ldr	r0, [pc, #264]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000e96:	f006 fd75 	bl	8007984 <HAL_GPIO_ReadPin>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b41      	ldr	r3, [pc, #260]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ea0:	601a      	str	r2, [r3, #0]
		ev_origin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	483e      	ldr	r0, [pc, #248]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ea6:	f006 fd6d 	bl	8007984 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000eb0:	601a      	str	r2, [r3, #0]
		//shooter
		if(reset == 1)	Reset();
 8000eb2:	4b3e      	ldr	r3, [pc, #248]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d102      	bne.n	8000ec0 <HAL_TIM_PeriodElapsedCallback+0x60>
 8000eba:	f004 fd61 	bl	8005980 <_Z5Resetv>
 8000ebe:	e003      	b.n	8000ec8 <HAL_TIM_PeriodElapsedCallback+0x68>
		else{
			shooter_base();
 8000ec0:	f004 f9ca 	bl	8005258 <_Z12shooter_basev>
			base_limit();
 8000ec4:	f004 fefa 	bl	8005cbc <_Z10base_limitv>
		}
		if(return_value < 4)	Script();
 8000ec8:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	dc01      	bgt.n	8000ed4 <HAL_TIM_PeriodElapsedCallback+0x74>
 8000ed0:	f004 ff4e 	bl	8005d70 <_Z6Scriptv>
		shooter();
 8000ed4:	f004 f864 	bl	8004fa0 <_Z7shooterv>
		//laji car
		fl = HAL_GPIO_ReadPin(FLIPING_DOWN_LIMIT_PORT, FLIPING_DOWN_LIMIT_PIN);
 8000ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000edc:	4835      	ldr	r0, [pc, #212]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000ede:	f006 fd51 	bl	8007984 <HAL_GPIO_ReadPin>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000ee8:	601a      	str	r2, [r3, #0]
		fu = HAL_GPIO_ReadPin(FLIPING_UP_LIMIT_PORT, FLIPING_UP_LIMIT_PIN);
 8000eea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eee:	4833      	ldr	r0, [pc, #204]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ef0:	f006 fd48 	bl	8007984 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000efa:	601a      	str	r2, [r3, #0]
		ll = HAL_GPIO_ReadPin(LIFTING_DOWN_LIMIT_PORT, LIFTING_DOWN_LIMIT_PIN);
 8000efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f00:	482e      	ldr	r0, [pc, #184]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f02:	f006 fd3f 	bl	8007984 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000f0c:	601a      	str	r2, [r3, #0]
		lu = HAL_GPIO_ReadPin(LIFTING_UP_LIMIT_PORT, LIFTING_UP_LIMIT_PIN);
 8000f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f12:	482a      	ldr	r0, [pc, #168]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f14:	f006 fd36 	bl	8007984 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000f1e:	601a      	str	r2, [r3, #0]
		if(laji_cmd == 1){
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d104      	bne.n	8000f32 <HAL_TIM_PeriodElapsedCallback+0xd2>
			cmd = laji_cmd;
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a28      	ldr	r2, [pc, #160]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	e007      	b.n	8000f42 <HAL_TIM_PeriodElapsedCallback+0xe2>
		}
		else if(laji_cmd == 2){
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d103      	bne.n	8000f42 <HAL_TIM_PeriodElapsedCallback+0xe2>
			cmd = laji_cmd;
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000f40:	6013      	str	r3, [r2, #0]
		}
		if(laji_reset == 1){
 8000f42:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d102      	bne.n	8000f50 <HAL_TIM_PeriodElapsedCallback+0xf0>
			laji_Reset();
 8000f4a:	f000 f95d 	bl	8001208 <_Z10laji_Resetv>
 8000f4e:	e001      	b.n	8000f54 <HAL_TIM_PeriodElapsedCallback+0xf4>
		}
		else{
			laji_control();
 8000f50:	f000 f980 	bl	8001254 <_Z12laji_controlv>
		}
		t++;
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000f5c:	6013      	str	r3, [r2, #0]
		if(t%20 == 0){
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f64:	fb83 2301 	smull	r2, r3, r3, r1
 8000f68:	10da      	asrs	r2, r3, #3
 8000f6a:	17cb      	asrs	r3, r1, #31
 8000f6c:	1ad2      	subs	r2, r2, r3
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	1aca      	subs	r2, r1, r3
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	d109      	bne.n	8000f90 <HAL_TIM_PeriodElapsedCallback+0x130>
			t = 0;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
			x++;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f8a:	6013      	str	r3, [r2, #0]
			pub();
 8000f8c:	f002 ff3c 	bl	8003e08 <_Z3pubv>
		}
	}
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40000c00 	.word	0x40000c00
 8000f9c:	20000114 	.word	0x20000114
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	20001b40 	.word	0x20001b40
 8000fa8:	20001b44 	.word	0x20001b44
 8000fac:	2000004c 	.word	0x2000004c
 8000fb0:	20001abc 	.word	0x20001abc
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	20000108 	.word	0x20000108
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	20000104 	.word	0x20000104
 8000fc4:	20000110 	.word	0x20000110
 8000fc8:	2000010c 	.word	0x2000010c
 8000fcc:	20000128 	.word	0x20000128
 8000fd0:	2000012c 	.word	0x2000012c
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000118 	.word	0x20000118
 8000fdc:	66666667 	.word	0x66666667
 8000fe0:	2000011c 	.word	0x2000011c

08000fe4 <_Z13fliping_statei>:
laji fliping;
laji lifting;
int laji_reset = 1;
int laji_cmd, cmd, laji_ok = 1;

int fliping_state(int f_dir){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	6078      	str	r0, [r7, #4]
 int ENA = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 if(f_dir == 1){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d127      	bne.n	8001046 <_Z13fliping_statei+0x62>
  fliping.move(1,0, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9302      	str	r3, [sp, #8]
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <_Z13fliping_statei+0xbc>)
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	2310      	movs	r3, #16
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <_Z13fliping_statei+0xc0>)
 8001004:	2200      	movs	r2, #0
 8001006:	2101      	movs	r1, #1
 8001008:	4827      	ldr	r0, [pc, #156]	; (80010a8 <_Z13fliping_statei+0xc4>)
 800100a:	f000 f8b3 	bl	8001174 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
  if(HAL_GPIO_ReadPin(FLIPING_DOWN_LIMIT_PORT, FLIPING_DOWN_LIMIT_PIN)){
 800100e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001012:	4824      	ldr	r0, [pc, #144]	; (80010a4 <_Z13fliping_statei+0xc0>)
 8001014:	f006 fcb6 	bl	8007984 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	bf14      	ite	ne
 800101e:	2301      	movne	r3, #1
 8001020:	2300      	moveq	r3, #0
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d035      	beq.n	8001094 <_Z13fliping_statei+0xb0>
   fliping.move(0,0, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 8001028:	2301      	movs	r3, #1
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <_Z13fliping_statei+0xbc>)
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	2310      	movs	r3, #16
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <_Z13fliping_statei+0xc0>)
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	481b      	ldr	r0, [pc, #108]	; (80010a8 <_Z13fliping_statei+0xc4>)
 800103c:	f000 f89a 	bl	8001174 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
   ENA = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e026      	b.n	8001094 <_Z13fliping_statei+0xb0>
  }
 }
 else{ //f_dir == 0
  fliping.move(0,1, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 8001046:	2301      	movs	r3, #1
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_Z13fliping_statei+0xbc>)
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	2310      	movs	r3, #16
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <_Z13fliping_statei+0xc0>)
 8001054:	2201      	movs	r2, #1
 8001056:	2100      	movs	r1, #0
 8001058:	4813      	ldr	r0, [pc, #76]	; (80010a8 <_Z13fliping_statei+0xc4>)
 800105a:	f000 f88b 	bl	8001174 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
  if(HAL_GPIO_ReadPin(FLIPING_UP_LIMIT_PORT, FLIPING_UP_LIMIT_PIN)){
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	4812      	ldr	r0, [pc, #72]	; (80010ac <_Z13fliping_statei+0xc8>)
 8001064:	f006 fc8e 	bl	8007984 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf14      	ite	ne
 800106e:	2301      	movne	r3, #1
 8001070:	2300      	moveq	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00d      	beq.n	8001094 <_Z13fliping_statei+0xb0>
   fliping.move(0,0, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 8001078:	2301      	movs	r3, #1
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <_Z13fliping_statei+0xbc>)
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	2310      	movs	r3, #16
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_Z13fliping_statei+0xc0>)
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <_Z13fliping_statei+0xc4>)
 800108c:	f000 f872 	bl	8001174 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
   ENA = 1;
 8001090:	2301      	movs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
  }
 }
 return ENA;
 8001094:	68fb      	ldr	r3, [r7, #12]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020000 	.word	0x40020000
 80010a8:	20000120 	.word	0x20000120
 80010ac:	40020800 	.word	0x40020800

080010b0 <_Z13lifting_statei>:
int lifting_state(int l_dir){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af04      	add	r7, sp, #16
 80010b6:	6078      	str	r0, [r7, #4]
 int ENB = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
 if(l_dir == 1){
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d127      	bne.n	8001112 <_Z13lifting_statei+0x62>
  lifting.move(1,0, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 80010c2:	2304      	movs	r3, #4
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <_Z13lifting_statei+0xbc>)
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	2308      	movs	r3, #8
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <_Z13lifting_statei+0xbc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	2101      	movs	r1, #1
 80010d4:	4826      	ldr	r0, [pc, #152]	; (8001170 <_Z13lifting_statei+0xc0>)
 80010d6:	f000 f84d 	bl	8001174 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
  if(HAL_GPIO_ReadPin(LIFTING_DOWN_LIMIT_PORT, LIFTING_DOWN_LIMIT_PIN)){
 80010da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010de:	4823      	ldr	r0, [pc, #140]	; (800116c <_Z13lifting_statei+0xbc>)
 80010e0:	f006 fc50 	bl	8007984 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf14      	ite	ne
 80010ea:	2301      	movne	r3, #1
 80010ec:	2300      	moveq	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d035      	beq.n	8001160 <_Z13lifting_statei+0xb0>
   lifting.move(0,0, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 80010f4:	2304      	movs	r3, #4
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <_Z13lifting_statei+0xbc>)
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	2308      	movs	r3, #8
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <_Z13lifting_statei+0xbc>)
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	481a      	ldr	r0, [pc, #104]	; (8001170 <_Z13lifting_statei+0xc0>)
 8001108:	f000 f834 	bl	8001174 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
   ENB = 1;
 800110c:	2301      	movs	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e026      	b.n	8001160 <_Z13lifting_statei+0xb0>
  }
 }
 else{ //l_dir == 0
  lifting.move(0,1, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 8001112:	2304      	movs	r3, #4
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <_Z13lifting_statei+0xbc>)
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	2308      	movs	r3, #8
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <_Z13lifting_statei+0xbc>)
 8001120:	2201      	movs	r2, #1
 8001122:	2100      	movs	r1, #0
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <_Z13lifting_statei+0xc0>)
 8001126:	f000 f825 	bl	8001174 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
  if(HAL_GPIO_ReadPin(LIFTING_UP_LIMIT_PORT, LIFTING_UP_LIMIT_PIN)){
 800112a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112e:	480f      	ldr	r0, [pc, #60]	; (800116c <_Z13lifting_statei+0xbc>)
 8001130:	f006 fc28 	bl	8007984 <HAL_GPIO_ReadPin>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	bf14      	ite	ne
 800113a:	2301      	movne	r3, #1
 800113c:	2300      	moveq	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00d      	beq.n	8001160 <_Z13lifting_statei+0xb0>
   lifting.move(0,0, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 8001144:	2304      	movs	r3, #4
 8001146:	9302      	str	r3, [sp, #8]
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <_Z13lifting_statei+0xbc>)
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	2308      	movs	r3, #8
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <_Z13lifting_statei+0xbc>)
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <_Z13lifting_statei+0xc0>)
 8001158:	f000 f80c 	bl	8001174 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
   ENB = 1;
 800115c:	2301      	movs	r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
  }
 }
 return ENB;
 8001160:	68fb      	ldr	r3, [r7, #12]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40020800 	.word	0x40020800
 8001170:	20000124 	.word	0x20000124

08001174 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>:
void laji::move(int INA, int INB, GPIO_TypeDef* GPIOxA,uint16_t GPIO_PinA, GPIO_TypeDef* GPIOxB,uint16_t GPIO_PinB){
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
 if( (INA == 0 && INB == 0) || (INA == 1 && INB == 1) ){
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x1a>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d005      	beq.n	800119a <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x26>
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d10f      	bne.n	80011b4 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x40>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d10c      	bne.n	80011b4 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x40>
  HAL_GPIO_WritePin(GPIOxA, GPIO_PinA, GPIO_PIN_RESET);
 800119a:	8b3b      	ldrh	r3, [r7, #24]
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	f006 fc07 	bl	80079b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOxB, GPIO_PinB, GPIO_PIN_RESET);
 80011a6:	8c3b      	ldrh	r3, [r7, #32]
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	69f8      	ldr	r0, [r7, #28]
 80011ae:	f006 fc01 	bl	80079b4 <HAL_GPIO_WritePin>
 80011b2:	e025      	b.n	8001200 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
 }
 else if( INA == 1 && INB == 0 ){
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d10f      	bne.n	80011da <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x66>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10c      	bne.n	80011da <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x66>
  HAL_GPIO_WritePin(GPIOxA, GPIO_PinA, GPIO_PIN_SET);
 80011c0:	8b3b      	ldrh	r3, [r7, #24]
 80011c2:	2201      	movs	r2, #1
 80011c4:	4619      	mov	r1, r3
 80011c6:	6838      	ldr	r0, [r7, #0]
 80011c8:	f006 fbf4 	bl	80079b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOxB, GPIO_PinB, GPIO_PIN_RESET);
 80011cc:	8c3b      	ldrh	r3, [r7, #32]
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	69f8      	ldr	r0, [r7, #28]
 80011d4:	f006 fbee 	bl	80079b4 <HAL_GPIO_WritePin>
 80011d8:	e012      	b.n	8001200 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
 }
 else if( INA == 0 && INB == 1 ){
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d10f      	bne.n	8001200 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d10c      	bne.n	8001200 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
  HAL_GPIO_WritePin(GPIOxA, GPIO_PinA, GPIO_PIN_RESET);
 80011e6:	8b3b      	ldrh	r3, [r7, #24]
 80011e8:	2200      	movs	r2, #0
 80011ea:	4619      	mov	r1, r3
 80011ec:	6838      	ldr	r0, [r7, #0]
 80011ee:	f006 fbe1 	bl	80079b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOxB, GPIO_PinB, GPIO_PIN_SET);
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	2201      	movs	r2, #1
 80011f6:	4619      	mov	r1, r3
 80011f8:	69f8      	ldr	r0, [r7, #28]
 80011fa:	f006 fbdb 	bl	80079b4 <HAL_GPIO_WritePin>
 }
}
 80011fe:	e7ff      	b.n	8001200 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <_Z10laji_Resetv>:
}

//if(msg->pin == 1){
// reset = 1;
//}
void laji_Reset(){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	if(laji_reset != 0){
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <_Z10laji_Resetv+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00b      	beq.n	800122c <_Z10laji_Resetv+0x24>
	lifting.ENA = lifting_state(0);
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff ff4b 	bl	80010b0 <_Z13lifting_statei>
 800121a:	4603      	mov	r3, r0
 800121c:	4a0b      	ldr	r2, [pc, #44]	; (800124c <_Z10laji_Resetv+0x44>)
 800121e:	6013      	str	r3, [r2, #0]
	fliping.ENA = fliping_state(0);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fedf 	bl	8000fe4 <_Z13fliping_statei>
 8001226:	4603      	mov	r3, r0
 8001228:	4a09      	ldr	r2, [pc, #36]	; (8001250 <_Z10laji_Resetv+0x48>)
 800122a:	6013      	str	r3, [r2, #0]
	}
	if(lifting.ENA == 1 && fliping.ENA == 1){
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <_Z10laji_Resetv+0x44>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d106      	bne.n	8001242 <_Z10laji_Resetv+0x3a>
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <_Z10laji_Resetv+0x48>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d102      	bne.n	8001242 <_Z10laji_Resetv+0x3a>
	laji_reset = 0;
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <_Z10laji_Resetv+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
	}
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000000 	.word	0x20000000
 800124c:	20000124 	.word	0x20000124
 8001250:	20000120 	.word	0x20000120

08001254 <_Z12laji_controlv>:
// cmd = 1;
//}
//if(msg->data == 2){
// cmd = 2;
//}
void laji_control(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
 static int a = 0;
 if(cmd == 1){
 8001258:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <_Z12laji_controlv+0x1a4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d114      	bne.n	800128a <_Z12laji_controlv+0x36>
	 laji_ok = 0;
 8001260:	4b66      	ldr	r3, [pc, #408]	; (80013fc <_Z12laji_controlv+0x1a8>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
	 fliping.ENA = fliping_state(1);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff febc 	bl	8000fe4 <_Z13fliping_statei>
 800126c:	4603      	mov	r3, r0
 800126e:	4a64      	ldr	r2, [pc, #400]	; (8001400 <_Z12laji_controlv+0x1ac>)
 8001270:	6013      	str	r3, [r2, #0]
  if(fliping.ENA == 1){
 8001272:	4b63      	ldr	r3, [pc, #396]	; (8001400 <_Z12laji_controlv+0x1ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	f040 80bb 	bne.w	80013f2 <_Z12laji_controlv+0x19e>
	 cmd = 0;
 800127c:	4b5e      	ldr	r3, [pc, #376]	; (80013f8 <_Z12laji_controlv+0x1a4>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
	 laji_ok = 1;
 8001282:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <_Z12laji_controlv+0x1a8>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]
 	 	 }
  	 }
  else if(cmd == -1){
	  laji_stop();
  }
}
 8001288:	e0b3      	b.n	80013f2 <_Z12laji_controlv+0x19e>
 else if(cmd == 2){
 800128a:	4b5b      	ldr	r3, [pc, #364]	; (80013f8 <_Z12laji_controlv+0x1a4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d160      	bne.n	8001354 <_Z12laji_controlv+0x100>
	 laji_ok = 0;
 8001292:	4b5a      	ldr	r3, [pc, #360]	; (80013fc <_Z12laji_controlv+0x1a8>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
	 if(a%3 == 0){
 8001298:	4b5a      	ldr	r3, [pc, #360]	; (8001404 <_Z12laji_controlv+0x1b0>)
 800129a:	6819      	ldr	r1, [r3, #0]
 800129c:	4b5a      	ldr	r3, [pc, #360]	; (8001408 <_Z12laji_controlv+0x1b4>)
 800129e:	fb83 3201 	smull	r3, r2, r3, r1
 80012a2:	17cb      	asrs	r3, r1, #31
 80012a4:	1ad2      	subs	r2, r2, r3
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	1aca      	subs	r2, r1, r3
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d110      	bne.n	80012d4 <_Z12laji_controlv+0x80>
		 lifting.ENA = lifting_state(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff fefc 	bl	80010b0 <_Z13lifting_statei>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a54      	ldr	r2, [pc, #336]	; (800140c <_Z12laji_controlv+0x1b8>)
 80012bc:	6013      	str	r3, [r2, #0]
		 if(lifting.ENA == 1){
 80012be:	4b53      	ldr	r3, [pc, #332]	; (800140c <_Z12laji_controlv+0x1b8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	f040 8095 	bne.w	80013f2 <_Z12laji_controlv+0x19e>
			 a++;
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <_Z12laji_controlv+0x1b0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <_Z12laji_controlv+0x1b0>)
 80012d0:	6013      	str	r3, [r2, #0]
}
 80012d2:	e08e      	b.n	80013f2 <_Z12laji_controlv+0x19e>
	 else if(a%3 == 1){
 80012d4:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <_Z12laji_controlv+0x1b0>)
 80012d6:	6819      	ldr	r1, [r3, #0]
 80012d8:	4b4b      	ldr	r3, [pc, #300]	; (8001408 <_Z12laji_controlv+0x1b4>)
 80012da:	fb83 3201 	smull	r3, r2, r3, r1
 80012de:	17cb      	asrs	r3, r1, #31
 80012e0:	1ad2      	subs	r2, r2, r3
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	1aca      	subs	r2, r1, r3
 80012ea:	2a01      	cmp	r2, #1
 80012ec:	d10f      	bne.n	800130e <_Z12laji_controlv+0xba>
		 lifting.ENA = lifting_state(0);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff fede 	bl	80010b0 <_Z13lifting_statei>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4a45      	ldr	r2, [pc, #276]	; (800140c <_Z12laji_controlv+0x1b8>)
 80012f8:	6013      	str	r3, [r2, #0]
		 if(lifting.ENA == 1){
 80012fa:	4b44      	ldr	r3, [pc, #272]	; (800140c <_Z12laji_controlv+0x1b8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d177      	bne.n	80013f2 <_Z12laji_controlv+0x19e>
			 a++;
 8001302:	4b40      	ldr	r3, [pc, #256]	; (8001404 <_Z12laji_controlv+0x1b0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	4a3e      	ldr	r2, [pc, #248]	; (8001404 <_Z12laji_controlv+0x1b0>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	e071      	b.n	80013f2 <_Z12laji_controlv+0x19e>
	 else if(a%3 == 2){
 800130e:	4b3d      	ldr	r3, [pc, #244]	; (8001404 <_Z12laji_controlv+0x1b0>)
 8001310:	6819      	ldr	r1, [r3, #0]
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <_Z12laji_controlv+0x1b4>)
 8001314:	fb83 3201 	smull	r3, r2, r3, r1
 8001318:	17cb      	asrs	r3, r1, #31
 800131a:	1ad2      	subs	r2, r2, r3
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	1aca      	subs	r2, r1, r3
 8001324:	2a02      	cmp	r2, #2
 8001326:	d164      	bne.n	80013f2 <_Z12laji_controlv+0x19e>
		 fliping.ENA = fliping_state(0);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fe5b 	bl	8000fe4 <_Z13fliping_statei>
 800132e:	4603      	mov	r3, r0
 8001330:	4a33      	ldr	r2, [pc, #204]	; (8001400 <_Z12laji_controlv+0x1ac>)
 8001332:	6013      	str	r3, [r2, #0]
		 if(fliping.ENA == 1){
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <_Z12laji_controlv+0x1ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d15a      	bne.n	80013f2 <_Z12laji_controlv+0x19e>
			 a++;
 800133c:	4b31      	ldr	r3, [pc, #196]	; (8001404 <_Z12laji_controlv+0x1b0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	4a30      	ldr	r2, [pc, #192]	; (8001404 <_Z12laji_controlv+0x1b0>)
 8001344:	6013      	str	r3, [r2, #0]
			 cmd = 0;
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <_Z12laji_controlv+0x1a4>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
			 laji_ok = 1;
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <_Z12laji_controlv+0x1a8>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]
}
 8001352:	e04e      	b.n	80013f2 <_Z12laji_controlv+0x19e>
 else if(cmd == 3){
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <_Z12laji_controlv+0x1a4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d113      	bne.n	8001384 <_Z12laji_controlv+0x130>
 	 laji_ok = 0;
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <_Z12laji_controlv+0x1a8>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 	 fliping.ENA = fliping_state(0);
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff fe3e 	bl	8000fe4 <_Z13fliping_statei>
 8001368:	4603      	mov	r3, r0
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <_Z12laji_controlv+0x1ac>)
 800136c:	6013      	str	r3, [r2, #0]
 	 if(fliping.ENA == 1){
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <_Z12laji_controlv+0x1ac>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d13d      	bne.n	80013f2 <_Z12laji_controlv+0x19e>
 		 cmd = 0;
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <_Z12laji_controlv+0x1a4>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 	 	 laji_ok = 1;
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <_Z12laji_controlv+0x1a8>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]
}
 8001382:	e036      	b.n	80013f2 <_Z12laji_controlv+0x19e>
  else if(cmd == 4){
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <_Z12laji_controlv+0x1a4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b04      	cmp	r3, #4
 800138a:	d113      	bne.n	80013b4 <_Z12laji_controlv+0x160>
 	 laji_ok = 0;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <_Z12laji_controlv+0x1a8>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 	 lifting.ENA = lifting_state(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fe8c 	bl	80010b0 <_Z13lifting_statei>
 8001398:	4603      	mov	r3, r0
 800139a:	4a1c      	ldr	r2, [pc, #112]	; (800140c <_Z12laji_controlv+0x1b8>)
 800139c:	6013      	str	r3, [r2, #0]
 	 if(lifting.ENA == 1){
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <_Z12laji_controlv+0x1b8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d125      	bne.n	80013f2 <_Z12laji_controlv+0x19e>
 		 cmd = 0;
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <_Z12laji_controlv+0x1a4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 		 laji_ok = 1;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_Z12laji_controlv+0x1a8>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]
}
 80013b2:	e01e      	b.n	80013f2 <_Z12laji_controlv+0x19e>
  else if(cmd == 5){
 80013b4:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <_Z12laji_controlv+0x1a4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d113      	bne.n	80013e4 <_Z12laji_controlv+0x190>
 	 laji_ok = 0;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <_Z12laji_controlv+0x1a8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 	 lifting.ENA = lifting_state(0);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff fe74 	bl	80010b0 <_Z13lifting_statei>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <_Z12laji_controlv+0x1b8>)
 80013cc:	6013      	str	r3, [r2, #0]
 	 if(lifting.ENA == 1){
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <_Z12laji_controlv+0x1b8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d10d      	bne.n	80013f2 <_Z12laji_controlv+0x19e>
 		 cmd = 0;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_Z12laji_controlv+0x1a4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 		 laji_ok = 1;
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_Z12laji_controlv+0x1a8>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
}
 80013e2:	e006      	b.n	80013f2 <_Z12laji_controlv+0x19e>
  else if(cmd == -1){
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <_Z12laji_controlv+0x1a4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d101      	bne.n	80013f2 <_Z12laji_controlv+0x19e>
	  laji_stop();
 80013ee:	f000 f80f 	bl	8001410 <_Z9laji_stopv>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000012c 	.word	0x2000012c
 80013fc:	20000004 	.word	0x20000004
 8001400:	20000120 	.word	0x20000120
 8001404:	20000130 	.word	0x20000130
 8001408:	55555556 	.word	0x55555556
 800140c:	20000124 	.word	0x20000124

08001410 <_Z9laji_stopv>:

void laji_stop(){
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af04      	add	r7, sp, #16
	fliping.move(0,0, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 8001416:	2301      	movs	r3, #1
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <_Z9laji_stopv+0x3c>)
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	2310      	movs	r3, #16
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <_Z9laji_stopv+0x40>)
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	480a      	ldr	r0, [pc, #40]	; (8001454 <_Z9laji_stopv+0x44>)
 800142a:	f7ff fea3 	bl	8001174 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
	lifting.move(0,0, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 800142e:	2304      	movs	r3, #4
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <_Z9laji_stopv+0x48>)
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	2308      	movs	r3, #8
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <_Z9laji_stopv+0x48>)
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <_Z9laji_stopv+0x4c>)
 8001442:	f7ff fe97 	bl	8001174 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40020400 	.word	0x40020400
 8001450:	40020000 	.word	0x40020000
 8001454:	20000120 	.word	0x20000120
 8001458:	40020800 	.word	0x40020800
 800145c:	20000124 	.word	0x20000124

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f005 f9d6 	bl	8006814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001468:	f000 f81a 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146c:	f000 fb8c 	bl	8001b88 <MX_GPIO_Init>
  MX_DMA_Init();
 8001470:	f000 fb62 	bl	8001b38 <MX_DMA_Init>
  MX_TIM1_Init();
 8001474:	f000 f882 	bl	800157c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001478:	f000 f8d8 	bl	800162c <MX_TIM2_Init>
  MX_TIM3_Init();
 800147c:	f000 f92a 	bl	80016d4 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001480:	f000 fa30 	bl	80018e4 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001484:	f000 fab2 	bl	80019ec <MX_TIM12_Init>
  MX_TIM4_Init();
 8001488:	f000 f978 	bl	800177c <MX_TIM4_Init>
  MX_TIM5_Init();
 800148c:	f000 f9dc 	bl	8001848 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001490:	f000 fafe 	bl	8001a90 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001494:	f000 fb26 	bl	8001ae4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8001498:	f000 fc2e 	bl	8001cf8 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800149c:	e7fe      	b.n	800149c <main+0x3c>
	...

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	2234      	movs	r2, #52	; 0x34
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f009 fd98 	bl	800afe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <SystemClock_Config+0xd4>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a29      	ldr	r2, [pc, #164]	; (8001574 <SystemClock_Config+0xd4>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <SystemClock_Config+0xd4>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <SystemClock_Config+0xd8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014ec:	4a22      	ldr	r2, [pc, #136]	; (8001578 <SystemClock_Config+0xd8>)
 80014ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b20      	ldr	r3, [pc, #128]	; (8001578 <SystemClock_Config+0xd8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001500:	2301      	movs	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001508:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150a:	2302      	movs	r3, #2
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001514:	2304      	movs	r3, #4
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001518:	2340      	movs	r3, #64	; 0x40
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800151c:	2302      	movs	r3, #2
 800151e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001524:	2302      	movs	r3, #2
 8001526:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4618      	mov	r0, r3
 800152e:	f006 fda5 	bl	800807c <HAL_RCC_OscConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001538:	f000 fbd8 	bl	8001cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153c:	230f      	movs	r3, #15
 800153e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001540:	2302      	movs	r3, #2
 8001542:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800154e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001552:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	2102      	movs	r1, #2
 800155a:	4618      	mov	r0, r3
 800155c:	f006 fa44 	bl	80079e8 <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001566:	f000 fbc1 	bl	8001cec <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	3750      	adds	r7, #80	; 0x50
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000

0800157c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	; 0x30
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	2224      	movs	r2, #36	; 0x24
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f009 fd2a 	bl	800afe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <MX_TIM1_Init+0xa8>)
 800159a:	4a23      	ldr	r2, [pc, #140]	; (8001628 <MX_TIM1_Init+0xac>)
 800159c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <MX_TIM1_Init+0xa8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <MX_TIM1_Init+0xa8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <MX_TIM1_Init+0xa8>)
 80015ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <MX_TIM1_Init+0xa8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_TIM1_Init+0xa8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_TIM1_Init+0xa8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015cc:	2301      	movs	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015dc:	2301      	movs	r3, #1
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	4619      	mov	r1, r3
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <MX_TIM1_Init+0xa8>)
 80015f0:	f007 f9ba 	bl	8008968 <HAL_TIM_Encoder_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80015fa:	f000 fb77 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <MX_TIM1_Init+0xa8>)
 800160c:	f008 f8aa 	bl	8009764 <HAL_TIMEx_MasterConfigSynchronization>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001616:	f000 fb69 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3730      	adds	r7, #48	; 0x30
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000134 	.word	0x20000134
 8001628:	40010000 	.word	0x40010000

0800162c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	; 0x30
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	2224      	movs	r2, #36	; 0x24
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f009 fcd2 	bl	800afe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <MX_TIM2_Init+0xa4>)
 800164a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <MX_TIM2_Init+0xa4>)
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <MX_TIM2_Init+0xa4>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <MX_TIM2_Init+0xa4>)
 800165e:	f04f 32ff 	mov.w	r2, #4294967295
 8001662:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_TIM2_Init+0xa4>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <MX_TIM2_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001670:	2301      	movs	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001678:	2301      	movs	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001688:	2301      	movs	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	4619      	mov	r1, r3
 800169a:	480d      	ldr	r0, [pc, #52]	; (80016d0 <MX_TIM2_Init+0xa4>)
 800169c:	f007 f964 	bl	8008968 <HAL_TIM_Encoder_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016a6:	f000 fb21 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <MX_TIM2_Init+0xa4>)
 80016b8:	f008 f854 	bl	8009764 <HAL_TIMEx_MasterConfigSynchronization>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80016c2:	f000 fb13 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	3730      	adds	r7, #48	; 0x30
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000017c 	.word	0x2000017c

080016d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	2224      	movs	r2, #36	; 0x24
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f009 fc7e 	bl	800afe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <MX_TIM3_Init+0xa0>)
 80016f2:	4a21      	ldr	r2, [pc, #132]	; (8001778 <MX_TIM3_Init+0xa4>)
 80016f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016f6:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <MX_TIM3_Init+0xa0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <MX_TIM3_Init+0xa0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <MX_TIM3_Init+0xa0>)
 8001704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001708:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <MX_TIM3_Init+0xa0>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <MX_TIM3_Init+0xa0>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001716:	2301      	movs	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800172e:	2301      	movs	r3, #1
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <MX_TIM3_Init+0xa0>)
 8001742:	f007 f911 	bl	8008968 <HAL_TIM_Encoder_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800174c:	f000 face 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_TIM3_Init+0xa0>)
 800175e:	f008 f801 	bl	8009764 <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001768:	f000 fac0 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	3730      	adds	r7, #48	; 0x30
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200001c4 	.word	0x200001c4
 8001778:	40000400 	.word	0x40000400

0800177c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001782:	f107 0320 	add.w	r3, r7, #32
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <MX_TIM4_Init+0xc4>)
 80017a0:	4a28      	ldr	r2, [pc, #160]	; (8001844 <MX_TIM4_Init+0xc8>)
 80017a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 80017a4:	4b26      	ldr	r3, [pc, #152]	; (8001840 <MX_TIM4_Init+0xc4>)
 80017a6:	223f      	movs	r2, #63	; 0x3f
 80017a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <MX_TIM4_Init+0xc4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80017b0:	4b23      	ldr	r3, [pc, #140]	; (8001840 <MX_TIM4_Init+0xc4>)
 80017b2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <MX_TIM4_Init+0xc4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <MX_TIM4_Init+0xc4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017c4:	481e      	ldr	r0, [pc, #120]	; (8001840 <MX_TIM4_Init+0xc4>)
 80017c6:	f006 ffb7 	bl	8008738 <HAL_TIM_PWM_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80017d0:	f000 fa8c 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017dc:	f107 0320 	add.w	r3, r7, #32
 80017e0:	4619      	mov	r1, r3
 80017e2:	4817      	ldr	r0, [pc, #92]	; (8001840 <MX_TIM4_Init+0xc4>)
 80017e4:	f007 ffbe 	bl	8009764 <HAL_TIMEx_MasterConfigSynchronization>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80017ee:	f000 fa7d 	bl	8001cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f2:	2360      	movs	r3, #96	; 0x60
 80017f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 600;
 80017f6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	480d      	ldr	r0, [pc, #52]	; (8001840 <MX_TIM4_Init+0xc4>)
 800180c:	f007 fae8 	bl	8008de0 <HAL_TIM_PWM_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001816:	f000 fa69 	bl	8001cec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2204      	movs	r2, #4
 800181e:	4619      	mov	r1, r3
 8001820:	4807      	ldr	r0, [pc, #28]	; (8001840 <MX_TIM4_Init+0xc4>)
 8001822:	f007 fadd 	bl	8008de0 <HAL_TIM_PWM_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800182c:	f000 fa5e 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <MX_TIM4_Init+0xc4>)
 8001832:	f004 fd01 	bl	8006238 <HAL_TIM_MspPostInit>

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000020c 	.word	0x2000020c
 8001844:	40000800 	.word	0x40000800

08001848 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <MX_TIM5_Init+0x94>)
 8001866:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <MX_TIM5_Init+0x98>)
 8001868:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_TIM5_Init+0x94>)
 800186c:	223f      	movs	r2, #63	; 0x3f
 800186e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_TIM5_Init+0x94>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_TIM5_Init+0x94>)
 8001878:	f240 32e7 	movw	r2, #999	; 0x3e7
 800187c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_TIM5_Init+0x94>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MX_TIM5_Init+0x94>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800188a:	4814      	ldr	r0, [pc, #80]	; (80018dc <MX_TIM5_Init+0x94>)
 800188c:	f006 fe94 	bl	80085b8 <HAL_TIM_Base_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001896:	f000 fa29 	bl	8001cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018a0:	f107 0308 	add.w	r3, r7, #8
 80018a4:	4619      	mov	r1, r3
 80018a6:	480d      	ldr	r0, [pc, #52]	; (80018dc <MX_TIM5_Init+0x94>)
 80018a8:	f007 fb5c 	bl	8008f64 <HAL_TIM_ConfigClockSource>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80018b2:	f000 fa1b 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018be:	463b      	mov	r3, r7
 80018c0:	4619      	mov	r1, r3
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <MX_TIM5_Init+0x94>)
 80018c4:	f007 ff4e 	bl	8009764 <HAL_TIMEx_MasterConfigSynchronization>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80018ce:	f000 fa0d 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000254 	.word	0x20000254
 80018e0:	40000c00 	.word	0x40000c00

080018e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b092      	sub	sp, #72	; 0x48
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	2220      	movs	r2, #32
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f009 fb68 	bl	800afe4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <MX_TIM8_Init+0x100>)
 8001916:	4a34      	ldr	r2, [pc, #208]	; (80019e8 <MX_TIM8_Init+0x104>)
 8001918:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 800191a:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <MX_TIM8_Init+0x100>)
 800191c:	223f      	movs	r2, #63	; 0x3f
 800191e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <MX_TIM8_Init+0x100>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001926:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <MX_TIM8_Init+0x100>)
 8001928:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800192c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192e:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <MX_TIM8_Init+0x100>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001934:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <MX_TIM8_Init+0x100>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <MX_TIM8_Init+0x100>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001940:	4828      	ldr	r0, [pc, #160]	; (80019e4 <MX_TIM8_Init+0x100>)
 8001942:	f006 fef9 	bl	8008738 <HAL_TIM_PWM_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800194c:	f000 f9ce 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001958:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800195c:	4619      	mov	r1, r3
 800195e:	4821      	ldr	r0, [pc, #132]	; (80019e4 <MX_TIM8_Init+0x100>)
 8001960:	f007 ff00 	bl	8009764 <HAL_TIMEx_MasterConfigSynchronization>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800196a:	f000 f9bf 	bl	8001cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196e:	2360      	movs	r3, #96	; 0x60
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 600;
 8001972:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	2200      	movs	r2, #0
 8001992:	4619      	mov	r1, r3
 8001994:	4813      	ldr	r0, [pc, #76]	; (80019e4 <MX_TIM8_Init+0x100>)
 8001996:	f007 fa23 	bl	8008de0 <HAL_TIM_PWM_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80019a0:	f000 f9a4 	bl	8001cec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4807      	ldr	r0, [pc, #28]	; (80019e4 <MX_TIM8_Init+0x100>)
 80019c8:	f007 ff48 	bl	800985c <HAL_TIMEx_ConfigBreakDeadTime>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 80019d2:	f000 f98b 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80019d6:	4803      	ldr	r0, [pc, #12]	; (80019e4 <MX_TIM8_Init+0x100>)
 80019d8:	f004 fc2e 	bl	8006238 <HAL_TIM_MspPostInit>

}
 80019dc:	bf00      	nop
 80019de:	3748      	adds	r7, #72	; 0x48
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000029c 	.word	0x2000029c
 80019e8:	40010400 	.word	0x40010400

080019ec <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	615a      	str	r2, [r3, #20]
 8001a02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <MX_TIM12_Init+0x9c>)
 8001a06:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <MX_TIM12_Init+0xa0>)
 8001a08:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 63;
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <MX_TIM12_Init+0x9c>)
 8001a0c:	223f      	movs	r2, #63	; 0x3f
 8001a0e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <MX_TIM12_Init+0x9c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19999;
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <MX_TIM12_Init+0x9c>)
 8001a18:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a1c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <MX_TIM12_Init+0x9c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <MX_TIM12_Init+0x9c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001a2a:	4817      	ldr	r0, [pc, #92]	; (8001a88 <MX_TIM12_Init+0x9c>)
 8001a2c:	f006 fe84 	bl	8008738 <HAL_TIM_PWM_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001a36:	f000 f959 	bl	8001cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a3a:	2360      	movs	r3, #96	; 0x60
 8001a3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8001a3e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4619      	mov	r1, r3
 8001a52:	480d      	ldr	r0, [pc, #52]	; (8001a88 <MX_TIM12_Init+0x9c>)
 8001a54:	f007 f9c4 	bl	8008de0 <HAL_TIM_PWM_ConfigChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8001a5e:	f000 f945 	bl	8001cec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2204      	movs	r2, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4807      	ldr	r0, [pc, #28]	; (8001a88 <MX_TIM12_Init+0x9c>)
 8001a6a:	f007 f9b9 	bl	8008de0 <HAL_TIM_PWM_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001a74:	f000 f93a 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <MX_TIM12_Init+0x9c>)
 8001a7a:	f004 fbdd 	bl	8006238 <HAL_TIM_MspPostInit>

}
 8001a7e:	bf00      	nop
 8001a80:	3720      	adds	r7, #32
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200002e4 	.word	0x200002e4
 8001a8c:	40001800 	.word	0x40001800

08001a90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <MX_USART2_UART_Init+0x50>)
 8001a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001a9c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ac8:	f007 ff2e 	bl	8009928 <HAL_UART_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ad2:	f000 f90b 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000032c 	.word	0x2000032c
 8001ae0:	40004400 	.word	0x40004400

08001ae4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ae8:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <MX_USART3_UART_Init+0x48>)
 8001aea:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <MX_USART3_UART_Init+0x4c>)
 8001aec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_USART3_UART_Init+0x48>)
 8001af0:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <MX_USART3_UART_Init+0x50>)
 8001af2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <MX_USART3_UART_Init+0x48>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_USART3_UART_Init+0x48>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <MX_USART3_UART_Init+0x48>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_USART3_UART_Init+0x48>)
 8001b08:	220c      	movs	r2, #12
 8001b0a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <MX_USART3_UART_Init+0x48>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_USART3_UART_Init+0x48>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b18:	4804      	ldr	r0, [pc, #16]	; (8001b2c <MX_USART3_UART_Init+0x48>)
 8001b1a:	f007 ff05 	bl	8009928 <HAL_UART_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001b24:	f000 f8e2 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000370 	.word	0x20000370
 8001b30:	40004800 	.word	0x40004800
 8001b34:	0007a120 	.word	0x0007a120

08001b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <MX_DMA_Init+0x4c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <MX_DMA_Init+0x4c>)
 8001b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <MX_DMA_Init+0x4c>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2010      	movs	r0, #16
 8001b60:	f004 ffdf 	bl	8006b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b64:	2010      	movs	r0, #16
 8001b66:	f004 fff8 	bl	8006b5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2011      	movs	r0, #17
 8001b70:	f004 ffd7 	bl	8006b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001b74:	2011      	movs	r0, #17
 8001b76:	f004 fff0 	bl	8006b5a <HAL_NVIC_EnableIRQ>

}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800

08001b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <MX_GPIO_Init+0x154>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a4d      	ldr	r2, [pc, #308]	; (8001cdc <MX_GPIO_Init+0x154>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <MX_GPIO_Init+0x154>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <MX_GPIO_Init+0x154>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a46      	ldr	r2, [pc, #280]	; (8001cdc <MX_GPIO_Init+0x154>)
 8001bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <MX_GPIO_Init+0x154>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <MX_GPIO_Init+0x154>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a3f      	ldr	r2, [pc, #252]	; (8001cdc <MX_GPIO_Init+0x154>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <MX_GPIO_Init+0x154>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b39      	ldr	r3, [pc, #228]	; (8001cdc <MX_GPIO_Init+0x154>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a38      	ldr	r2, [pc, #224]	; (8001cdc <MX_GPIO_Init+0x154>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <MX_GPIO_Init+0x154>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f640 018f 	movw	r1, #2191	; 0x88f
 8001c14:	4832      	ldr	r0, [pc, #200]	; (8001ce0 <MX_GPIO_Init+0x158>)
 8001c16:	f005 fecd 	bl	80079b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2110      	movs	r1, #16
 8001c1e:	4831      	ldr	r0, [pc, #196]	; (8001ce4 <MX_GPIO_Init+0x15c>)
 8001c20:	f005 fec8 	bl	80079b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	f240 3101 	movw	r1, #769	; 0x301
 8001c2a:	482f      	ldr	r0, [pc, #188]	; (8001ce8 <MX_GPIO_Init+0x160>)
 8001c2c:	f005 fec2 	bl	80079b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_12;
 8001c30:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4826      	ldr	r0, [pc, #152]	; (8001ce0 <MX_GPIO_Init+0x158>)
 8001c46:	f005 fc15 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC7 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c4a:	f640 038f 	movw	r3, #2191	; 0x88f
 8001c4e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	481f      	ldr	r0, [pc, #124]	; (8001ce0 <MX_GPIO_Init+0x158>)
 8001c64:	f005 fc06 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c68:	2310      	movs	r3, #16
 8001c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4819      	ldr	r0, [pc, #100]	; (8001ce4 <MX_GPIO_Init+0x15c>)
 8001c80:	f005 fbf8 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8001c84:	f240 3301 	movw	r3, #769	; 0x301
 8001c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4812      	ldr	r0, [pc, #72]	; (8001ce8 <MX_GPIO_Init+0x160>)
 8001c9e:	f005 fbe9 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480b      	ldr	r0, [pc, #44]	; (8001ce4 <MX_GPIO_Init+0x15c>)
 8001cb8:	f005 fbdc 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cbc:	2330      	movs	r3, #48	; 0x30
 8001cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4806      	ldr	r0, [pc, #24]	; (8001ce8 <MX_GPIO_Init+0x160>)
 8001cd0:	f005 fbd0 	bl	8007474 <HAL_GPIO_Init>

}
 8001cd4:	bf00      	nop
 8001cd6:	3728      	adds	r7, #40	; 0x28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020400 	.word	0x40020400

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>
	...

08001cf8 <main_function>:
extern TIM_HandleTypeDef htim8;
extern TIM_HandleTypeDef htim12;

uint16_t angle = 90.0;

void main_function(){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	ros_setup();
 8001cfc:	f002 f84c 	bl	8003d98 <_Z9ros_setupv>
	stm_setup();
 8001d00:	f000 f80e 	bl	8001d20 <stm_setup>
//	UART_Send_SetMotorPosition(1, 800, 200);
	while(1){
		//__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,600+10*angle);
		//UART_Send_SetMotorPosition(1, 800, 300); //800 - 2200
		ros_loop();
 8001d04:	f002 f876 	bl	8003df4 <_Z8ros_loopv>
		if(flag == 8){
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <main_function+0x20>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d1f9      	bne.n	8001d04 <main_function+0xc>
			run = 1;
 8001d10:	4b02      	ldr	r3, [pc, #8]	; (8001d1c <main_function+0x24>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
		ros_loop();
 8001d16:	e7f5      	b.n	8001d04 <main_function+0xc>
 8001d18:	2000048c 	.word	0x2000048c
 8001d1c:	2000000c 	.word	0x2000000c

08001d20 <stm_setup>:
		}
	}
}

void stm_setup(void){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	  //PWM
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);	//PB6 -> attach servo
 8001d24:	2100      	movs	r1, #0
 8001d26:	4818      	ldr	r0, [pc, #96]	; (8001d88 <stm_setup+0x68>)
 8001d28:	f006 fd56 	bl	80087d8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);	//PB7 -> ball_seat servo
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	4816      	ldr	r0, [pc, #88]	; (8001d88 <stm_setup+0x68>)
 8001d30:	f006 fd52 	bl	80087d8 <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);	//PC6 -> rail servo
 8001d34:	2100      	movs	r1, #0
 8001d36:	4815      	ldr	r0, [pc, #84]	; (8001d8c <stm_setup+0x6c>)
 8001d38:	f006 fd4e 	bl	80087d8 <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);	//PB14 -> horizontal_angle speed
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4814      	ldr	r0, [pc, #80]	; (8001d90 <stm_setup+0x70>)
 8001d40:	f006 fd4a 	bl	80087d8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);	//PB15 -> elevation_angle speed
 8001d44:	2104      	movs	r1, #4
 8001d46:	4812      	ldr	r0, [pc, #72]	; (8001d90 <stm_setup+0x70>)
 8001d48:	f006 fd46 	bl	80087d8 <HAL_TIM_PWM_Start>

	  //Encoder
	  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_1);	//Shooter Encoder tl1
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4811      	ldr	r0, [pc, #68]	; (8001d94 <stm_setup+0x74>)
 8001d50:	f006 feb0 	bl	8008ab4 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_2);	//Shooter Encoder tl2
 8001d54:	2104      	movs	r1, #4
 8001d56:	480f      	ldr	r0, [pc, #60]	; (8001d94 <stm_setup+0x74>)
 8001d58:	f006 feac 	bl	8008ab4 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);	//horizontal_angle Encoder tl1
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	480e      	ldr	r0, [pc, #56]	; (8001d98 <stm_setup+0x78>)
 8001d60:	f006 fea8 	bl	8008ab4 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_2);	//horizontal_angle Encoder tl2
 8001d64:	2104      	movs	r1, #4
 8001d66:	480c      	ldr	r0, [pc, #48]	; (8001d98 <stm_setup+0x78>)
 8001d68:	f006 fea4 	bl	8008ab4 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);	//elevation_angle Encoder tl1
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	480b      	ldr	r0, [pc, #44]	; (8001d9c <stm_setup+0x7c>)
 8001d70:	f006 fea0 	bl	8008ab4 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);	//elevation_angle Encoder tl2
 8001d74:	2104      	movs	r1, #4
 8001d76:	4809      	ldr	r0, [pc, #36]	; (8001d9c <stm_setup+0x7c>)
 8001d78:	f006 fe9c 	bl	8008ab4 <HAL_TIM_Encoder_Start>
	  //Timer Interupt
	  HAL_TIM_Base_Start_IT(&htim5); //PSC 63 , ARR 999 -> 1kHz
 8001d7c:	4808      	ldr	r0, [pc, #32]	; (8001da0 <stm_setup+0x80>)
 8001d7e:	f006 fc6b 	bl	8008658 <HAL_TIM_Base_Start_IT>
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000020c 	.word	0x2000020c
 8001d8c:	2000029c 	.word	0x2000029c
 8001d90:	200002e4 	.word	0x200002e4
 8001d94:	20000134 	.word	0x20000134
 8001d98:	2000017c 	.word	0x2000017c
 8001d9c:	200001c4 	.word	0x200001c4
 8001da0:	20000254 	.word	0x20000254

08001da4 <_Z15reset_conditionv>:

#include "reset_button.h"
#include "stm32f4xx_hal.h"

int go,a,b,c,d;
int reset_condition(){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	go = HAL_GPIO_ReadPin(MAIN_RESET_PORT, MAIN_RESET_PIN);
 8001da8:	2120      	movs	r1, #32
 8001daa:	4853      	ldr	r0, [pc, #332]	; (8001ef8 <_Z15reset_conditionv+0x154>)
 8001dac:	f005 fdea 	bl	8007984 <HAL_GPIO_ReadPin>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b51      	ldr	r3, [pc, #324]	; (8001efc <_Z15reset_conditionv+0x158>)
 8001db6:	601a      	str	r2, [r3, #0]
	if(go){
 8001db8:	4b50      	ldr	r3, [pc, #320]	; (8001efc <_Z15reset_conditionv+0x158>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8096 	beq.w	8001eee <_Z15reset_conditionv+0x14a>
		a = HAL_GPIO_ReadPin(STAGE1_PORT, STAGE1_PIN);
 8001dc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc6:	484e      	ldr	r0, [pc, #312]	; (8001f00 <_Z15reset_conditionv+0x15c>)
 8001dc8:	f005 fddc 	bl	8007984 <HAL_GPIO_ReadPin>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <_Z15reset_conditionv+0x160>)
 8001dd2:	601a      	str	r2, [r3, #0]
		b = HAL_GPIO_ReadPin(BOARD_PORT, BOARD_PIN);
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	484c      	ldr	r0, [pc, #304]	; (8001f08 <_Z15reset_conditionv+0x164>)
 8001dd8:	f005 fdd4 	bl	8007984 <HAL_GPIO_ReadPin>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <_Z15reset_conditionv+0x168>)
 8001de2:	601a      	str	r2, [r3, #0]
		c = HAL_GPIO_ReadPin(BASEBALL_PORT, BASEBALL_PIN);
 8001de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de8:	4847      	ldr	r0, [pc, #284]	; (8001f08 <_Z15reset_conditionv+0x164>)
 8001dea:	f005 fdcb 	bl	8007984 <HAL_GPIO_ReadPin>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <_Z15reset_conditionv+0x16c>)
 8001df4:	601a      	str	r2, [r3, #0]
		d = HAL_GPIO_ReadPin(BADMINTON_PORT, BADMINTON_PIN);
 8001df6:	2110      	movs	r1, #16
 8001df8:	483f      	ldr	r0, [pc, #252]	; (8001ef8 <_Z15reset_conditionv+0x154>)
 8001dfa:	f005 fdc3 	bl	8007984 <HAL_GPIO_ReadPin>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b44      	ldr	r3, [pc, #272]	; (8001f14 <_Z15reset_conditionv+0x170>)
 8001e04:	601a      	str	r2, [r3, #0]
		if(!a & !b & !c & !d){
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <_Z15reset_conditionv+0x160>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <_Z15reset_conditionv+0x168>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <_Z15reset_conditionv+0x16c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <_Z15reset_conditionv+0x170>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <_Z15reset_conditionv+0x8a>
			return 1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e062      	b.n	8001ef4 <_Z15reset_conditionv+0x150>
		}
		else if(a & !b & !c & !d){
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <_Z15reset_conditionv+0x168>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf0c      	ite	eq
 8001e36:	2301      	moveq	r3, #1
 8001e38:	2300      	movne	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <_Z15reset_conditionv+0x160>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4013      	ands	r3, r2
 8001e44:	4a32      	ldr	r2, [pc, #200]	; (8001f10 <_Z15reset_conditionv+0x16c>)
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	2a00      	cmp	r2, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2201      	moveq	r2, #1
 8001e4e:	2200      	movne	r2, #0
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	4013      	ands	r3, r2
 8001e54:	4a2f      	ldr	r2, [pc, #188]	; (8001f14 <_Z15reset_conditionv+0x170>)
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	2a00      	cmp	r2, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2201      	moveq	r2, #1
 8001e5e:	2200      	movne	r2, #0
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <_Z15reset_conditionv+0xc8>
			return 2;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e043      	b.n	8001ef4 <_Z15reset_conditionv+0x150>
		}
		else if(a & b & !c & !d){
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <_Z15reset_conditionv+0x160>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <_Z15reset_conditionv+0x168>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4013      	ands	r3, r2
 8001e76:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <_Z15reset_conditionv+0x16c>)
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	bf0c      	ite	eq
 8001e7e:	2201      	moveq	r2, #1
 8001e80:	2200      	movne	r2, #0
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	4013      	ands	r3, r2
 8001e86:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <_Z15reset_conditionv+0x170>)
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	2a00      	cmp	r2, #0
 8001e8c:	bf0c      	ite	eq
 8001e8e:	2201      	moveq	r2, #1
 8001e90:	2200      	movne	r2, #0
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <_Z15reset_conditionv+0xfa>
			return 3;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e02a      	b.n	8001ef4 <_Z15reset_conditionv+0x150>
		}
		else if(a & b & c & !d){
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <_Z15reset_conditionv+0x160>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <_Z15reset_conditionv+0x168>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <_Z15reset_conditionv+0x16c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4013      	ands	r3, r2
 8001eae:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <_Z15reset_conditionv+0x170>)
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	2a00      	cmp	r2, #0
 8001eb4:	bf0c      	ite	eq
 8001eb6:	2201      	moveq	r2, #1
 8001eb8:	2200      	movne	r2, #0
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <_Z15reset_conditionv+0x122>
			return 4;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e016      	b.n	8001ef4 <_Z15reset_conditionv+0x150>
		}
		else if(a & b & !c & d){
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <_Z15reset_conditionv+0x160>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <_Z15reset_conditionv+0x168>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <_Z15reset_conditionv+0x16c>)
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2201      	moveq	r2, #1
 8001eda:	2200      	movne	r2, #0
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	401a      	ands	r2, r3
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <_Z15reset_conditionv+0x170>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <_Z15reset_conditionv+0x14e>
			return 5;
 8001eea:	2305      	movs	r3, #5
 8001eec:	e002      	b.n	8001ef4 <_Z15reset_conditionv+0x150>
		}
	}
	else{
		return 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <_Z15reset_conditionv+0x150>
	}
	return 0;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	20000474 	.word	0x20000474
 8001f00:	40020000 	.word	0x40020000
 8001f04:	20000478 	.word	0x20000478
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	2000047c 	.word	0x2000047c
 8001f10:	20000480 	.word	0x20000480
 8001f14:	20000484 	.word	0x20000484

08001f18 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <_ZN3ros3MsgC1Ev+0x1c>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	0800b63c 	.word	0x0800b63c

08001f5c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
      data()
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ffe8 	bl	8001f3c <_ZN3ros3MsgC1Ev>
 8001f6c:	4a06      	ldr	r2, [pc, #24]	; (8001f88 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ffce 	bl	8001f18 <_ZN3ros4TimeC1Ev>
    {
    }
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	0800b624 	.word	0x0800b624

08001f8c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	b2ca      	uxtb	r2, r1
 8001fa6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	0a19      	lsrs	r1, r3, #8
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	b2ca      	uxtb	r2, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	0c19      	lsrs	r1, r3, #16
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b2ca      	uxtb	r2, r1
 8001fca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	0e19      	lsrs	r1, r3, #24
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3303      	adds	r3, #3
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	b2ca      	uxtb	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6899      	ldr	r1, [r3, #8]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	b2ca      	uxtb	r2, r1
 8001ff0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	0a19      	lsrs	r1, r3, #8
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	b2ca      	uxtb	r2, r1
 8002002:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	0c19      	lsrs	r1, r3, #16
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3302      	adds	r3, #2
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4413      	add	r3, r2
 8002012:	b2ca      	uxtb	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0e19      	lsrs	r1, r3, #24
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3303      	adds	r3, #3
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	4413      	add	r3, r2
 8002024:	b2ca      	uxtb	r2, r1
 8002026:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3304      	adds	r3, #4
 800202c:	60fb      	str	r3, [r7, #12]
      return offset;
 800202e:	68fb      	ldr	r3, [r7, #12]
    }
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	4413      	add	r3, r2
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3301      	adds	r3, #1
 8002060:	6839      	ldr	r1, [r7, #0]
 8002062:	440b      	add	r3, r1
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3302      	adds	r3, #2
 8002076:	6839      	ldr	r1, [r7, #0]
 8002078:	440b      	add	r3, r1
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	041b      	lsls	r3, r3, #16
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3303      	adds	r3, #3
 800208c:	6839      	ldr	r1, [r7, #0]
 800208e:	440b      	add	r3, r1
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	061b      	lsls	r3, r3, #24
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3304      	adds	r3, #4
 800209e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3301      	adds	r3, #1
 80020b6:	6839      	ldr	r1, [r7, #0]
 80020b8:	440b      	add	r3, r1
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3302      	adds	r3, #2
 80020cc:	6839      	ldr	r1, [r7, #0]
 80020ce:	440b      	add	r3, r1
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	041b      	lsls	r3, r3, #16
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3303      	adds	r3, #3
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	440b      	add	r3, r1
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	061b      	lsls	r3, r3, #24
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3304      	adds	r3, #4
 80020f4:	60fb      	str	r3, [r7, #12]
     return offset;
 80020f6:	68fb      	ldr	r3, [r7, #12]
    }
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	0800b310 	.word	0x0800b310

08002120 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	0800b320 	.word	0x0800b320

0800213c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fef8 	bl	8001f3c <_ZN3ros3MsgC1Ev>
 800214c:	4a0b      	ldr	r2, [pc, #44]	; (800217c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	809a      	strh	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a07      	ldr	r2, [pc, #28]	; (8002180 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a06      	ldr	r2, [pc, #24]	; (8002180 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002168:	611a      	str	r2, [r3, #16]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	615a      	str	r2, [r3, #20]
    {
    }
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	0800b60c 	.word	0x0800b60c
 8002180:	0800b344 	.word	0x0800b344

08002184 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8899      	ldrh	r1, [r3, #4]
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	4413      	add	r3, r2
 800219c:	b2ca      	uxtb	r2, r1
 800219e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	889b      	ldrh	r3, [r3, #4]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	b299      	uxth	r1, r3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3301      	adds	r3, #1
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	b2ca      	uxtb	r2, r1
 80021b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	3302      	adds	r3, #2
 80021b8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f822 	bl	8000208 <strlen>
 80021c4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	69b9      	ldr	r1, [r7, #24]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 feaa 	bl	8003f28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	3304      	adds	r3, #4
 80021d8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	18d0      	adds	r0, r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4619      	mov	r1, r3
 80021e8:	f008 feee 	bl	800afc8 <memcpy>
      offset += length_topic_name;
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	4413      	add	r3, r2
 80021f2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f805 	bl	8000208 <strlen>
 80021fe:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	4413      	add	r3, r2
 8002206:	6979      	ldr	r1, [r7, #20]
 8002208:	4618      	mov	r0, r3
 800220a:	f001 fe8d 	bl	8003f28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3304      	adds	r3, #4
 8002212:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	18d0      	adds	r0, r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4619      	mov	r1, r3
 8002222:	f008 fed1 	bl	800afc8 <memcpy>
      offset += length_message_type;
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4413      	add	r3, r2
 800222c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fd ffe8 	bl	8000208 <strlen>
 8002238:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4413      	add	r3, r2
 8002240:	6939      	ldr	r1, [r7, #16]
 8002242:	4618      	mov	r0, r3
 8002244:	f001 fe70 	bl	8003f28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	3304      	adds	r3, #4
 800224c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	18d0      	adds	r0, r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4619      	mov	r1, r3
 800225c:	f008 feb4 	bl	800afc8 <memcpy>
      offset += length_md5sum;
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800226e:	68f9      	ldr	r1, [r7, #12]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4413      	add	r3, r2
 8002276:	b2ca      	uxtb	r2, r1
 8002278:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	0a19      	lsrs	r1, r3, #8
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	4413      	add	r3, r2
 8002286:	b2ca      	uxtb	r2, r1
 8002288:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	0c19      	lsrs	r1, r3, #16
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3302      	adds	r3, #2
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	4413      	add	r3, r2
 8002296:	b2ca      	uxtb	r2, r1
 8002298:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	0e19      	lsrs	r1, r3, #24
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3303      	adds	r3, #3
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	b2ca      	uxtb	r2, r1
 80022a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	61fb      	str	r3, [r7, #28]
      return offset;
 80022b0:	69fb      	ldr	r3, [r7, #28]
    }
 80022b2:	4618      	mov	r0, r3
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b08a      	sub	sp, #40	; 0x28
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	889b      	ldrh	r3, [r3, #4]
 80022da:	b21a      	sxth	r2, r3
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	3301      	adds	r3, #1
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	440b      	add	r3, r1
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	4313      	orrs	r3, r2
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	3302      	adds	r3, #2
 80022f8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	441a      	add	r2, r3
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f001 fe2c 	bl	8003f64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	3304      	adds	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	4413      	add	r3, r2
 800231c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231e:	429a      	cmp	r2, r3
 8002320:	d20c      	bcs.n	800233c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	441a      	add	r2, r3
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	3b01      	subs	r3, #1
 800232c:	6839      	ldr	r1, [r7, #0]
 800232e:	440b      	add	r3, r1
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	3301      	adds	r3, #1
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	e7ec      	b.n	8002316 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	4413      	add	r3, r2
 8002342:	3b01      	subs	r3, #1
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	4413      	add	r3, r2
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	3b01      	subs	r3, #1
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	441a      	add	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	4413      	add	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	441a      	add	r2, r3
 8002366:	f107 0310 	add.w	r3, r7, #16
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f001 fdf9 	bl	8003f64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	3304      	adds	r3, #4
 8002376:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	6a3a      	ldr	r2, [r7, #32]
 8002384:	429a      	cmp	r2, r3
 8002386:	d20c      	bcs.n	80023a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	441a      	add	r2, r3
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	3b01      	subs	r3, #1
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	440b      	add	r3, r1
 8002396:	7812      	ldrb	r2, [r2, #0]
 8002398:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	3301      	adds	r3, #1
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	e7ec      	b.n	800237c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	3b01      	subs	r3, #1
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	441a      	add	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	441a      	add	r2, r3
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fdc6 	bl	8003f64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	3304      	adds	r3, #4
 80023dc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d20c      	bcs.n	8002408 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	441a      	add	r2, r3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6839      	ldr	r1, [r7, #0]
 80023fa:	440b      	add	r3, r1
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	3301      	adds	r3, #1
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e7ec      	b.n	80023e2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4413      	add	r3, r2
 800240e:	3b01      	subs	r3, #1
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	3b01      	subs	r3, #1
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	441a      	add	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4413      	add	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	6839      	ldr	r1, [r7, #0]
 8002436:	440a      	add	r2, r1
 8002438:	7812      	ldrb	r2, [r2, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	3301      	adds	r3, #1
 8002444:	6839      	ldr	r1, [r7, #0]
 8002446:	440b      	add	r3, r1
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	4313      	orrs	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3302      	adds	r3, #2
 8002456:	6839      	ldr	r1, [r7, #0]
 8002458:	440b      	add	r3, r1
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	041b      	lsls	r3, r3, #16
 800245e:	4313      	orrs	r3, r2
 8002460:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	3303      	adds	r3, #3
 8002468:	6839      	ldr	r1, [r7, #0]
 800246a:	440b      	add	r3, r1
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	061b      	lsls	r3, r3, #24
 8002470:	4313      	orrs	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	3304      	adds	r3, #4
 800247e:	61bb      	str	r3, [r7, #24]
     return offset;
 8002480:	69bb      	ldr	r3, [r7, #24]
    }
 8002482:	4618      	mov	r0, r3
 8002484:	3728      	adds	r7, #40	; 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	0800b348 	.word	0x0800b348

080024a8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	0800b364 	.word	0x0800b364

080024c4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fd34 	bl	8001f3c <_ZN3ros3MsgC1Ev>
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	711a      	strb	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80024e4:	609a      	str	r2, [r3, #8]
    {
    }
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	0800b5f4 	.word	0x0800b5f4
 80024f4:	0800b344 	.word	0x0800b344

080024f8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	4413      	add	r3, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	7912      	ldrb	r2, [r2, #4]
 8002510:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3301      	adds	r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fd fe73 	bl	8000208 <strlen>
 8002522:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	4413      	add	r3, r2
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	4618      	mov	r0, r3
 800252e:	f001 fcfb 	bl	8003f28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3304      	adds	r3, #4
 8002536:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	18d0      	adds	r0, r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4619      	mov	r1, r3
 8002546:	f008 fd3f 	bl	800afc8 <memcpy>
      offset += length_msg;
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4413      	add	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
      return offset;
 8002552:	68fb      	ldr	r3, [r7, #12]
    }
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	4413      	add	r3, r2
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	3301      	adds	r3, #1
 800257a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	441a      	add	r2, r3
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f001 fceb 	bl	8003f64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	3304      	adds	r3, #4
 8002592:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4413      	add	r3, r2
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d20c      	bcs.n	80025be <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	441a      	add	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	6839      	ldr	r1, [r7, #0]
 80025b0:	440b      	add	r3, r1
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e7ec      	b.n	8002598 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	3b01      	subs	r3, #1
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	441a      	add	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
     return offset;
 80025e2:	693b      	ldr	r3, [r7, #16]
    }
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	0800b388 	.word	0x0800b388

08002608 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	0800b39c 	.word	0x0800b39c

08002624 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fc84 	bl	8001f3c <_ZN3ros3MsgC1Ev>
 8002634:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	61da      	str	r2, [r3, #28]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	0800b5dc 	.word	0x0800b5dc

0800266c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	4413      	add	r3, r2
 8002684:	b2ca      	uxtb	r2, r1
 8002686:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	0a19      	lsrs	r1, r3, #8
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	3301      	adds	r3, #1
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	4413      	add	r3, r2
 8002696:	b2ca      	uxtb	r2, r1
 8002698:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	0c19      	lsrs	r1, r3, #16
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	3302      	adds	r3, #2
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	b2ca      	uxtb	r2, r1
 80026aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	0e19      	lsrs	r1, r3, #24
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	3303      	adds	r3, #3
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	b2ca      	uxtb	r2, r1
 80026bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	3304      	adds	r3, #4
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80026c4:	2300      	movs	r3, #0
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	6a3a      	ldr	r2, [r7, #32]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d22b      	bcs.n	800272a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80026e0:	6939      	ldr	r1, [r7, #16]
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	b2ca      	uxtb	r2, r1
 80026ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	0a19      	lsrs	r1, r3, #8
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	3301      	adds	r3, #1
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	b2ca      	uxtb	r2, r1
 80026fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	0c19      	lsrs	r1, r3, #16
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	3302      	adds	r3, #2
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	4413      	add	r3, r2
 8002708:	b2ca      	uxtb	r2, r1
 800270a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	0e19      	lsrs	r1, r3, #24
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	3303      	adds	r3, #3
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	4413      	add	r3, r2
 8002718:	b2ca      	uxtb	r2, r1
 800271a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	3304      	adds	r3, #4
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	3301      	adds	r3, #1
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	e7ce      	b.n	80026c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6919      	ldr	r1, [r3, #16]
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	4413      	add	r3, r2
 8002734:	b2ca      	uxtb	r2, r1
 8002736:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	0a19      	lsrs	r1, r3, #8
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	3301      	adds	r3, #1
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	4413      	add	r3, r2
 8002746:	b2ca      	uxtb	r2, r1
 8002748:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	0c19      	lsrs	r1, r3, #16
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	3302      	adds	r3, #2
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	4413      	add	r3, r2
 8002758:	b2ca      	uxtb	r2, r1
 800275a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	0e19      	lsrs	r1, r3, #24
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	3303      	adds	r3, #3
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	4413      	add	r3, r2
 800276a:	b2ca      	uxtb	r2, r1
 800276c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	3304      	adds	r3, #4
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	429a      	cmp	r2, r3
 8002780:	d22b      	bcs.n	80027da <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002790:	68f9      	ldr	r1, [r7, #12]
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	4413      	add	r3, r2
 8002798:	b2ca      	uxtb	r2, r1
 800279a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	0a19      	lsrs	r1, r3, #8
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	3301      	adds	r3, #1
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	b2ca      	uxtb	r2, r1
 80027aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	0c19      	lsrs	r1, r3, #16
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	3302      	adds	r3, #2
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	b2ca      	uxtb	r2, r1
 80027ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	0e19      	lsrs	r1, r3, #24
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	3303      	adds	r3, #3
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	b2ca      	uxtb	r2, r1
 80027ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	3304      	adds	r3, #4
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	e7ce      	b.n	8002778 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69d9      	ldr	r1, [r3, #28]
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	b2ca      	uxtb	r2, r1
 80027e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	0a19      	lsrs	r1, r3, #8
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	3301      	adds	r3, #1
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	b2ca      	uxtb	r2, r1
 80027f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	0c19      	lsrs	r1, r3, #16
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	3302      	adds	r3, #2
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	4413      	add	r3, r2
 8002808:	b2ca      	uxtb	r2, r1
 800280a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	0e19      	lsrs	r1, r3, #24
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	3303      	adds	r3, #3
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	4413      	add	r3, r2
 800281a:	b2ca      	uxtb	r2, r1
 800281c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	3304      	adds	r3, #4
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	429a      	cmp	r2, r3
 8002830:	d228      	bcs.n	8002884 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fce2 	bl	8000208 <strlen>
 8002844:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	4413      	add	r3, r2
 800284c:	6979      	ldr	r1, [r7, #20]
 800284e:	4618      	mov	r0, r3
 8002850:	f001 fb6a 	bl	8003f28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	3304      	adds	r3, #4
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	18d0      	adds	r0, r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4619      	mov	r1, r3
 8002870:	f008 fbaa 	bl	800afc8 <memcpy>
      offset += length_stringsi;
 8002874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	4413      	add	r3, r2
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	3301      	adds	r3, #1
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	e7d1      	b.n	8002828 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002886:	4618      	mov	r0, r3
 8002888:	3728      	adds	r7, #40	; 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800288e:	b580      	push	{r7, lr}
 8002890:	b08e      	sub	sp, #56	; 0x38
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800289c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	4413      	add	r3, r2
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80028a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a8:	3301      	adds	r3, #1
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	6a3a      	ldr	r2, [r7, #32]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80028b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ba:	3302      	adds	r3, #2
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	041b      	lsls	r3, r3, #16
 80028c4:	6a3a      	ldr	r2, [r7, #32]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80028ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028cc:	3303      	adds	r3, #3
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	6a3a      	ldr	r2, [r7, #32]
 80028d8:	4313      	orrs	r3, r2
 80028da:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80028dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028de:	3304      	adds	r3, #4
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	6a3a      	ldr	r2, [r7, #32]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d90a      	bls.n	8002902 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f008 fb7c 	bl	800aff4 <realloc>
 80028fc:	4602      	mov	r2, r0
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a3a      	ldr	r2, [r7, #32]
 8002906:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002908:	2300      	movs	r3, #0
 800290a:	633b      	str	r3, [r7, #48]	; 0x30
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002912:	429a      	cmp	r2, r3
 8002914:	d236      	bcs.n	8002984 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800291e:	6839      	ldr	r1, [r7, #0]
 8002920:	440a      	add	r2, r1
 8002922:	7812      	ldrb	r2, [r2, #0]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	3301      	adds	r3, #1
 800292e:	6839      	ldr	r1, [r7, #0]
 8002930:	440b      	add	r3, r1
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293e:	3302      	adds	r3, #2
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	440b      	add	r3, r1
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002950:	3303      	adds	r3, #3
 8002952:	6839      	ldr	r1, [r7, #0]
 8002954:	440b      	add	r3, r1
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002966:	3304      	adds	r3, #4
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	3208      	adds	r2, #8
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	3301      	adds	r3, #1
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
 8002982:	e7c3      	b.n	800290c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4413      	add	r3, r2
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002990:	3301      	adds	r3, #1
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	4413      	add	r3, r2
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	4313      	orrs	r3, r2
 800299e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	3302      	adds	r3, #2
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80029b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b4:	3303      	adds	r3, #3
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	061b      	lsls	r3, r3, #24
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80029c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c6:	3304      	adds	r3, #4
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d90a      	bls.n	80029ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699a      	ldr	r2, [r3, #24]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f008 fb08 	bl	800aff4 <realloc>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80029f0:	2300      	movs	r3, #0
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d236      	bcs.n	8002a6c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	440a      	add	r2, r1
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	3301      	adds	r3, #1
 8002a16:	6839      	ldr	r1, [r7, #0]
 8002a18:	440b      	add	r3, r1
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a26:	3302      	adds	r3, #2
 8002a28:	6839      	ldr	r1, [r7, #0]
 8002a2a:	440b      	add	r3, r1
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	3303      	adds	r3, #3
 8002a3a:	6839      	ldr	r1, [r7, #0]
 8002a3c:	440b      	add	r3, r1
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	3304      	adds	r3, #4
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	3214      	adds	r2, #20
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	3301      	adds	r3, #1
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6a:	e7c3      	b.n	80029f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a78:	3301      	adds	r3, #1
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9c:	3303      	adds	r3, #3
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aae:	3304      	adds	r3, #4
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d90a      	bls.n	8002ad2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f008 fa94 	bl	800aff4 <realloc>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d23f      	bcs.n	8002b66 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	441a      	add	r2, r3
 8002aec:	f107 030c 	add.w	r3, r7, #12
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 fa36 	bl	8003f64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afa:	3304      	adds	r3, #4
 8002afc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
 8002b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d20c      	bcs.n	8002b28 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	441a      	add	r2, r3
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	3b01      	subs	r3, #1
 8002b18:	6839      	ldr	r1, [r7, #0]
 8002b1a:	440b      	add	r3, r1
 8002b1c:	7812      	ldrb	r2, [r2, #0]
 8002b1e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	3301      	adds	r3, #1
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	e7ec      	b.n	8002b02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002b28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	4413      	add	r3, r2
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	441a      	add	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002b44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4413      	add	r3, r2
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	3220      	adds	r2, #32
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	3301      	adds	r3, #1
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b64:	e7ba      	b.n	8002adc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3738      	adds	r7, #56	; 0x38
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	0800b500 	.word	0x0800b500

08002b8c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	0800b3c0 	.word	0x0800b3c0

08002ba8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	611a      	str	r2, [r3, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68d8      	ldr	r0, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6891      	ldr	r1, [r2, #8]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	4798      	blx	r3
 8002bf4:	4603      	mov	r3, r0
  };
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
  }
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	6093      	str	r3, [r2, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c64:	461a      	mov	r2, r3
 8002c66:	2300      	movs	r3, #0
 8002c68:	60d3      	str	r3, [r2, #12]
    }
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	2000032c 	.word	0x2000032c

08002c7c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f804 	bl	8002c92 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f006 ffca 	bl	8009c40 <HAL_UART_Receive_DMA>
    }
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ffa4 	bl	8002c16 <_ZN13STM32Hardware10getRdmaIndEv>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	429c      	cmp	r4, r3
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d012      	beq.n	8002d04 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002ce4:	1c59      	adds	r1, r3, #1
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4413      	add	r3, r2
 8002cf0:	791b      	ldrb	r3, [r3, #4]
 8002cf2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002cfa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002d04:	68fb      	ldr	r3, [r7, #12]
    }
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd90      	pop	{r4, r7, pc}
	...

08002d10 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d108      	bne.n	8002d38 <_ZN13STM32Hardware5flushEv+0x28>
 8002d26:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <_ZN13STM32Hardware5flushEv+0xcc>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	f083 0301 	eor.w	r3, r3, #1
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <_ZN13STM32Hardware5flushEv+0x28>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <_ZN13STM32Hardware5flushEv+0x2a>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d049      	beq.n	8002dd2 <_ZN13STM32Hardware5flushEv+0xc2>
        mutex = true;
 8002d3e:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <_ZN13STM32Hardware5flushEv+0xcc>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d039      	beq.n	8002dcc <_ZN13STM32Hardware5flushEv+0xbc>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d20c      	bcs.n	8002d86 <_ZN13STM32Hardware5flushEv+0x76>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	e007      	b.n	8002d96 <_ZN13STM32Hardware5flushEv+0x86>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	89fa      	ldrh	r2, [r7, #14]
 8002dae:	4619      	mov	r1, r3
 8002db0:	f006 fec8 	bl	8009b44 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	89fb      	ldrh	r3, [r7, #14]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dca:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <_ZN13STM32Hardware5flushEv+0xcc>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
      }
    }
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000488 	.word	0x20000488

08002de0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
      int n = length;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df6:	bfa8      	it	ge
 8002df8:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002dfc:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf28      	it	cs
 8002e10:	4613      	movcs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f008 f8cd 	bl	800afc8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e44:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d00b      	beq.n	8002e66 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	18d1      	adds	r1, r2, r3
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	f008 f8b1 	bl	800afc8 <memcpy>
      }

      flush();
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff ff52 	bl	8002d10 <_ZN13STM32Hardware5flushEv>
    }
 8002e6c:	bf00      	nop
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	f003 fd30 	bl	80068e0 <HAL_GetTick>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff f850 	bl	8001f3c <_ZN3ros3MsgC1Ev>
 8002e9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ed8 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	0800b598 	.word	0x0800b598

08002edc <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002edc:	b480      	push	{r7}
 8002ede:	b08b      	sub	sp, #44	; 0x2c
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ef0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efa:	6838      	ldr	r0, [r7, #0]
 8002efc:	4401      	add	r1, r0
 8002efe:	b2d3      	uxtb	r3, r2
 8002f00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002f02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	0a02      	lsrs	r2, r0, #8
 8002f10:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f14:	0a0b      	lsrs	r3, r1, #8
 8002f16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f18:	3101      	adds	r1, #1
 8002f1a:	6838      	ldr	r0, [r7, #0]
 8002f1c:	4401      	add	r1, r0
 8002f1e:	b2d3      	uxtb	r3, r2
 8002f20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002f22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	0c02      	lsrs	r2, r0, #16
 8002f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f34:	0c0b      	lsrs	r3, r1, #16
 8002f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f38:	3102      	adds	r1, #2
 8002f3a:	6838      	ldr	r0, [r7, #0]
 8002f3c:	4401      	add	r1, r0
 8002f3e:	b2d3      	uxtb	r3, r2
 8002f40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002f42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	0e02      	lsrs	r2, r0, #24
 8002f50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f54:	0e0b      	lsrs	r3, r1, #24
 8002f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f58:	3103      	adds	r1, #3
 8002f5a:	6838      	ldr	r0, [r7, #0]
 8002f5c:	4401      	add	r1, r0
 8002f5e:	b2d3      	uxtb	r3, r2
 8002f60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002f62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	000a      	movs	r2, r1
 8002f70:	2300      	movs	r3, #0
 8002f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f74:	3104      	adds	r1, #4
 8002f76:	6838      	ldr	r0, [r7, #0]
 8002f78:	4401      	add	r1, r0
 8002f7a:	b2d3      	uxtb	r3, r2
 8002f7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002f7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	0a0a      	lsrs	r2, r1, #8
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f90:	3105      	adds	r1, #5
 8002f92:	6838      	ldr	r0, [r7, #0]
 8002f94:	4401      	add	r1, r0
 8002f96:	b2d3      	uxtb	r3, r2
 8002f98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002f9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	0c0a      	lsrs	r2, r1, #16
 8002fa8:	2300      	movs	r3, #0
 8002faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fac:	3106      	adds	r1, #6
 8002fae:	6838      	ldr	r0, [r7, #0]
 8002fb0:	4401      	add	r1, r0
 8002fb2:	b2d3      	uxtb	r3, r2
 8002fb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002fb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	0e0a      	lsrs	r2, r1, #24
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc8:	3107      	adds	r1, #7
 8002fca:	6838      	ldr	r0, [r7, #0]
 8002fcc:	4401      	add	r1, r0
 8002fce:	b2d3      	uxtb	r3, r2
 8002fd0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fde:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002fe2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fe8:	6838      	ldr	r0, [r7, #0]
 8002fea:	4401      	add	r1, r0
 8002fec:	b2d3      	uxtb	r3, r2
 8002fee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002ff0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	0a02      	lsrs	r2, r0, #8
 8002ffe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003002:	0a0b      	lsrs	r3, r1, #8
 8003004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003006:	3101      	adds	r1, #1
 8003008:	6838      	ldr	r0, [r7, #0]
 800300a:	4401      	add	r1, r0
 800300c:	b2d3      	uxtb	r3, r2
 800300e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003010:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	0c02      	lsrs	r2, r0, #16
 800301e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003022:	0c0b      	lsrs	r3, r1, #16
 8003024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003026:	3102      	adds	r1, #2
 8003028:	6838      	ldr	r0, [r7, #0]
 800302a:	4401      	add	r1, r0
 800302c:	b2d3      	uxtb	r3, r2
 800302e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003030:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	0e02      	lsrs	r2, r0, #24
 800303e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003042:	0e0b      	lsrs	r3, r1, #24
 8003044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003046:	3103      	adds	r1, #3
 8003048:	6838      	ldr	r0, [r7, #0]
 800304a:	4401      	add	r1, r0
 800304c:	b2d3      	uxtb	r3, r2
 800304e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003050:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	000a      	movs	r2, r1
 800305e:	2300      	movs	r3, #0
 8003060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003062:	3104      	adds	r1, #4
 8003064:	6838      	ldr	r0, [r7, #0]
 8003066:	4401      	add	r1, r0
 8003068:	b2d3      	uxtb	r3, r2
 800306a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800306c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	0a0a      	lsrs	r2, r1, #8
 800307a:	2300      	movs	r3, #0
 800307c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800307e:	3105      	adds	r1, #5
 8003080:	6838      	ldr	r0, [r7, #0]
 8003082:	4401      	add	r1, r0
 8003084:	b2d3      	uxtb	r3, r2
 8003086:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003088:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	0c0a      	lsrs	r2, r1, #16
 8003096:	2300      	movs	r3, #0
 8003098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800309a:	3106      	adds	r1, #6
 800309c:	6838      	ldr	r0, [r7, #0]
 800309e:	4401      	add	r1, r0
 80030a0:	b2d3      	uxtb	r3, r2
 80030a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80030a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	0e0a      	lsrs	r2, r1, #24
 80030b2:	2300      	movs	r3, #0
 80030b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030b6:	3107      	adds	r1, #7
 80030b8:	6838      	ldr	r0, [r7, #0]
 80030ba:	4401      	add	r1, r0
 80030bc:	b2d3      	uxtb	r3, r2
 80030be:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	3308      	adds	r3, #8
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80030cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80030d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d6:	6838      	ldr	r0, [r7, #0]
 80030d8:	4401      	add	r1, r0
 80030da:	b2d3      	uxtb	r3, r2
 80030dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80030de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	0a02      	lsrs	r2, r0, #8
 80030ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80030f0:	0a0b      	lsrs	r3, r1, #8
 80030f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030f4:	3101      	adds	r1, #1
 80030f6:	6838      	ldr	r0, [r7, #0]
 80030f8:	4401      	add	r1, r0
 80030fa:	b2d3      	uxtb	r3, r2
 80030fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80030fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	0c02      	lsrs	r2, r0, #16
 800310c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003110:	0c0b      	lsrs	r3, r1, #16
 8003112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003114:	3102      	adds	r1, #2
 8003116:	6838      	ldr	r0, [r7, #0]
 8003118:	4401      	add	r1, r0
 800311a:	b2d3      	uxtb	r3, r2
 800311c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800311e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	0e02      	lsrs	r2, r0, #24
 800312c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003130:	0e0b      	lsrs	r3, r1, #24
 8003132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003134:	3103      	adds	r1, #3
 8003136:	6838      	ldr	r0, [r7, #0]
 8003138:	4401      	add	r1, r0
 800313a:	b2d3      	uxtb	r3, r2
 800313c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800313e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	000a      	movs	r2, r1
 800314c:	2300      	movs	r3, #0
 800314e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003150:	3104      	adds	r1, #4
 8003152:	6838      	ldr	r0, [r7, #0]
 8003154:	4401      	add	r1, r0
 8003156:	b2d3      	uxtb	r3, r2
 8003158:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800315a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	0a0a      	lsrs	r2, r1, #8
 8003168:	2300      	movs	r3, #0
 800316a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800316c:	3105      	adds	r1, #5
 800316e:	6838      	ldr	r0, [r7, #0]
 8003170:	4401      	add	r1, r0
 8003172:	b2d3      	uxtb	r3, r2
 8003174:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	0c0a      	lsrs	r2, r1, #16
 8003184:	2300      	movs	r3, #0
 8003186:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003188:	3106      	adds	r1, #6
 800318a:	6838      	ldr	r0, [r7, #0]
 800318c:	4401      	add	r1, r0
 800318e:	b2d3      	uxtb	r3, r2
 8003190:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003192:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	0e0a      	lsrs	r2, r1, #24
 80031a0:	2300      	movs	r3, #0
 80031a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031a4:	3107      	adds	r1, #7
 80031a6:	6838      	ldr	r0, [r7, #0]
 80031a8:	4401      	add	r1, r0
 80031aa:	b2d3      	uxtb	r3, r2
 80031ac:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	3308      	adds	r3, #8
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80031b6:	4618      	mov	r0, r3
 80031b8:	372c      	adds	r7, #44	; 0x2c
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80031c2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80031c6:	b0eb      	sub	sp, #428	; 0x1ac
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80031ce:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80031e4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80031e8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80031ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031f0:	4413      	add	r3, r2
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2200      	movs	r2, #0
 80031f8:	461c      	mov	r4, r3
 80031fa:	4615      	mov	r5, r2
 80031fc:	ea40 0804 	orr.w	r8, r0, r4
 8003200:	ea41 0905 	orr.w	r9, r1, r5
 8003204:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003208:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800320c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003216:	4413      	add	r3, r2
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2200      	movs	r2, #0
 800321e:	469a      	mov	sl, r3
 8003220:	4693      	mov	fp, r2
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800322e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003232:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003236:	ea40 0402 	orr.w	r4, r0, r2
 800323a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800323e:	430b      	orrs	r3, r1
 8003240:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003244:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003248:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800324c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003250:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003254:	1c9a      	adds	r2, r3, #2
 8003256:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800325a:	4413      	add	r3, r2
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2200      	movs	r2, #0
 8003262:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003266:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003276:	464c      	mov	r4, r9
 8003278:	0423      	lsls	r3, r4, #16
 800327a:	4644      	mov	r4, r8
 800327c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003280:	4644      	mov	r4, r8
 8003282:	0422      	lsls	r2, r4, #16
 8003284:	ea40 0402 	orr.w	r4, r0, r2
 8003288:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800328c:	430b      	orrs	r3, r1
 800328e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003292:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003296:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800329a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800329e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032a2:	1cda      	adds	r2, r3, #3
 80032a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032a8:	4413      	add	r3, r2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80032b4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80032b8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80032bc:	4623      	mov	r3, r4
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80032c4:	4623      	mov	r3, r4
 80032c6:	061b      	lsls	r3, r3, #24
 80032c8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80032cc:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80032d0:	4623      	mov	r3, r4
 80032d2:	4303      	orrs	r3, r0
 80032d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80032d8:	462b      	mov	r3, r5
 80032da:	430b      	orrs	r3, r1
 80032dc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80032e0:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80032e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80032e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80032ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032f0:	1d1a      	adds	r2, r3, #4
 80032f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032f6:	4413      	add	r3, r2
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003302:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003312:	0023      	movs	r3, r4
 8003314:	2200      	movs	r2, #0
 8003316:	ea40 0402 	orr.w	r4, r0, r2
 800331a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800331e:	430b      	orrs	r3, r1
 8003320:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003324:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003328:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800332c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003330:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003334:	1d5a      	adds	r2, r3, #5
 8003336:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800333a:	4413      	add	r3, r2
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2200      	movs	r2, #0
 8003342:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003346:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003356:	0223      	lsls	r3, r4, #8
 8003358:	2200      	movs	r2, #0
 800335a:	ea40 0402 	orr.w	r4, r0, r2
 800335e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003362:	430b      	orrs	r3, r1
 8003364:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003368:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800336c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003370:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003374:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003378:	1d9a      	adds	r2, r3, #6
 800337a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800337e:	4413      	add	r3, r2
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2200      	movs	r2, #0
 8003386:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800338a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800339a:	0423      	lsls	r3, r4, #16
 800339c:	2200      	movs	r2, #0
 800339e:	ea40 0402 	orr.w	r4, r0, r2
 80033a2:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80033a6:	430b      	orrs	r3, r1
 80033a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80033ac:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80033b0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80033b4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80033b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033bc:	1dda      	adds	r2, r3, #7
 80033be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033c2:	4413      	add	r3, r2
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80033ce:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80033de:	0623      	lsls	r3, r4, #24
 80033e0:	2200      	movs	r2, #0
 80033e2:	ea40 0402 	orr.w	r4, r0, r2
 80033e6:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80033ea:	430b      	orrs	r3, r1
 80033ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80033f0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80033f4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80033f8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80033fc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003400:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003404:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003408:	3308      	adds	r3, #8
 800340a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800341a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800341e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003422:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003426:	4413      	add	r3, r2
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2200      	movs	r2, #0
 800342e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003432:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003436:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800343a:	4623      	mov	r3, r4
 800343c:	4303      	orrs	r3, r0
 800343e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003442:	462b      	mov	r3, r5
 8003444:	430b      	orrs	r3, r1
 8003446:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800344a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800344e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003452:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003456:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003460:	4413      	add	r3, r2
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2200      	movs	r2, #0
 8003468:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800346c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800347c:	464c      	mov	r4, r9
 800347e:	0223      	lsls	r3, r4, #8
 8003480:	4644      	mov	r4, r8
 8003482:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003486:	4644      	mov	r4, r8
 8003488:	0222      	lsls	r2, r4, #8
 800348a:	ea40 0402 	orr.w	r4, r0, r2
 800348e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003492:	430b      	orrs	r3, r1
 8003494:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003498:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800349c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034a0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80034a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034a8:	1c9a      	adds	r2, r3, #2
 80034aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034ae:	4413      	add	r3, r2
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2200      	movs	r2, #0
 80034b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80034ca:	464c      	mov	r4, r9
 80034cc:	0423      	lsls	r3, r4, #16
 80034ce:	4644      	mov	r4, r8
 80034d0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80034d4:	4644      	mov	r4, r8
 80034d6:	0422      	lsls	r2, r4, #16
 80034d8:	ea40 0402 	orr.w	r4, r0, r2
 80034dc:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80034e0:	430b      	orrs	r3, r1
 80034e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034e6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80034ea:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034ee:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80034f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034f6:	1cda      	adds	r2, r3, #3
 80034f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034fc:	4413      	add	r3, r2
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2200      	movs	r2, #0
 8003504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003508:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800350c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003510:	4623      	mov	r3, r4
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003518:	4623      	mov	r3, r4
 800351a:	061b      	lsls	r3, r3, #24
 800351c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003520:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003524:	4623      	mov	r3, r4
 8003526:	4303      	orrs	r3, r0
 8003528:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800352c:	462b      	mov	r3, r5
 800352e:	430b      	orrs	r3, r1
 8003530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003534:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003538:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800353c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003540:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003544:	1d1a      	adds	r2, r3, #4
 8003546:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800354a:	4413      	add	r3, r2
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2200      	movs	r2, #0
 8003552:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003556:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003566:	0023      	movs	r3, r4
 8003568:	2200      	movs	r2, #0
 800356a:	ea40 0402 	orr.w	r4, r0, r2
 800356e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003572:	430b      	orrs	r3, r1
 8003574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003578:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800357c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003580:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003584:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003588:	1d5a      	adds	r2, r3, #5
 800358a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800358e:	4413      	add	r3, r2
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2200      	movs	r2, #0
 8003596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800359a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80035aa:	0223      	lsls	r3, r4, #8
 80035ac:	2200      	movs	r2, #0
 80035ae:	ea40 0402 	orr.w	r4, r0, r2
 80035b2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80035b6:	430b      	orrs	r3, r1
 80035b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035bc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80035c0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80035c4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80035c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035cc:	1d9a      	adds	r2, r3, #6
 80035ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035d2:	4413      	add	r3, r2
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2200      	movs	r2, #0
 80035da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80035ee:	0423      	lsls	r3, r4, #16
 80035f0:	2200      	movs	r2, #0
 80035f2:	ea40 0402 	orr.w	r4, r0, r2
 80035f6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80035fa:	430b      	orrs	r3, r1
 80035fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003600:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003604:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003608:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800360c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003610:	1dda      	adds	r2, r3, #7
 8003612:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2200      	movs	r2, #0
 800361e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003632:	0623      	lsls	r3, r4, #24
 8003634:	2200      	movs	r2, #0
 8003636:	ea40 0402 	orr.w	r4, r0, r2
 800363a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800363e:	430b      	orrs	r3, r1
 8003640:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003644:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003648:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 800364c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003650:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003654:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003658:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800365c:	3308      	adds	r3, #8
 800365e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800366e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003672:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003676:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800367a:	4413      	add	r3, r2
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2200      	movs	r2, #0
 8003682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003686:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800368a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800368e:	4623      	mov	r3, r4
 8003690:	4303      	orrs	r3, r0
 8003692:	67bb      	str	r3, [r7, #120]	; 0x78
 8003694:	462b      	mov	r3, r5
 8003696:	430b      	orrs	r3, r1
 8003698:	67fb      	str	r3, [r7, #124]	; 0x7c
 800369a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800369e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036a2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80036a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036b0:	4413      	add	r3, r2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2200      	movs	r2, #0
 80036b8:	673b      	str	r3, [r7, #112]	; 0x70
 80036ba:	677a      	str	r2, [r7, #116]	; 0x74
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036c8:	464c      	mov	r4, r9
 80036ca:	0223      	lsls	r3, r4, #8
 80036cc:	4644      	mov	r4, r8
 80036ce:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036d2:	4644      	mov	r4, r8
 80036d4:	0222      	lsls	r2, r4, #8
 80036d6:	ea40 0402 	orr.w	r4, r0, r2
 80036da:	66bc      	str	r4, [r7, #104]	; 0x68
 80036dc:	430b      	orrs	r3, r1
 80036de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036e0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80036e4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036e8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80036ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036f0:	1c9a      	adds	r2, r3, #2
 80036f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036f6:	4413      	add	r3, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2200      	movs	r2, #0
 80036fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003700:	667a      	str	r2, [r7, #100]	; 0x64
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800370e:	464c      	mov	r4, r9
 8003710:	0423      	lsls	r3, r4, #16
 8003712:	4644      	mov	r4, r8
 8003714:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003718:	4644      	mov	r4, r8
 800371a:	0422      	lsls	r2, r4, #16
 800371c:	ea40 0402 	orr.w	r4, r0, r2
 8003720:	65bc      	str	r4, [r7, #88]	; 0x58
 8003722:	430b      	orrs	r3, r1
 8003724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003726:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800372a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800372e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003732:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003736:	1cda      	adds	r2, r3, #3
 8003738:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800373c:	4413      	add	r3, r2
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2200      	movs	r2, #0
 8003744:	653b      	str	r3, [r7, #80]	; 0x50
 8003746:	657a      	str	r2, [r7, #84]	; 0x54
 8003748:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800374c:	4623      	mov	r3, r4
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003752:	4623      	mov	r3, r4
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	64bb      	str	r3, [r7, #72]	; 0x48
 8003758:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800375c:	4623      	mov	r3, r4
 800375e:	4303      	orrs	r3, r0
 8003760:	643b      	str	r3, [r7, #64]	; 0x40
 8003762:	462b      	mov	r3, r5
 8003764:	430b      	orrs	r3, r1
 8003766:	647b      	str	r3, [r7, #68]	; 0x44
 8003768:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800376c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003770:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003774:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003778:	1d1a      	adds	r2, r3, #4
 800377a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800377e:	4413      	add	r3, r2
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2200      	movs	r2, #0
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
 8003788:	63fa      	str	r2, [r7, #60]	; 0x3c
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003794:	0023      	movs	r3, r4
 8003796:	2200      	movs	r2, #0
 8003798:	ea40 0402 	orr.w	r4, r0, r2
 800379c:	633c      	str	r4, [r7, #48]	; 0x30
 800379e:	430b      	orrs	r3, r1
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
 80037a2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80037a6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80037aa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80037ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037b2:	1d5a      	adds	r2, r3, #5
 80037b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037b8:	4413      	add	r3, r2
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2200      	movs	r2, #0
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80037ce:	0223      	lsls	r3, r4, #8
 80037d0:	2200      	movs	r2, #0
 80037d2:	ea40 0402 	orr.w	r4, r0, r2
 80037d6:	623c      	str	r4, [r7, #32]
 80037d8:	430b      	orrs	r3, r1
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
 80037dc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80037e0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80037e4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80037e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037ec:	3306      	adds	r3, #6
 80037ee:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80037f2:	4413      	add	r3, r2
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2200      	movs	r2, #0
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	61fa      	str	r2, [r7, #28]
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	69bc      	ldr	r4, [r7, #24]
 8003808:	0423      	lsls	r3, r4, #16
 800380a:	2200      	movs	r2, #0
 800380c:	ea40 0402 	orr.w	r4, r0, r2
 8003810:	613c      	str	r4, [r7, #16]
 8003812:	430b      	orrs	r3, r1
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800381a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800381e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003822:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003826:	3307      	adds	r3, #7
 8003828:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800382c:	4413      	add	r3, r2
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2200      	movs	r2, #0
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	60fa      	str	r2, [r7, #12]
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	68bc      	ldr	r4, [r7, #8]
 8003842:	0623      	lsls	r3, r4, #24
 8003844:	2200      	movs	r2, #0
 8003846:	ea40 0402 	orr.w	r4, r0, r2
 800384a:	603c      	str	r4, [r7, #0]
 800384c:	430b      	orrs	r3, r1
 800384e:	607b      	str	r3, [r7, #4]
 8003850:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003854:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003858:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800385c:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003860:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003864:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003868:	3308      	adds	r3, #8
 800386a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800386e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003872:	4618      	mov	r0, r3
 8003874:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800387e:	4770      	bx	lr

08003880 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	0800b3e4 	.word	0x0800b3e4

0800389c <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	0800b3f8 	.word	0x0800b3f8

080038b8 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
      data(0)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe fb3a 	bl	8001f3c <_ZN3ros3MsgC1Ev>
 80038c8:	4a05      	ldr	r2, [pc, #20]	; (80038e0 <_ZN8std_msgs4Int8C1Ev+0x28>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	711a      	strb	r2, [r3, #4]
    {
    }
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	0800b580 	.word	0x0800b580

080038e4 <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80038f8:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	4413      	add	r3, r2
 8003900:	7a3a      	ldrb	r2, [r7, #8]
 8003902:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3301      	adds	r3, #1
 8003908:	60fb      	str	r3, [r7, #12]
      return offset;
 800390a:	68fb      	ldr	r3, [r7, #12]
    }
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800392a:	7a3a      	ldrb	r2, [r7, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	440b      	add	r3, r1
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	4313      	orrs	r3, r2
 8003936:	b2db      	uxtb	r3, r3
 8003938:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 800393a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3301      	adds	r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
     return offset;
 8003948:	68fb      	ldr	r3, [r7, #12]
    }
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
	...

08003958 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	0800b41c 	.word	0x0800b41c

08003974 <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	0800b42c 	.word	0x0800b42c

08003990 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
      data(0)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe face 	bl	8001f3c <_ZN3ros3MsgC1Ev>
 80039a0:	4a07      	ldr	r2, [pc, #28]	; (80039c0 <_ZN8std_msgs5Int64C1Ev+0x30>)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	0800b568 	.word	0x0800b568

080039c4 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80039d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80039dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039e0:	6979      	ldr	r1, [r7, #20]
 80039e2:	6838      	ldr	r0, [r7, #0]
 80039e4:	4401      	add	r1, r0
 80039e6:	b2d3      	uxtb	r3, r2
 80039e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80039ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	0a02      	lsrs	r2, r0, #8
 80039f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80039fc:	0a0b      	lsrs	r3, r1, #8
 80039fe:	6979      	ldr	r1, [r7, #20]
 8003a00:	3101      	adds	r1, #1
 8003a02:	6838      	ldr	r0, [r7, #0]
 8003a04:	4401      	add	r1, r0
 8003a06:	b2d3      	uxtb	r3, r2
 8003a08:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003a0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	0c02      	lsrs	r2, r0, #16
 8003a18:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a1c:	0c0b      	lsrs	r3, r1, #16
 8003a1e:	6979      	ldr	r1, [r7, #20]
 8003a20:	3102      	adds	r1, #2
 8003a22:	6838      	ldr	r0, [r7, #0]
 8003a24:	4401      	add	r1, r0
 8003a26:	b2d3      	uxtb	r3, r2
 8003a28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003a2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	0e02      	lsrs	r2, r0, #24
 8003a38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a3c:	0e0b      	lsrs	r3, r1, #24
 8003a3e:	6979      	ldr	r1, [r7, #20]
 8003a40:	3103      	adds	r1, #3
 8003a42:	6838      	ldr	r0, [r7, #0]
 8003a44:	4401      	add	r1, r0
 8003a46:	b2d3      	uxtb	r3, r2
 8003a48:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8003a4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	000a      	movs	r2, r1
 8003a58:	2300      	movs	r3, #0
 8003a5a:	6979      	ldr	r1, [r7, #20]
 8003a5c:	3104      	adds	r1, #4
 8003a5e:	6838      	ldr	r0, [r7, #0]
 8003a60:	4401      	add	r1, r0
 8003a62:	b2d3      	uxtb	r3, r2
 8003a64:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8003a66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	0a0a      	lsrs	r2, r1, #8
 8003a74:	2300      	movs	r3, #0
 8003a76:	6979      	ldr	r1, [r7, #20]
 8003a78:	3105      	adds	r1, #5
 8003a7a:	6838      	ldr	r0, [r7, #0]
 8003a7c:	4401      	add	r1, r0
 8003a7e:	b2d3      	uxtb	r3, r2
 8003a80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8003a82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	0c0a      	lsrs	r2, r1, #16
 8003a90:	2300      	movs	r3, #0
 8003a92:	6979      	ldr	r1, [r7, #20]
 8003a94:	3106      	adds	r1, #6
 8003a96:	6838      	ldr	r0, [r7, #0]
 8003a98:	4401      	add	r1, r0
 8003a9a:	b2d3      	uxtb	r3, r2
 8003a9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8003a9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	0e0a      	lsrs	r2, r1, #24
 8003aac:	2300      	movs	r3, #0
 8003aae:	6979      	ldr	r1, [r7, #20]
 8003ab0:	3107      	adds	r1, #7
 8003ab2:	6838      	ldr	r0, [r7, #0]
 8003ab4:	4401      	add	r1, r0
 8003ab6:	b2d3      	uxtb	r3, r2
 8003ab8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	3308      	adds	r3, #8
 8003abe:	617b      	str	r3, [r7, #20]
      return offset;
 8003ac0:	697b      	ldr	r3, [r7, #20]
    }
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003ace:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003ad2:	b0a3      	sub	sp, #140	; 0x8c
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6778      	str	r0, [r7, #116]	; 0x74
 8003ad8:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003aec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003af0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003af4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003af6:	4413      	add	r3, r2
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2200      	movs	r2, #0
 8003afe:	461c      	mov	r4, r3
 8003b00:	4615      	mov	r5, r2
 8003b02:	ea40 0804 	orr.w	r8, r0, r4
 8003b06:	ea41 0905 	orr.w	r9, r1, r5
 8003b0a:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b0e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b1a:	4413      	add	r3, r2
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2200      	movs	r2, #0
 8003b22:	469a      	mov	sl, r3
 8003b24:	4693      	mov	fp, r2
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003b32:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003b36:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003b3a:	ea40 0402 	orr.w	r4, r0, r2
 8003b3e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003b40:	430b      	orrs	r3, r1
 8003b42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b44:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003b48:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b4c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b54:	1c9a      	adds	r2, r3, #2
 8003b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b58:	4413      	add	r3, r2
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2200      	movs	r2, #0
 8003b60:	663b      	str	r3, [r7, #96]	; 0x60
 8003b62:	667a      	str	r2, [r7, #100]	; 0x64
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b70:	464c      	mov	r4, r9
 8003b72:	0423      	lsls	r3, r4, #16
 8003b74:	4644      	mov	r4, r8
 8003b76:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003b7a:	4644      	mov	r4, r8
 8003b7c:	0422      	lsls	r2, r4, #16
 8003b7e:	ea40 0402 	orr.w	r4, r0, r2
 8003b82:	65bc      	str	r4, [r7, #88]	; 0x58
 8003b84:	430b      	orrs	r3, r1
 8003b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b88:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003b8c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b90:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b98:	1cda      	adds	r2, r3, #3
 8003b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b9c:	4413      	add	r3, r2
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ba6:	657a      	str	r2, [r7, #84]	; 0x54
 8003ba8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003bac:	4623      	mov	r3, r4
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bb8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	4303      	orrs	r3, r0
 8003bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003bc2:	462b      	mov	r3, r5
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003bcc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003bd0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bd8:	1d1a      	adds	r2, r3, #4
 8003bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bdc:	4413      	add	r3, r2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2200      	movs	r2, #0
 8003be4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003be6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003bf2:	0023      	movs	r3, r4
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	ea40 0402 	orr.w	r4, r0, r2
 8003bfa:	633c      	str	r4, [r7, #48]	; 0x30
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003c00:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003c04:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c10:	1d5a      	adds	r2, r3, #5
 8003c12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c14:	4413      	add	r3, r2
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003c2a:	0223      	lsls	r3, r4, #8
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	ea40 0402 	orr.w	r4, r0, r2
 8003c32:	623c      	str	r4, [r7, #32]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
 8003c38:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003c3c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c40:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c48:	3306      	adds	r3, #6
 8003c4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c4c:	4413      	add	r3, r2
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2200      	movs	r2, #0
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	61fa      	str	r2, [r7, #28]
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	69bc      	ldr	r4, [r7, #24]
 8003c62:	0423      	lsls	r3, r4, #16
 8003c64:	2200      	movs	r2, #0
 8003c66:	ea40 0402 	orr.w	r4, r0, r2
 8003c6a:	613c      	str	r4, [r7, #16]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c74:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c78:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c80:	3307      	adds	r3, #7
 8003c82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c84:	4413      	add	r3, r2
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	60fa      	str	r2, [r7, #12]
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	68bc      	ldr	r4, [r7, #8]
 8003c9a:	0623      	lsls	r3, r4, #24
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	ea40 0402 	orr.w	r4, r0, r2
 8003ca2:	603c      	str	r4, [r7, #0]
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003cac:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003cb0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003cb4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003cb6:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003cc8:	4618      	mov	r0, r3
 8003cca:	378c      	adds	r7, #140	; 0x8c
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003cd2:	4770      	bx	lr

08003cd4 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	0800b450 	.word	0x0800b450

08003cf0 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	0800b460 	.word	0x0800b460

08003d0c <_Z14angle_callbackRKN13geometry_msgs5PointE>:
int flag;
std_msgs::Int8 laji,pitches;
std_msgs::Int64 button_reset;

void angle_callback(const geometry_msgs::Point &msg)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	ros_hz = msg.x;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d1a:	490a      	ldr	r1, [pc, #40]	; (8003d44 <_Z14angle_callbackRKN13geometry_msgs5PointE+0x38>)
 8003d1c:	e9c1 2300 	strd	r2, r3, [r1]
	ros_ev = msg.y;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d26:	4908      	ldr	r1, [pc, #32]	; (8003d48 <_Z14angle_callbackRKN13geometry_msgs5PointE+0x3c>)
 8003d28:	e9c1 2300 	strd	r2, r3, [r1]
	ros_st = msg.z;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d32:	4906      	ldr	r1, [pc, #24]	; (8003d4c <_Z14angle_callbackRKN13geometry_msgs5PointE+0x40>)
 8003d34:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	20001b58 	.word	0x20001b58
 8003d48:	20001b60 	.word	0x20001b60
 8003d4c:	20001b50 	.word	0x20001b50

08003d50 <_Z13laji_callbackRKN8std_msgs4Int8E>:
void laji_callback(const std_msgs::Int8 &msg){
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	laji_cmd = msg.data;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <_Z13laji_callbackRKN8std_msgs4Int8E+0x20>)
 8003d62:	601a      	str	r2, [r3, #0]
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	20000128 	.word	0x20000128

08003d74 <_Z12ori_callbackRKN8std_msgs4Int8E>:

void ori_callback(const std_msgs::Int8 &msg){
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	flag = msg.data;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <_Z12ori_callbackRKN8std_msgs4Int8E+0x20>)
 8003d86:	601a      	str	r2, [r3, #0]
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	2000048c 	.word	0x2000048c

08003d98 <_Z9ros_setupv>:
ros::Subscriber<std_msgs::Int8> sub_laji("cmd_laji", laji_callback);
ros::Publisher pub_laji("laji_ok", &laji);
ros::Publisher pub_reset("reset", &button_reset);

void ros_setup(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
    nh.initNode();
 8003d9c:	480e      	ldr	r0, [pc, #56]	; (8003dd8 <_Z9ros_setupv+0x40>)
 8003d9e:	f000 fa09 	bl	80041b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub_angle);
 8003da2:	490e      	ldr	r1, [pc, #56]	; (8003ddc <_Z9ros_setupv+0x44>)
 8003da4:	480c      	ldr	r0, [pc, #48]	; (8003dd8 <_Z9ros_setupv+0x40>)
 8003da6:	f000 fa2e 	bl	8004206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.subscribe(sub_ori);
 8003daa:	490d      	ldr	r1, [pc, #52]	; (8003de0 <_Z9ros_setupv+0x48>)
 8003dac:	480a      	ldr	r0, [pc, #40]	; (8003dd8 <_Z9ros_setupv+0x40>)
 8003dae:	f000 fa55 	bl	800425c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(sub_laji);
 8003db2:	490c      	ldr	r1, [pc, #48]	; (8003de4 <_Z9ros_setupv+0x4c>)
 8003db4:	4808      	ldr	r0, [pc, #32]	; (8003dd8 <_Z9ros_setupv+0x40>)
 8003db6:	f000 fa51 	bl	800425c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.advertise(pub_laji);
 8003dba:	490b      	ldr	r1, [pc, #44]	; (8003de8 <_Z9ros_setupv+0x50>)
 8003dbc:	4806      	ldr	r0, [pc, #24]	; (8003dd8 <_Z9ros_setupv+0x40>)
 8003dbe:	f000 fa78 	bl	80042b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_reset);
 8003dc2:	490a      	ldr	r1, [pc, #40]	; (8003dec <_Z9ros_setupv+0x54>)
 8003dc4:	4804      	ldr	r0, [pc, #16]	; (8003dd8 <_Z9ros_setupv+0x40>)
 8003dc6:	f000 fa74 	bl	80042b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_pitches);
 8003dca:	4909      	ldr	r1, [pc, #36]	; (8003df0 <_Z9ros_setupv+0x58>)
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <_Z9ros_setupv+0x40>)
 8003dce:	f000 fa70 	bl	80042b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200004b0 	.word	0x200004b0
 8003ddc:	200019f0 	.word	0x200019f0
 8003de0:	20001a3c 	.word	0x20001a3c
 8003de4:	20001a58 	.word	0x20001a58
 8003de8:	20001a74 	.word	0x20001a74
 8003dec:	20001a88 	.word	0x20001a88
 8003df0:	20001a28 	.word	0x20001a28

08003df4 <_Z8ros_loopv>:
void ros_loop(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003df8:	4802      	ldr	r0, [pc, #8]	; (8003e04 <_Z8ros_loopv+0x10>)
 8003dfa:	f000 fa8a 	bl	8004312 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200004b0 	.word	0x200004b0

08003e08 <_Z3pubv>:
void pub(){
 8003e08:	b5b0      	push	{r4, r5, r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
	laji.data = laji_ok;
 8003e0c:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <_Z3pubv+0x48>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	b25a      	sxtb	r2, r3
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <_Z3pubv+0x4c>)
 8003e14:	711a      	strb	r2, [r3, #4]
	button_reset.data = reset_condition();
 8003e16:	f7fd ffc5 	bl	8001da4 <_Z15reset_conditionv>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	17da      	asrs	r2, r3, #31
 8003e1e:	461c      	mov	r4, r3
 8003e20:	4615      	mov	r5, r2
 8003e22:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <_Z3pubv+0x50>)
 8003e24:	e9c3 4502 	strd	r4, r5, [r3, #8]
	pitches.data = return_value;
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <_Z3pubv+0x54>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	b25a      	sxtb	r2, r3
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <_Z3pubv+0x58>)
 8003e30:	711a      	strb	r2, [r3, #4]
	pub_laji.publish(&laji);
 8003e32:	4908      	ldr	r1, [pc, #32]	; (8003e54 <_Z3pubv+0x4c>)
 8003e34:	480b      	ldr	r0, [pc, #44]	; (8003e64 <_Z3pubv+0x5c>)
 8003e36:	f7fe fece 	bl	8002bd6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	pub_reset.publish(&button_reset);
 8003e3a:	4907      	ldr	r1, [pc, #28]	; (8003e58 <_Z3pubv+0x50>)
 8003e3c:	480a      	ldr	r0, [pc, #40]	; (8003e68 <_Z3pubv+0x60>)
 8003e3e:	f7fe feca 	bl	8002bd6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	pub_pitches.publish(&pitches);
 8003e42:	4907      	ldr	r1, [pc, #28]	; (8003e60 <_Z3pubv+0x58>)
 8003e44:	4809      	ldr	r0, [pc, #36]	; (8003e6c <_Z3pubv+0x64>)
 8003e46:	f7fe fec6 	bl	8002bd6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003e4a:	bf00      	nop
 8003e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000004 	.word	0x20000004
 8003e54:	20000490 	.word	0x20000490
 8003e58:	200004a0 	.word	0x200004a0
 8003e5c:	20001abc 	.word	0x20001abc
 8003e60:	20000498 	.word	0x20000498
 8003e64:	20001a74 	.word	0x20001a74
 8003e68:	20001a88 	.word	0x20001a88
 8003e6c:	20001a28 	.word	0x20001a28

08003e70 <_ZL19MX_USART2_UART_Initv>:
//  }
//  /* USER CODE END Error_Handler_Debug */
//}

static void MX_USART2_UART_Init(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003e76:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8003e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8003e7a:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003e7c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003e96:	220c      	movs	r2, #12
 8003e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ea6:	4807      	ldr	r0, [pc, #28]	; (8003ec4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003ea8:	f005 fd3e 	bl	8009928 <HAL_UART_Init>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8003ebc:	f7fd ff16 	bl	8001cec <Error_Handler>

  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ec0:	bf00      	nop
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	2000032c 	.word	0x2000032c
 8003ec8:	40004400 	.word	0x40004400

08003ecc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
    if(huart == &huart2){
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a09      	ldr	r2, [pc, #36]	; (8003efc <HAL_UART_ErrorCallback+0x30>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d10b      	bne.n	8003ef4 <HAL_UART_ErrorCallback+0x28>
    // set velocity 0 before uart reinitialization


  HAL_UART_DeInit(&huart2);
 8003edc:	4807      	ldr	r0, [pc, #28]	; (8003efc <HAL_UART_ErrorCallback+0x30>)
 8003ede:	f005 fd70 	bl	80099c2 <HAL_UART_DeInit>
  MX_USART2_UART_Init();
 8003ee2:	f7ff ffc5 	bl	8003e70 <_ZL19MX_USART2_UART_Initv>
  nh.getHardware()->init();
 8003ee6:	4806      	ldr	r0, [pc, #24]	; (8003f00 <HAL_UART_ErrorCallback+0x34>)
 8003ee8:	f000 fc8b 	bl	8004802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fec4 	bl	8002c7c <_ZN13STM32Hardware4initEv>
    }
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	2000032c 	.word	0x2000032c
 8003f00:	200004b0 	.word	0x200004b0

08003f04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003f0c:	4805      	ldr	r0, [pc, #20]	; (8003f24 <HAL_UART_TxCpltCallback+0x20>)
 8003f0e:	f000 fc78 	bl	8004802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003f12:	4603      	mov	r3, r0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe fefb 	bl	8002d10 <_ZN13STM32Hardware5flushEv>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	200004b0 	.word	0x200004b0

08003f28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d80d      	bhi.n	8003f58 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	fa22 f103 	lsr.w	r1, r2, r3
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	b2ca      	uxtb	r2, r1
 8003f4e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3301      	adds	r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	e7ee      	b.n	8003f36 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d811      	bhi.n	8003fa2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6839      	ldr	r1, [r7, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	440a      	add	r2, r1
 8003f88:	7812      	ldrb	r2, [r2, #0]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	00d2      	lsls	r2, r2, #3
 8003f90:	fa01 f202 	lsl.w	r2, r1, r2
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e7ea      	b.n	8003f78 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	0800b5c8 	.word	0x0800b5c8

08003fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff ffe8 	bl	8003fb0 <_ZN3ros15NodeHandleBase_C1Ev>
 8003fe0:	4a47      	ldr	r2, [pc, #284]	; (8004100 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fe26 	bl	8002c3c <_ZN13STM32HardwareC1Ev>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8004002:	3314      	adds	r3, #20
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe fb0d 	bl	8002624 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b18      	cmp	r3, #24
 8004012:	d80b      	bhi.n	800402c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	3301      	adds	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	e7f0      	b.n	800400e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b18      	cmp	r3, #24
 8004034:	d80a      	bhi.n	800404c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800403e:	2100      	movs	r1, #0
 8004040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	3301      	adds	r3, #1
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	e7f1      	b.n	8004030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004056:	d20b      	bcs.n	8004070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4413      	add	r3, r2
 800405e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004062:	3304      	adds	r3, #4
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3301      	adds	r3, #1
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e7ef      	b.n	8004050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004070:	2300      	movs	r3, #0
 8004072:	60bb      	str	r3, [r7, #8]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407a:	d20b      	bcs.n	8004094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4413      	add	r3, r2
 8004082:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004086:	3304      	adds	r3, #4
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3301      	adds	r3, #1
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	e7ef      	b.n	8004074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409a:	461a      	mov	r2, r3
 800409c:	2300      	movs	r3, #0
 800409e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a8:	461a      	mov	r2, r3
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b6:	461a      	mov	r2, r3
 80040b8:	2300      	movs	r3, #0
 80040ba:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c4:	461a      	mov	r2, r3
 80040c6:	2300      	movs	r3, #0
 80040c8:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d2:	461a      	mov	r2, r3
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e0:	461a      	mov	r2, r3
 80040e2:	2300      	movs	r3, #0
 80040e4:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ee:	461a      	mov	r2, r3
 80040f0:	2300      	movs	r3, #0
 80040f2:	6213      	str	r3, [r2, #32]
  }
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	0800b554 	.word	0x0800b554

08004104 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	0800b5b0 	.word	0x0800b5b0

08004124 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ffe5 	bl	8004104 <_ZN3ros11Subscriber_C1Ev>
 800413a:	4a0b      	ldr	r2, [pc, #44]	; (8004168 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3310      	adds	r3, #16
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe fea1 	bl	8002e8c <_ZN13geometry_msgs5PointC1Ev>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	609a      	str	r2, [r3, #8]
  };
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	0800b53c 	.word	0x0800b53c

0800416c <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff ffc1 	bl	8004104 <_ZN3ros11Subscriber_C1Ev>
 8004182:	4a0b      	ldr	r2, [pc, #44]	; (80041b0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	330c      	adds	r3, #12
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fb93 	bl	80038b8 <_ZN8std_msgs4Int8C1Ev>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	615a      	str	r2, [r3, #20]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	609a      	str	r2, [r3, #8]
  };
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	0800b524 	.word	0x0800b524

080041b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3304      	adds	r3, #4
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe fd5b 	bl	8002c7c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041cc:	461a      	mov	r2, r3
 80041ce:	2300      	movs	r3, #0
 80041d0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041da:	461a      	mov	r2, r3
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e8:	461a      	mov	r2, r3
 80041ea:	2300      	movs	r3, #0
 80041ec:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f6:	461a      	mov	r2, r3
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b18      	cmp	r3, #24
 8004218:	dc19      	bgt.n	800424e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10d      	bne.n	8004246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800422a:	6839      	ldr	r1, [r7, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	605a      	str	r2, [r3, #4]
        return true;
 8004242:	2301      	movs	r3, #1
 8004244:	e004      	b.n	8004250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3301      	adds	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e7e2      	b.n	8004214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 800424e:	2300      	movs	r3, #0
  }
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b18      	cmp	r3, #24
 800426e:	dc19      	bgt.n	80042a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10d      	bne.n	800429c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800428a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	605a      	str	r2, [r3, #4]
        return true;
 8004298:	2301      	movs	r3, #1
 800429a:	e004      	b.n	80042a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3301      	adds	r3, #1
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	e7e2      	b.n	800426a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0xe>
    return false;
 80042a4:	2300      	movs	r3, #0
  }
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80042b2:	b480      	push	{r7}
 80042b4:	b085      	sub	sp, #20
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b18      	cmp	r3, #24
 80042c4:	dc1e      	bgt.n	8004304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d111      	bne.n	80042fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	60da      	str	r2, [r3, #12]
        return true;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e004      	b.n	8004306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3301      	adds	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	e7dd      	b.n	80042c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8004304:	2300      	movs	r3, #0
  }
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
	  uint32_t c_time = hardware_.time();
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3304      	adds	r3, #4
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fda8 	bl	8002e74 <_ZN13STM32Hardware4timeEv>
 8004324:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004338:	4293      	cmp	r3, r2
 800433a:	d905      	bls.n	8004348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00e      	beq.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435c:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	429a      	cmp	r2, r3
 8004364:	d906      	bls.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436c:	461a      	mov	r2, r3
 800436e:	2300      	movs	r3, #0
 8004370:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d015      	beq.n	80043ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe fd75 	bl	8002e74 <_ZN13STM32Hardware4timeEv>
 800438a:	4602      	mov	r2, r0
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1ad2      	subs	r2, r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	429a      	cmp	r2, r3
 800439a:	bf8c      	ite	hi
 800439c:	2301      	movhi	r3, #1
 800439e:	2300      	movls	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80043a6:	f06f 0301 	mvn.w	r3, #1
 80043aa:	e226      	b.n	80047fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fe fc7f 	bl	8002cb4 <_ZN13STM32Hardware4readEv>
 80043b6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f2c0 81ff 	blt.w	80047be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c6:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4413      	add	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043d4:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043de:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80043e2:	2b07      	cmp	r3, #7
 80043e4:	d12d      	bne.n	8004442 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ec:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80043f8:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	b2d1      	uxtb	r1, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004408:	3304      	adds	r3, #4
 800440a:	460a      	mov	r2, r1
 800440c:	701a      	strb	r2, [r3, #0]
        bytes_--;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004414:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004418:	3b01      	subs	r3, #1
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004420:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1a0      	bne.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004438:	461a      	mov	r2, r3
 800443a:	2308      	movs	r3, #8
 800443c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004440:	e798      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004448:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800444c:	2b00      	cmp	r3, #0
 800444e:	d130      	bne.n	80044b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2bff      	cmp	r3, #255	; 0xff
 8004454:	d112      	bne.n	800447c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800445c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004460:	3301      	adds	r3, #1
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004468:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3314      	adds	r3, #20
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004476:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 800447a:	e77b      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe fcf7 	bl	8002e74 <_ZN13STM32Hardware4timeEv>
 8004486:	4602      	mov	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	bf8c      	ite	hi
 8004494:	2301      	movhi	r3, #1
 8004496:	2300      	movls	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	f43f af6a 	beq.w	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 80044ac:	f06f 0301 	mvn.w	r3, #1
 80044b0:	e1a3      	b.n	80047fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d121      	bne.n	8004504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2bfe      	cmp	r3, #254	; 0xfe
 80044c4:	d10b      	bne.n	80044de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044cc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80044d0:	3301      	adds	r3, #1
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044d8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80044dc:	e74a      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e4:	461a      	mov	r2, r3
 80044e6:	2300      	movs	r3, #0
 80044e8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f2:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f47f af3c 	bne.w	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f98c 	bl	800481a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004502:	e737      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800450a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800450e:	2b02      	cmp	r3, #2
 8004510:	d120      	bne.n	8004554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004518:	461a      	mov	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004526:	461a      	mov	r2, r3
 8004528:	2300      	movs	r3, #0
 800452a:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004534:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004538:	3301      	adds	r3, #1
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004540:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454a:	461a      	mov	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004552:	e70f      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800455e:	2b03      	cmp	r3, #3
 8004560:	d118      	bne.n	8004594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004568:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	4413      	add	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004578:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004582:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004586:	3301      	adds	r3, #1
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800458e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004592:	e6ef      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d11f      	bne.n	80045e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80045ac:	425a      	negs	r2, r3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	bf58      	it	pl
 80045b4:	4253      	negpl	r3, r2
 80045b6:	2bff      	cmp	r3, #255	; 0xff
 80045b8:	d10b      	bne.n	80045d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045c4:	3301      	adds	r3, #1
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045cc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80045d0:	e6d0      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d8:	461a      	mov	r2, r3
 80045da:	2300      	movs	r3, #0
 80045dc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80045e0:	e6c8      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045ec:	2b05      	cmp	r3, #5
 80045ee:	d119      	bne.n	8004624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f6:	461a      	mov	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004604:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004608:	3301      	adds	r3, #1
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004610:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800461a:	461a      	mov	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004622:	e6a7      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800462a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800462e:	2b06      	cmp	r3, #6
 8004630:	d123      	bne.n	800467a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004638:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	4413      	add	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004648:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004652:	461a      	mov	r2, r3
 8004654:	2307      	movs	r3, #7
 8004656:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004660:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004664:	2b00      	cmp	r3, #0
 8004666:	f47f ae85 	bne.w	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004670:	461a      	mov	r2, r3
 8004672:	2308      	movs	r3, #8
 8004674:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004678:	e67c      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004680:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004684:	2b08      	cmp	r3, #8
 8004686:	f47f ae75 	bne.w	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004690:	461a      	mov	r2, r3
 8004692:	2300      	movs	r3, #0
 8004694:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80046a2:	425a      	negs	r2, r3
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	bf58      	it	pl
 80046aa:	4253      	negpl	r3, r2
 80046ac:	2bff      	cmp	r3, #255	; 0xff
 80046ae:	f47f ae61 	bne.w	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d116      	bne.n	80046ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f8aa 	bl	800481a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f8c6 	bl	8004858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d2:	461a      	mov	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e0:	461a      	mov	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80046e8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ec:	e085      	b.n	80047fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f4:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80046f8:	2b0a      	cmp	r3, #10
 80046fa:	d108      	bne.n	800470e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004702:	3304      	adds	r3, #4
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f988 	bl	8004a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800470c:	e632      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004714:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004718:	2b06      	cmp	r3, #6
 800471a:	d112      	bne.n	8004742 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8004722:	3314      	adds	r3, #20
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	f502 5281 	add.w	r2, r2, #4128	; 0x1020
 800472a:	3204      	adds	r2, #4
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe f8ad 	bl	800288e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004740:	e618      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004748:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800474c:	2b0b      	cmp	r3, #11
 800474e:	d106      	bne.n	800475e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800475c:	e60a      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004764:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004768:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f43f adfc 	beq.w	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004782:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004786:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004790:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800479e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80047a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80047b6:	3304      	adds	r3, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4790      	blx	r2
    while (true)
 80047bc:	e5da      	b.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80047be:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c6:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d014      	beq.n	80047f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d909      	bls.n	80047f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f818 	bl	800481a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f0:	461a      	mov	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 80047f8:	2300      	movs	r3, #0
  }
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
    return &hardware_;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
  }
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800481a:	b580      	push	{r7, lr}
 800481c:	b086      	sub	sp, #24
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004822:	f107 030c 	add.w	r3, r7, #12
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd fb98 	bl	8001f5c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f107 020c 	add.w	r2, r7, #12
 8004836:	210a      	movs	r1, #10
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4798      	blx	r3
    rt_time = hardware_.time();
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	4618      	mov	r0, r3
 8004842:	f7fe fb17 	bl	8002e74 <_ZN13STM32Hardware4timeEv>
 8004846:	4602      	mov	r2, r0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484e:	615a      	str	r2, [r3, #20]
  }
 8004850:	bf00      	nop
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b08b      	sub	sp, #44	; 0x2c
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004860:	f107 030c 	add.w	r3, r7, #12
 8004864:	4618      	mov	r0, r3
 8004866:	f7fd fc69 	bl	800213c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800486a:	2300      	movs	r3, #0
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	2b18      	cmp	r3, #24
 8004872:	dc63      	bgt.n	800493c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d056      	beq.n	8004934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	b29b      	uxth	r3, r3
 8004898:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	6859      	ldr	r1, [r3, #4]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4608      	mov	r0, r1
 80048d4:	4798      	blx	r3
 80048d6:	4603      	mov	r3, r0
 80048d8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	6859      	ldr	r1, [r3, #4]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4608      	mov	r0, r1
 8004902:	4798      	blx	r3
 8004904:	4603      	mov	r3, r0
 8004906:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800490c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681c      	ldr	r4, [r3, #0]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe f96b 	bl	8002bfe <_ZN3ros9Publisher15getEndpointTypeEv>
 8004928:	4601      	mov	r1, r0
 800492a:	f107 030c 	add.w	r3, r7, #12
 800492e:	461a      	mov	r2, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	3301      	adds	r3, #1
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
 800493a:	e798      	b.n	800486e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800493c:	2300      	movs	r3, #0
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	2b18      	cmp	r3, #24
 8004944:	dc5f      	bgt.n	8004a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800494e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d053      	beq.n	80049fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800495e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	b29b      	uxth	r3, r3
 8004966:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004988:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800498c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4608      	mov	r0, r1
 8004998:	4798      	blx	r3
 800499a:	4603      	mov	r3, r0
 800499c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ae:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4608      	mov	r0, r1
 80049be:	4798      	blx	r3
 80049c0:	4603      	mov	r3, r0
 80049c2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80049c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049c8:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681c      	ldr	r4, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3304      	adds	r3, #4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4608      	mov	r0, r1
 80049f0:	4798      	blx	r3
 80049f2:	4601      	mov	r1, r0
 80049f4:	f107 030c 	add.w	r3, r7, #12
 80049f8:	461a      	mov	r2, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	3301      	adds	r3, #1
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
 8004a04:	e79c      	b.n	8004940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004a12:	bf00      	nop
 8004a14:	372c      	adds	r7, #44	; 0x2c
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd90      	pop	{r4, r7, pc}
	...

08004a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004a26:	f107 0308 	add.w	r3, r7, #8
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fd fa96 	bl	8001f5c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe fa1d 	bl	8002e74 <_ZN13STM32Hardware4timeEv>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004a48:	f107 0308 	add.w	r3, r7, #8
 8004a4c:	6839      	ldr	r1, [r7, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fd faf4 	bl	800203c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	4915      	ldr	r1, [pc, #84]	; (8004ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004a5a:	fba1 1303 	umull	r1, r3, r1, r3
 8004a5e:	099b      	lsrs	r3, r3, #6
 8004a60:	4413      	add	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004a64:	6939      	ldr	r1, [r7, #16]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004a6a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a6e:	099b      	lsrs	r3, r3, #6
 8004a70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a74:	fb00 f303 	mul.w	r3, r0, r3
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	4a0e      	ldr	r2, [pc, #56]	; (8004ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004a7c:	fb02 f303 	mul.w	r3, r2, r3
 8004a80:	440b      	add	r3, r1
 8004a82:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004a84:	f107 0308 	add.w	r3, r7, #8
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f8bf 	bl	8004c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3304      	adds	r3, #4
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe f9ec 	bl	8002e74 <_ZN13STM32Hardware4timeEv>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004aa8:	bf00      	nop
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	10624dd3 	.word	0x10624dd3
 8004ab4:	000f4240 	.word	0x000f4240

08004ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b63      	cmp	r3, #99	; 0x63
 8004ac8:	dd0b      	ble.n	8004ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad0:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004ad4:	f083 0301 	eor.w	r3, r3, #1
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e090      	b.n	8004c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004aee:	3304      	adds	r3, #4
 8004af0:	3307      	adds	r3, #7
 8004af2:	4619      	mov	r1, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	4790      	blx	r2
 8004af8:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b00:	22ff      	movs	r2, #255	; 0xff
 8004b02:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b0c:	22fe      	movs	r2, #254	; 0xfe
 8004b0e:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1c:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b30:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3a:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b44:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004b48:	4413      	add	r3, r2
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b56:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b64:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	b21b      	sxth	r3, r3
 8004b6c:	121b      	asrs	r3, r3, #8
 8004b6e:	b21b      	sxth	r3, r3
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b78:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004b80:	2305      	movs	r3, #5
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	3306      	adds	r3, #6
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	dc0e      	bgt.n	8004bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004b98:	3304      	adds	r3, #4
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e7eb      	b.n	8004b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	3307      	adds	r3, #7
 8004bb0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	425a      	negs	r2, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	bf58      	it	pl
 8004bbc:	4253      	negpl	r3, r2
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	1c59      	adds	r1, r3, #1
 8004bc4:	6179      	str	r1, [r7, #20]
 8004bc6:	43d2      	mvns	r2, r2
 8004bc8:	b2d1      	uxtb	r1, r2
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	460a      	mov	r2, r1
 8004bd6:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bde:	dc0b      	bgt.n	8004bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1d18      	adds	r0, r3, #4
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004bea:	3304      	adds	r3, #4
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	f7fe f8f6 	bl	8002de0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	e005      	b.n	8004c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004bf8:	4904      	ldr	r1, [pc, #16]	; (8004c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f84c 	bl	8004c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004c00:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004c04:	4618      	mov	r0, r3
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	0800b484 	.word	0x0800b484

08004c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe f928 	bl	8002e74 <_ZN13STM32Hardware4timeEv>
 8004c24:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4917      	ldr	r1, [pc, #92]	; (8004c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004c2e:	fba1 1303 	umull	r1, r3, r1, r3
 8004c32:	099b      	lsrs	r3, r3, #6
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c3e:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004c48:	fba3 0302 	umull	r0, r3, r3, r2
 8004c4c:	099b      	lsrs	r3, r3, #6
 8004c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c52:	fb00 f303 	mul.w	r3, r0, r3
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	1aca      	subs	r2, r1, r3
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004c62:	4413      	add	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c6a:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c72:	3318      	adds	r3, #24
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c7a:	321c      	adds	r2, #28
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fc f8c2 	bl	8000e08 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	10624dd3 	.word	0x10624dd3
 8004c90:	000f4240 	.word	0x000f4240
 8004c94:	3b9aca00 	.word	0x3b9aca00

08004c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	2103      	movs	r1, #3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f804 	bl	8004cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004cac:	bf00      	nop
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004cc2:	f107 0314 	add.w	r3, r7, #20
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fd fbfc 	bl	80024c4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004ccc:	7afb      	ldrb	r3, [r7, #11]
 8004cce:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f107 0214 	add.w	r2, r7, #20
 8004cde:	2107      	movs	r1, #7
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	4798      	blx	r3
  }
 8004ce4:	bf00      	nop
 8004ce6:	3720      	adds	r7, #32
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <_Z41__static_initialization_and_destruction_0ii>:
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d134      	bne.n	8004d66 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d12f      	bne.n	8004d66 <_Z41__static_initialization_and_destruction_0ii+0x7a>
std_msgs::Int8 laji,pitches;
 8004d06:	481a      	ldr	r0, [pc, #104]	; (8004d70 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004d08:	f7fe fdd6 	bl	80038b8 <_ZN8std_msgs4Int8C1Ev>
 8004d0c:	4819      	ldr	r0, [pc, #100]	; (8004d74 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004d0e:	f7fe fdd3 	bl	80038b8 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int64 button_reset;
 8004d12:	4819      	ldr	r0, [pc, #100]	; (8004d78 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004d14:	f7fe fe3c 	bl	8003990 <_ZN8std_msgs5Int64C1Ev>
ros::NodeHandle nh;
 8004d18:	4818      	ldr	r0, [pc, #96]	; (8004d7c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004d1a:	f7ff f959 	bl	8003fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Point> sub_angle("/cmd_angle", angle_callback);
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004d22:	4918      	ldr	r1, [pc, #96]	; (8004d84 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004d24:	4818      	ldr	r0, [pc, #96]	; (8004d88 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004d26:	f7ff f9fd 	bl	8004124 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_pitches("shooter_ok", &pitches);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	4a11      	ldr	r2, [pc, #68]	; (8004d74 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004d2e:	4917      	ldr	r1, [pc, #92]	; (8004d8c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004d30:	4817      	ldr	r0, [pc, #92]	; (8004d90 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004d32:	f7fd ff39 	bl	8002ba8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> sub_ori("/cmd_ori", ori_callback);
 8004d36:	2301      	movs	r3, #1
 8004d38:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004d3a:	4917      	ldr	r1, [pc, #92]	; (8004d98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004d3c:	4817      	ldr	r0, [pc, #92]	; (8004d9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004d3e:	f7ff fa15 	bl	800416c <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> sub_laji("cmd_laji", laji_callback);
 8004d42:	2301      	movs	r3, #1
 8004d44:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004d46:	4917      	ldr	r1, [pc, #92]	; (8004da4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004d48:	4817      	ldr	r0, [pc, #92]	; (8004da8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004d4a:	f7ff fa0f 	bl	800416c <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_laji("laji_ok", &laji);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	4a07      	ldr	r2, [pc, #28]	; (8004d70 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004d52:	4916      	ldr	r1, [pc, #88]	; (8004dac <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004d54:	4816      	ldr	r0, [pc, #88]	; (8004db0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004d56:	f7fd ff27 	bl	8002ba8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_reset("reset", &button_reset);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	4a06      	ldr	r2, [pc, #24]	; (8004d78 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004d5e:	4915      	ldr	r1, [pc, #84]	; (8004db4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004d60:	4815      	ldr	r0, [pc, #84]	; (8004db8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004d62:	f7fd ff21 	bl	8002ba8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000490 	.word	0x20000490
 8004d74:	20000498 	.word	0x20000498
 8004d78:	200004a0 	.word	0x200004a0
 8004d7c:	200004b0 	.word	0x200004b0
 8004d80:	08003d0d 	.word	0x08003d0d
 8004d84:	0800b4c0 	.word	0x0800b4c0
 8004d88:	200019f0 	.word	0x200019f0
 8004d8c:	0800b4cc 	.word	0x0800b4cc
 8004d90:	20001a28 	.word	0x20001a28
 8004d94:	08003d75 	.word	0x08003d75
 8004d98:	0800b4d8 	.word	0x0800b4d8
 8004d9c:	20001a3c 	.word	0x20001a3c
 8004da0:	08003d51 	.word	0x08003d51
 8004da4:	0800b4e4 	.word	0x0800b4e4
 8004da8:	20001a58 	.word	0x20001a58
 8004dac:	0800b4f0 	.word	0x0800b4f0
 8004db0:	20001a74 	.word	0x20001a74
 8004db4:	0800b4f8 	.word	0x0800b4f8
 8004db8:	20001a88 	.word	0x20001a88

08004dbc <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	6839      	ldr	r1, [r7, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe fda3 	bl	8003918 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	320c      	adds	r2, #12
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4798      	blx	r3
  }
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
  }
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fda4 	bl	8003958 <_ZN8std_msgs4Int87getTypeEv>
 8004e10:	4603      	mov	r3, r0
  }
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	330c      	adds	r3, #12
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fe fda4 	bl	8003974 <_ZN8std_msgs4Int86getMD5Ev>
 8004e2c:	4603      	mov	r3, r0
  }
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3310      	adds	r3, #16
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe f9bb 	bl	80031c2 <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	3210      	adds	r2, #16
 8004e54:	4610      	mov	r0, r2
 8004e56:	4798      	blx	r3
  }
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3310      	adds	r3, #16
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe fcfb 	bl	8003880 <_ZN13geometry_msgs5Point7getTypeEv>
 8004e8a:	4603      	mov	r3, r0
  }
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3310      	adds	r3, #16
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fcfb 	bl	800389c <_ZN13geometry_msgs5Point6getMD5Ev>
 8004ea6:	4603      	mov	r3, r0
  }
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
    return configured_;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ebe:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <_GLOBAL__sub_I_flag>:
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	f7ff ff08 	bl	8004cec <_Z41__static_initialization_and_destruction_0ii>
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <_Z9UART_Sendh>:

#include "servo.h"
#include"math.h"
extern UART_HandleTypeDef huart3;
int Checksum_Calc, count=0;
void UART_Send(uint8_t u8_data){
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
 uint8_t *u8_pointer = &u8_data;
 8004eea:	1dfb      	adds	r3, r7, #7
 8004eec:	60fb      	str	r3, [r7, #12]
 HAL_UART_Transmit(&huart3, u8_pointer, 1,100);
 8004eee:	2364      	movs	r3, #100	; 0x64
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	4806      	ldr	r0, [pc, #24]	; (8004f10 <_Z9UART_Sendh+0x30>)
 8004ef6:	f004 fd93 	bl	8009a20 <HAL_UART_Transmit>

 Checksum_Calc += u8_data;
 8004efa:	79fb      	ldrb	r3, [r7, #7]
 8004efc:	461a      	mov	r2, r3
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <_Z9UART_Sendh+0x34>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4413      	add	r3, r2
 8004f04:	4a03      	ldr	r2, [pc, #12]	; (8004f14 <_Z9UART_Sendh+0x34>)
 8004f06:	6013      	str	r3, [r2, #0]
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20000370 	.word	0x20000370
 8004f14:	20001a9c 	.word	0x20001a9c

08004f18 <_Z26UART_Send_SetMotorPositionttt>:

void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time){
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	80fb      	strh	r3, [r7, #6]
 8004f22:	460b      	mov	r3, r1
 8004f24:	80bb      	strh	r3, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	807b      	strh	r3, [r7, #2]
 Checksum_Calc = 0;
 8004f2a:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <_Z26UART_Send_SetMotorPositionttt+0x84>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
 UART_Send(0x80 + motorId);
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	3b80      	subs	r3, #128	; 0x80
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff ffd1 	bl	8004ee0 <_Z9UART_Sendh>
 UART_Send(0x83);
 8004f3e:	2083      	movs	r0, #131	; 0x83
 8004f40:	f7ff ffce 	bl	8004ee0 <_Z9UART_Sendh>
 UART_Send(0x05);
 8004f44:	2005      	movs	r0, #5
 8004f46:	f7ff ffcb 	bl	8004ee0 <_Z9UART_Sendh>
 UART_Send((Position / 256)& 0x7F);
 8004f4a:	88bb      	ldrh	r3, [r7, #4]
 8004f4c:	0a1b      	lsrs	r3, r3, #8
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff ffc1 	bl	8004ee0 <_Z9UART_Sendh>
 UART_Send(Position % 256);
 8004f5e:	88bb      	ldrh	r3, [r7, #4]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff ffbc 	bl	8004ee0 <_Z9UART_Sendh>
 UART_Send((Time / 256)& 0x7F);
 8004f68:	887b      	ldrh	r3, [r7, #2]
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff ffb2 	bl	8004ee0 <_Z9UART_Sendh>
 UART_Send(Time % 256);
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff ffad 	bl	8004ee0 <_Z9UART_Sendh>
 UART_Send(Checksum_Calc);
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <_Z26UART_Send_SetMotorPositionttt+0x84>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff ffa7 	bl	8004ee0 <_Z9UART_Sendh>
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20001a9c 	.word	0x20001a9c

08004fa0 <_Z7shooterv>:
int check = 1;
int st_set = 0;

int run = 1;

void shooter(){
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0

	//encoder -> angle
	enc_st = __HAL_TIM_GetCounter(&htim1);
 8004fa4:	4b98      	ldr	r3, [pc, #608]	; (8005208 <_Z7shooterv+0x268>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	b21a      	sxth	r2, r3
 8004fac:	4b97      	ldr	r3, [pc, #604]	; (800520c <_Z7shooterv+0x26c>)
 8004fae:	801a      	strh	r2, [r3, #0]
	angle_st += 360*((double)enc_st/(4*resolution_st*ratio_st));
 8004fb0:	4b96      	ldr	r3, [pc, #600]	; (800520c <_Z7shooterv+0x26c>)
 8004fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb fa80 	bl	80004bc <__aeabi_i2d>
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	4b93      	ldr	r3, [pc, #588]	; (8005210 <_Z7shooterv+0x270>)
 8004fc2:	f7fb fc0f 	bl	80007e4 <__aeabi_ddiv>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4610      	mov	r0, r2
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	4b90      	ldr	r3, [pc, #576]	; (8005214 <_Z7shooterv+0x274>)
 8004fd4:	f7fb fadc 	bl	8000590 <__aeabi_dmul>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4610      	mov	r0, r2
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4b8d      	ldr	r3, [pc, #564]	; (8005218 <_Z7shooterv+0x278>)
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	f7fb f91d 	bl	8000224 <__adddf3>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	498a      	ldr	r1, [pc, #552]	; (8005218 <_Z7shooterv+0x278>)
 8004ff0:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCounter(&htim1, 0);
 8004ff4:	4b84      	ldr	r3, [pc, #528]	; (8005208 <_Z7shooterv+0x268>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	625a      	str	r2, [r3, #36]	; 0x24



	//transfer turns into lengths
	actual_length = (angle_st/360)*(2*M_PI*radius);
 8004ffc:	4b86      	ldr	r3, [pc, #536]	; (8005218 <_Z7shooterv+0x278>)
 8004ffe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	4b83      	ldr	r3, [pc, #524]	; (8005214 <_Z7shooterv+0x274>)
 8005008:	f7fb fbec 	bl	80007e4 <__aeabi_ddiv>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	a37a      	add	r3, pc, #488	; (adr r3, 8005200 <_Z7shooterv+0x260>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f7fb fab9 	bl	8000590 <__aeabi_dmul>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	497e      	ldr	r1, [pc, #504]	; (800521c <_Z7shooterv+0x27c>)
 8005024:	e9c1 2300 	strd	r2, r3, [r1]
//	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,600+10*angle);
//	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,600+10*angle);

	//ball seat set!
	switch(seat_mode){
 8005028:	4b7d      	ldr	r3, [pc, #500]	; (8005220 <_Z7shooterv+0x280>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d002      	beq.n	8005036 <_Z7shooterv+0x96>
 8005030:	2b02      	cmp	r3, #2
 8005032:	d006      	beq.n	8005042 <_Z7shooterv+0xa2>
 8005034:	e00b      	b.n	800504e <_Z7shooterv+0xae>
		case 1: //loaded
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,600+10*loaded);
 8005036:	4b7b      	ldr	r3, [pc, #492]	; (8005224 <_Z7shooterv+0x284>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800503e:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8005040:	e005      	b.n	800504e <_Z7shooterv+0xae>
		case 2:	//reload
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,600+10*reload);
 8005042:	4b78      	ldr	r3, [pc, #480]	; (8005224 <_Z7shooterv+0x284>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800504c:	bf00      	nop
	}
	//If got a new target
	if(target_length > 0){
 800504e:	4b76      	ldr	r3, [pc, #472]	; (8005228 <_Z7shooterv+0x288>)
 8005050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	f7fb fd28 	bl	8000ab0 <__aeabi_dcmpgt>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d100      	bne.n	8005068 <_Z7shooterv+0xc8>
					}
				}
			}
		}
	}
}
 8005066:	e0c6      	b.n	80051f6 <_Z7shooterv+0x256>
		if(check_hook == 0){
 8005068:	4b70      	ldr	r3, [pc, #448]	; (800522c <_Z7shooterv+0x28c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10c      	bne.n	800508a <_Z7shooterv+0xea>
			delay = 0;
 8005070:	4b6f      	ldr	r3, [pc, #444]	; (8005230 <_Z7shooterv+0x290>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
			UART_Send_SetMotorPosition(1, 800, 3600); //Hook -> 800
 8005076:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800507a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800507e:	2001      	movs	r0, #1
 8005080:	f7ff ff4a 	bl	8004f18 <_Z26UART_Send_SetMotorPositionttt>
			check_hook = 1;
 8005084:	4b69      	ldr	r3, [pc, #420]	; (800522c <_Z7shooterv+0x28c>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]
		check_fire = 0;
 800508a:	4b6a      	ldr	r3, [pc, #424]	; (8005234 <_Z7shooterv+0x294>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
		if((target_length - actual_length) > 0){
 8005090:	4b65      	ldr	r3, [pc, #404]	; (8005228 <_Z7shooterv+0x288>)
 8005092:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005096:	4b61      	ldr	r3, [pc, #388]	; (800521c <_Z7shooterv+0x27c>)
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f7fb f8c0 	bl	8000220 <__aeabi_dsub>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	f7fb fcfe 	bl	8000ab0 <__aeabi_dcmpgt>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01c      	beq.n	80050f4 <_Z7shooterv+0x154>
			if(delay <= 300) delay++;
 80050ba:	4b5d      	ldr	r3, [pc, #372]	; (8005230 <_Z7shooterv+0x290>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80050c2:	dc05      	bgt.n	80050d0 <_Z7shooterv+0x130>
 80050c4:	4b5a      	ldr	r3, [pc, #360]	; (8005230 <_Z7shooterv+0x290>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3301      	adds	r3, #1
 80050ca:	4a59      	ldr	r2, [pc, #356]	; (8005230 <_Z7shooterv+0x290>)
 80050cc:	6013      	str	r3, [r2, #0]
}
 80050ce:	e092      	b.n	80051f6 <_Z7shooterv+0x256>
			else if(delay > 300){
 80050d0:	4b57      	ldr	r3, [pc, #348]	; (8005230 <_Z7shooterv+0x290>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80050d8:	f340 808d 	ble.w	80051f6 <_Z7shooterv+0x256>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,GPIO_PIN_SET); //Down
 80050dc:	2201      	movs	r2, #1
 80050de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050e2:	4855      	ldr	r0, [pc, #340]	; (8005238 <_Z7shooterv+0x298>)
 80050e4:	f002 fc66 	bl	80079b4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 80050e8:	2200      	movs	r2, #0
 80050ea:	2180      	movs	r1, #128	; 0x80
 80050ec:	4852      	ldr	r0, [pc, #328]	; (8005238 <_Z7shooterv+0x298>)
 80050ee:	f002 fc61 	bl	80079b4 <HAL_GPIO_WritePin>
}
 80050f2:	e080      	b.n	80051f6 <_Z7shooterv+0x256>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,GPIO_PIN_RESET); //Stop
 80050f4:	2200      	movs	r2, #0
 80050f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050fa:	484f      	ldr	r0, [pc, #316]	; (8005238 <_Z7shooterv+0x298>)
 80050fc:	f002 fc5a 	bl	80079b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 8005100:	2200      	movs	r2, #0
 8005102:	2180      	movs	r1, #128	; 0x80
 8005104:	484c      	ldr	r0, [pc, #304]	; (8005238 <_Z7shooterv+0x298>)
 8005106:	f002 fc55 	bl	80079b4 <HAL_GPIO_WritePin>
			st_set = 1;
 800510a:	4b4c      	ldr	r3, [pc, #304]	; (800523c <_Z7shooterv+0x29c>)
 800510c:	2201      	movs	r2, #1
 800510e:	601a      	str	r2, [r3, #0]
			if(ev_ok == 222 && hz_ok == 222/* && check == 1*/){
 8005110:	4b4b      	ldr	r3, [pc, #300]	; (8005240 <_Z7shooterv+0x2a0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2bde      	cmp	r3, #222	; 0xde
 8005116:	d16e      	bne.n	80051f6 <_Z7shooterv+0x256>
 8005118:	4b4a      	ldr	r3, [pc, #296]	; (8005244 <_Z7shooterv+0x2a4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2bde      	cmp	r3, #222	; 0xde
 800511e:	d16a      	bne.n	80051f6 <_Z7shooterv+0x256>
				if(check_fire == 0){
 8005120:	4b44      	ldr	r3, [pc, #272]	; (8005234 <_Z7shooterv+0x294>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d113      	bne.n	8005150 <_Z7shooterv+0x1b0>
					delay++;
 8005128:	4b41      	ldr	r3, [pc, #260]	; (8005230 <_Z7shooterv+0x290>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3301      	adds	r3, #1
 800512e:	4a40      	ldr	r2, [pc, #256]	; (8005230 <_Z7shooterv+0x290>)
 8005130:	6013      	str	r3, [r2, #0]
					if(delay > 600){
 8005132:	4b3f      	ldr	r3, [pc, #252]	; (8005230 <_Z7shooterv+0x290>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800513a:	dd09      	ble.n	8005150 <_Z7shooterv+0x1b0>
						UART_Send_SetMotorPosition(1, 1010, 300); //Fire -> 1010
 800513c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005140:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8005144:	2001      	movs	r0, #1
 8005146:	f7ff fee7 	bl	8004f18 <_Z26UART_Send_SetMotorPositionttt>
						check_fire = 1;
 800514a:	4b3a      	ldr	r3, [pc, #232]	; (8005234 <_Z7shooterv+0x294>)
 800514c:	2201      	movs	r2, #1
 800514e:	601a      	str	r2, [r3, #0]
				if(check_fire == 1){
 8005150:	4b38      	ldr	r3, [pc, #224]	; (8005234 <_Z7shooterv+0x294>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d14e      	bne.n	80051f6 <_Z7shooterv+0x256>
					if(delay > 600 && delay <= 2000)	delay++;
 8005158:	4b35      	ldr	r3, [pc, #212]	; (8005230 <_Z7shooterv+0x290>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005160:	dd0a      	ble.n	8005178 <_Z7shooterv+0x1d8>
 8005162:	4b33      	ldr	r3, [pc, #204]	; (8005230 <_Z7shooterv+0x290>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800516a:	dc05      	bgt.n	8005178 <_Z7shooterv+0x1d8>
 800516c:	4b30      	ldr	r3, [pc, #192]	; (8005230 <_Z7shooterv+0x290>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3301      	adds	r3, #1
 8005172:	4a2f      	ldr	r2, [pc, #188]	; (8005230 <_Z7shooterv+0x290>)
 8005174:	6013      	str	r3, [r2, #0]
}
 8005176:	e03e      	b.n	80051f6 <_Z7shooterv+0x256>
					else if(delay > 2000){
 8005178:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <_Z7shooterv+0x290>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005180:	dd39      	ble.n	80051f6 <_Z7shooterv+0x256>
						check_hook = 0;
 8005182:	4b2a      	ldr	r3, [pc, #168]	; (800522c <_Z7shooterv+0x28c>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
						target_length = 0.0;
 8005188:	4927      	ldr	r1, [pc, #156]	; (8005228 <_Z7shooterv+0x288>)
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	e9c1 2300 	strd	r2, r3, [r1]
						actual_length = 0.0;
 8005196:	4921      	ldr	r1, [pc, #132]	; (800521c <_Z7shooterv+0x27c>)
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	e9c1 2300 	strd	r2, r3, [r1]
						angle_st = 0.0;
 80051a4:	491c      	ldr	r1, [pc, #112]	; (8005218 <_Z7shooterv+0x278>)
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9c1 2300 	strd	r2, r3, [r1]
						ros_st = 0;
 80051b2:	4925      	ldr	r1, [pc, #148]	; (8005248 <_Z7shooterv+0x2a8>)
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9c1 2300 	strd	r2, r3, [r1]
						if(run == 1)	step = 1;
 80051c0:	4b22      	ldr	r3, [pc, #136]	; (800524c <_Z7shooterv+0x2ac>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d103      	bne.n	80051d0 <_Z7shooterv+0x230>
 80051c8:	4b21      	ldr	r3, [pc, #132]	; (8005250 <_Z7shooterv+0x2b0>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e002      	b.n	80051d6 <_Z7shooterv+0x236>
						else step = 0;
 80051d0:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <_Z7shooterv+0x2b0>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
						st_set = 0;
 80051d6:	4b19      	ldr	r3, [pc, #100]	; (800523c <_Z7shooterv+0x29c>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
						if(return_value < 8 )	return_value ++;
 80051dc:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <_Z7shooterv+0x2b4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b07      	cmp	r3, #7
 80051e2:	dc05      	bgt.n	80051f0 <_Z7shooterv+0x250>
 80051e4:	4b1b      	ldr	r3, [pc, #108]	; (8005254 <_Z7shooterv+0x2b4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	4a1a      	ldr	r2, [pc, #104]	; (8005254 <_Z7shooterv+0x2b4>)
 80051ec:	6013      	str	r3, [r2, #0]
}
 80051ee:	e002      	b.n	80051f6 <_Z7shooterv+0x256>
						else	return_value = 0;
 80051f0:	4b18      	ldr	r3, [pc, #96]	; (8005254 <_Z7shooterv+0x2b4>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
}
 80051f6:	bf00      	nop
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	f3af 8000 	nop.w
 8005200:	2955385e 	.word	0x2955385e
 8005204:	404f6a7a 	.word	0x404f6a7a
 8005208:	20000134 	.word	0x20000134
 800520c:	20001ac0 	.word	0x20001ac0
 8005210:	40af4000 	.word	0x40af4000
 8005214:	40768000 	.word	0x40768000
 8005218:	20001ac8 	.word	0x20001ac8
 800521c:	20001aa8 	.word	0x20001aa8
 8005220:	20000008 	.word	0x20000008
 8005224:	2000020c 	.word	0x2000020c
 8005228:	20001aa0 	.word	0x20001aa0
 800522c:	20001ab0 	.word	0x20001ab0
 8005230:	20001ab8 	.word	0x20001ab8
 8005234:	20001ab4 	.word	0x20001ab4
 8005238:	40020800 	.word	0x40020800
 800523c:	20001ad0 	.word	0x20001ad0
 8005240:	20001afc 	.word	0x20001afc
 8005244:	20001af8 	.word	0x20001af8
 8005248:	20001b50 	.word	0x20001b50
 800524c:	2000000c 	.word	0x2000000c
 8005250:	2000006c 	.word	0x2000006c
 8005254:	20001abc 	.word	0x20001abc

08005258 <_Z12shooter_basev>:
double D_ev = 0.005;

int once_hz = 1;
int once_ev = 1;

void shooter_base(){
 8005258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
//horizontal angle
	enc_hz = __HAL_TIM_GetCounter(&htim2);
 8005260:	4b95      	ldr	r3, [pc, #596]	; (80054b8 <_Z12shooter_basev+0x260>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	b21a      	sxth	r2, r3
 8005268:	4b94      	ldr	r3, [pc, #592]	; (80054bc <_Z12shooter_basev+0x264>)
 800526a:	801a      	strh	r2, [r3, #0]
	angle_hz += 360*((double)enc_hz/(4*resolution_hz*ratio_hz))*2;	//PV
 800526c:	4b93      	ldr	r3, [pc, #588]	; (80054bc <_Z12shooter_basev+0x264>)
 800526e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fb f922 	bl	80004bc <__aeabi_i2d>
 8005278:	a383      	add	r3, pc, #524	; (adr r3, 8005488 <_Z12shooter_basev+0x230>)
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f7fb fab1 	bl	80007e4 <__aeabi_ddiv>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4610      	mov	r0, r2
 8005288:	4619      	mov	r1, r3
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	4b8c      	ldr	r3, [pc, #560]	; (80054c0 <_Z12shooter_basev+0x268>)
 8005290:	f7fb f97e 	bl	8000590 <__aeabi_dmul>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4610      	mov	r0, r2
 800529a:	4619      	mov	r1, r3
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	f7fa ffc0 	bl	8000224 <__adddf3>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4610      	mov	r0, r2
 80052aa:	4619      	mov	r1, r3
 80052ac:	4b85      	ldr	r3, [pc, #532]	; (80054c4 <_Z12shooter_basev+0x26c>)
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f7fa ffb7 	bl	8000224 <__adddf3>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4982      	ldr	r1, [pc, #520]	; (80054c4 <_Z12shooter_basev+0x26c>)
 80052bc:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCounter(&htim2, 0);
 80052c0:	4b7d      	ldr	r3, [pc, #500]	; (80054b8 <_Z12shooter_basev+0x260>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2200      	movs	r2, #0
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24

	//et
	et_hz = target_hz - angle_hz;
 80052c8:	4b7f      	ldr	r3, [pc, #508]	; (80054c8 <_Z12shooter_basev+0x270>)
 80052ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052ce:	4b7d      	ldr	r3, [pc, #500]	; (80054c4 <_Z12shooter_basev+0x26c>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f7fa ffa4 	bl	8000220 <__aeabi_dsub>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	497b      	ldr	r1, [pc, #492]	; (80054cc <_Z12shooter_basev+0x274>)
 80052de:	e9c1 2300 	strd	r2, r3, [r1]
	sigma_et_hz += et_hz;
 80052e2:	4b7b      	ldr	r3, [pc, #492]	; (80054d0 <_Z12shooter_basev+0x278>)
 80052e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052e8:	4b78      	ldr	r3, [pc, #480]	; (80054cc <_Z12shooter_basev+0x274>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f7fa ff99 	bl	8000224 <__adddf3>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4976      	ldr	r1, [pc, #472]	; (80054d0 <_Z12shooter_basev+0x278>)
 80052f8:	e9c1 2300 	strd	r2, r3, [r1]

	//P_hz
	if(once_hz == 1){
 80052fc:	4b75      	ldr	r3, [pc, #468]	; (80054d4 <_Z12shooter_basev+0x27c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d11f      	bne.n	8005344 <_Z12shooter_basev+0xec>
		if(fabs(et_hz)<10) P_hz = 0.16;
 8005304:	4b71      	ldr	r3, [pc, #452]	; (80054cc <_Z12shooter_basev+0x274>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	4614      	mov	r4, r2
 800530c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	4b70      	ldr	r3, [pc, #448]	; (80054d8 <_Z12shooter_basev+0x280>)
 8005316:	4620      	mov	r0, r4
 8005318:	4629      	mov	r1, r5
 800531a:	f7fb fbab 	bl	8000a74 <__aeabi_dcmplt>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d006      	beq.n	8005332 <_Z12shooter_basev+0xda>
 8005324:	496d      	ldr	r1, [pc, #436]	; (80054dc <_Z12shooter_basev+0x284>)
 8005326:	a35a      	add	r3, pc, #360	; (adr r3, 8005490 <_Z12shooter_basev+0x238>)
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	e9c1 2300 	strd	r2, r3, [r1]
 8005330:	e005      	b.n	800533e <_Z12shooter_basev+0xe6>
		else P_hz = 0.2;
 8005332:	496a      	ldr	r1, [pc, #424]	; (80054dc <_Z12shooter_basev+0x284>)
 8005334:	a358      	add	r3, pc, #352	; (adr r3, 8005498 <_Z12shooter_basev+0x240>)
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533a:	e9c1 2300 	strd	r2, r3, [r1]
		once_hz = 0;
 800533e:	4b65      	ldr	r3, [pc, #404]	; (80054d4 <_Z12shooter_basev+0x27c>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
	}

	//ut -> pulse
	ut_hz = P_hz*et_hz + I_hz*sigma_et_hz*span_hz + D_hz*(et_hz-last_et_hz)/span_hz;	//PID Control
 8005344:	4b65      	ldr	r3, [pc, #404]	; (80054dc <_Z12shooter_basev+0x284>)
 8005346:	e9d3 0100 	ldrd	r0, r1, [r3]
 800534a:	4b60      	ldr	r3, [pc, #384]	; (80054cc <_Z12shooter_basev+0x274>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f7fb f91e 	bl	8000590 <__aeabi_dmul>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4614      	mov	r4, r2
 800535a:	461d      	mov	r5, r3
 800535c:	4b60      	ldr	r3, [pc, #384]	; (80054e0 <_Z12shooter_basev+0x288>)
 800535e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005362:	4b5b      	ldr	r3, [pc, #364]	; (80054d0 <_Z12shooter_basev+0x278>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f7fb f912 	bl	8000590 <__aeabi_dmul>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	a34a      	add	r3, pc, #296	; (adr r3, 80054a0 <_Z12shooter_basev+0x248>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f7fb f909 	bl	8000590 <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4620      	mov	r0, r4
 8005384:	4629      	mov	r1, r5
 8005386:	f7fa ff4d 	bl	8000224 <__adddf3>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4614      	mov	r4, r2
 8005390:	461d      	mov	r5, r3
 8005392:	4b4e      	ldr	r3, [pc, #312]	; (80054cc <_Z12shooter_basev+0x274>)
 8005394:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005398:	4b52      	ldr	r3, [pc, #328]	; (80054e4 <_Z12shooter_basev+0x28c>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	f7fa ff3f 	bl	8000220 <__aeabi_dsub>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4610      	mov	r0, r2
 80053a8:	4619      	mov	r1, r3
 80053aa:	4b4f      	ldr	r3, [pc, #316]	; (80054e8 <_Z12shooter_basev+0x290>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f7fb f8ee 	bl	8000590 <__aeabi_dmul>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4610      	mov	r0, r2
 80053ba:	4619      	mov	r1, r3
 80053bc:	a338      	add	r3, pc, #224	; (adr r3, 80054a0 <_Z12shooter_basev+0x248>)
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f7fb fa0f 	bl	80007e4 <__aeabi_ddiv>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4620      	mov	r0, r4
 80053cc:	4629      	mov	r1, r5
 80053ce:	f7fa ff29 	bl	8000224 <__adddf3>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4945      	ldr	r1, [pc, #276]	; (80054ec <_Z12shooter_basev+0x294>)
 80053d8:	e9c1 2300 	strd	r2, r3, [r1]
	if(ut_hz > 0.3) ut_hz = 0.3;
 80053dc:	4b43      	ldr	r3, [pc, #268]	; (80054ec <_Z12shooter_basev+0x294>)
 80053de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053e2:	a331      	add	r3, pc, #196	; (adr r3, 80054a8 <_Z12shooter_basev+0x250>)
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	f7fb fb62 	bl	8000ab0 <__aeabi_dcmpgt>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d006      	beq.n	8005400 <_Z12shooter_basev+0x1a8>
 80053f2:	493e      	ldr	r1, [pc, #248]	; (80054ec <_Z12shooter_basev+0x294>)
 80053f4:	a32c      	add	r3, pc, #176	; (adr r3, 80054a8 <_Z12shooter_basev+0x250>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	e9c1 2300 	strd	r2, r3, [r1]
 80053fe:	e010      	b.n	8005422 <_Z12shooter_basev+0x1ca>
	else if(ut_hz < -0.3) ut_hz = -0.3;
 8005400:	4b3a      	ldr	r3, [pc, #232]	; (80054ec <_Z12shooter_basev+0x294>)
 8005402:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005406:	a32a      	add	r3, pc, #168	; (adr r3, 80054b0 <_Z12shooter_basev+0x258>)
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f7fb fb32 	bl	8000a74 <__aeabi_dcmplt>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <_Z12shooter_basev+0x1ca>
 8005416:	4935      	ldr	r1, [pc, #212]	; (80054ec <_Z12shooter_basev+0x294>)
 8005418:	a325      	add	r3, pc, #148	; (adr r3, 80054b0 <_Z12shooter_basev+0x258>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	e9c1 2300 	strd	r2, r3, [r1]

	if(ut_hz>0){
 8005422:	4b32      	ldr	r3, [pc, #200]	; (80054ec <_Z12shooter_basev+0x294>)
 8005424:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	f7fb fb3e 	bl	8000ab0 <__aeabi_dcmpgt>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00c      	beq.n	8005454 <_Z12shooter_basev+0x1fc>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800543a:	2201      	movs	r2, #1
 800543c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005440:	482b      	ldr	r0, [pc, #172]	; (80054f0 <_Z12shooter_basev+0x298>)
 8005442:	f002 fab7 	bl	80079b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8005446:	2200      	movs	r2, #0
 8005448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800544c:	4828      	ldr	r0, [pc, #160]	; (80054f0 <_Z12shooter_basev+0x298>)
 800544e:	f002 fab1 	bl	80079b4 <HAL_GPIO_WritePin>
 8005452:	e067      	b.n	8005524 <_Z12shooter_basev+0x2cc>
	}
	else if(ut_hz<0){
 8005454:	4b25      	ldr	r3, [pc, #148]	; (80054ec <_Z12shooter_basev+0x294>)
 8005456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	f7fb fb07 	bl	8000a74 <__aeabi_dcmplt>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d043      	beq.n	80054f4 <_Z12shooter_basev+0x29c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800546c:	2200      	movs	r2, #0
 800546e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005472:	481f      	ldr	r0, [pc, #124]	; (80054f0 <_Z12shooter_basev+0x298>)
 8005474:	f002 fa9e 	bl	80079b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8005478:	2201      	movs	r2, #1
 800547a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800547e:	481c      	ldr	r0, [pc, #112]	; (80054f0 <_Z12shooter_basev+0x298>)
 8005480:	f002 fa98 	bl	80079b4 <HAL_GPIO_WritePin>
 8005484:	e04e      	b.n	8005524 <_Z12shooter_basev+0x2cc>
 8005486:	bf00      	nop
 8005488:	00000000 	.word	0x00000000
 800548c:	40d77000 	.word	0x40d77000
 8005490:	47ae147b 	.word	0x47ae147b
 8005494:	3fc47ae1 	.word	0x3fc47ae1
 8005498:	9999999a 	.word	0x9999999a
 800549c:	3fc99999 	.word	0x3fc99999
 80054a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80054a4:	3f50624d 	.word	0x3f50624d
 80054a8:	33333333 	.word	0x33333333
 80054ac:	3fd33333 	.word	0x3fd33333
 80054b0:	33333333 	.word	0x33333333
 80054b4:	bfd33333 	.word	0xbfd33333
 80054b8:	2000017c 	.word	0x2000017c
 80054bc:	20001ad4 	.word	0x20001ad4
 80054c0:	40768000 	.word	0x40768000
 80054c4:	20001ae8 	.word	0x20001ae8
 80054c8:	20001ad8 	.word	0x20001ad8
 80054cc:	20001b00 	.word	0x20001b00
 80054d0:	20001b10 	.word	0x20001b10
 80054d4:	20000048 	.word	0x20000048
 80054d8:	40240000 	.word	0x40240000
 80054dc:	20000018 	.word	0x20000018
 80054e0:	20000020 	.word	0x20000020
 80054e4:	20001b30 	.word	0x20001b30
 80054e8:	20000028 	.word	0x20000028
 80054ec:	20001b20 	.word	0x20001b20
 80054f0:	40020400 	.word	0x40020400
	}
	else if(ut_hz==0){
 80054f4:	4ba4      	ldr	r3, [pc, #656]	; (8005788 <_Z12shooter_basev+0x530>)
 80054f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	f7fb faad 	bl	8000a60 <__aeabi_dcmpeq>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00b      	beq.n	8005524 <_Z12shooter_basev+0x2cc>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800550c:	2200      	movs	r2, #0
 800550e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005512:	489e      	ldr	r0, [pc, #632]	; (800578c <_Z12shooter_basev+0x534>)
 8005514:	f002 fa4e 	bl	80079b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8005518:	2200      	movs	r2, #0
 800551a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800551e:	489b      	ldr	r0, [pc, #620]	; (800578c <_Z12shooter_basev+0x534>)
 8005520:	f002 fa48 	bl	80079b4 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,fabs(ut_hz)*20000);
 8005524:	4b98      	ldr	r3, [pc, #608]	; (8005788 <_Z12shooter_basev+0x530>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	4692      	mov	sl, r2
 800552c:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8005530:	a38b      	add	r3, pc, #556	; (adr r3, 8005760 <_Z12shooter_basev+0x508>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	4650      	mov	r0, sl
 8005538:	4659      	mov	r1, fp
 800553a:	f7fb f829 	bl	8000590 <__aeabi_dmul>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4993      	ldr	r1, [pc, #588]	; (8005790 <_Z12shooter_basev+0x538>)
 8005544:	680c      	ldr	r4, [r1, #0]
 8005546:	4610      	mov	r0, r2
 8005548:	4619      	mov	r1, r3
 800554a:	f7fb fabb 	bl	8000ac4 <__aeabi_d2uiz>
 800554e:	4603      	mov	r3, r0
 8005550:	63a3      	str	r3, [r4, #56]	; 0x38

	//report set
	if(last_et_hz == et_hz && hz_ok < 222)	hz_ok++;
 8005552:	4b90      	ldr	r3, [pc, #576]	; (8005794 <_Z12shooter_basev+0x53c>)
 8005554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005558:	4b8f      	ldr	r3, [pc, #572]	; (8005798 <_Z12shooter_basev+0x540>)
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f7fb fa7f 	bl	8000a60 <__aeabi_dcmpeq>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d009      	beq.n	800557c <_Z12shooter_basev+0x324>
 8005568:	4b8c      	ldr	r3, [pc, #560]	; (800579c <_Z12shooter_basev+0x544>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2bdd      	cmp	r3, #221	; 0xdd
 800556e:	dc05      	bgt.n	800557c <_Z12shooter_basev+0x324>
 8005570:	4b8a      	ldr	r3, [pc, #552]	; (800579c <_Z12shooter_basev+0x544>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3301      	adds	r3, #1
 8005576:	4a89      	ldr	r2, [pc, #548]	; (800579c <_Z12shooter_basev+0x544>)
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e00d      	b.n	8005598 <_Z12shooter_basev+0x340>
	else if(last_et_hz != et_hz) hz_ok = 0;
 800557c:	4b85      	ldr	r3, [pc, #532]	; (8005794 <_Z12shooter_basev+0x53c>)
 800557e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005582:	4b85      	ldr	r3, [pc, #532]	; (8005798 <_Z12shooter_basev+0x540>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f7fb fa6a 	bl	8000a60 <__aeabi_dcmpeq>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <_Z12shooter_basev+0x340>
 8005592:	4b82      	ldr	r3, [pc, #520]	; (800579c <_Z12shooter_basev+0x544>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]

	//record et
	last_et_hz = et_hz;
 8005598:	4b7f      	ldr	r3, [pc, #508]	; (8005798 <_Z12shooter_basev+0x540>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	497d      	ldr	r1, [pc, #500]	; (8005794 <_Z12shooter_basev+0x53c>)
 80055a0:	e9c1 2300 	strd	r2, r3, [r1]

//elevation angle
	enc_ev = __HAL_TIM_GetCounter(&htim3);
 80055a4:	4b7e      	ldr	r3, [pc, #504]	; (80057a0 <_Z12shooter_basev+0x548>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	b21a      	sxth	r2, r3
 80055ac:	4b7d      	ldr	r3, [pc, #500]	; (80057a4 <_Z12shooter_basev+0x54c>)
 80055ae:	801a      	strh	r2, [r3, #0]
	angle_ev += 360*((double)enc_ev/(4*resolution_ev*ratio_ev))*2;	//PV
 80055b0:	4b7c      	ldr	r3, [pc, #496]	; (80057a4 <_Z12shooter_basev+0x54c>)
 80055b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fa ff80 	bl	80004bc <__aeabi_i2d>
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	4b79      	ldr	r3, [pc, #484]	; (80057a8 <_Z12shooter_basev+0x550>)
 80055c2:	f7fb f90f 	bl	80007e4 <__aeabi_ddiv>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4610      	mov	r0, r2
 80055cc:	4619      	mov	r1, r3
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	4b76      	ldr	r3, [pc, #472]	; (80057ac <_Z12shooter_basev+0x554>)
 80055d4:	f7fa ffdc 	bl	8000590 <__aeabi_dmul>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4610      	mov	r0, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	f7fa fe1e 	bl	8000224 <__adddf3>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4610      	mov	r0, r2
 80055ee:	4619      	mov	r1, r3
 80055f0:	4b6f      	ldr	r3, [pc, #444]	; (80057b0 <_Z12shooter_basev+0x558>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa fe15 	bl	8000224 <__adddf3>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	496c      	ldr	r1, [pc, #432]	; (80057b0 <_Z12shooter_basev+0x558>)
 8005600:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCounter(&htim3, 0);
 8005604:	4b66      	ldr	r3, [pc, #408]	; (80057a0 <_Z12shooter_basev+0x548>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2200      	movs	r2, #0
 800560a:	625a      	str	r2, [r3, #36]	; 0x24

	//et
	et_ev = target_ev - angle_ev;
 800560c:	4b69      	ldr	r3, [pc, #420]	; (80057b4 <_Z12shooter_basev+0x55c>)
 800560e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005612:	4b67      	ldr	r3, [pc, #412]	; (80057b0 <_Z12shooter_basev+0x558>)
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	f7fa fe02 	bl	8000220 <__aeabi_dsub>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4965      	ldr	r1, [pc, #404]	; (80057b8 <_Z12shooter_basev+0x560>)
 8005622:	e9c1 2300 	strd	r2, r3, [r1]
	sigma_et_ev += et_ev;
 8005626:	4b65      	ldr	r3, [pc, #404]	; (80057bc <_Z12shooter_basev+0x564>)
 8005628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800562c:	4b62      	ldr	r3, [pc, #392]	; (80057b8 <_Z12shooter_basev+0x560>)
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f7fa fdf7 	bl	8000224 <__adddf3>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4960      	ldr	r1, [pc, #384]	; (80057bc <_Z12shooter_basev+0x564>)
 800563c:	e9c1 2300 	strd	r2, r3, [r1]
//		else P_ev = 0.16;
//		once_ev = 0;
//	}

	//ut -> pulse
	ut_ev = P_ev*et_ev + I_ev*sigma_et_ev*span_ev + D_ev*(et_ev-last_et_ev)/span_ev;	//PID Control
 8005640:	4b5f      	ldr	r3, [pc, #380]	; (80057c0 <_Z12shooter_basev+0x568>)
 8005642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005646:	4b5c      	ldr	r3, [pc, #368]	; (80057b8 <_Z12shooter_basev+0x560>)
 8005648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564c:	f7fa ffa0 	bl	8000590 <__aeabi_dmul>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4614      	mov	r4, r2
 8005656:	461d      	mov	r5, r3
 8005658:	4b5a      	ldr	r3, [pc, #360]	; (80057c4 <_Z12shooter_basev+0x56c>)
 800565a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800565e:	4b57      	ldr	r3, [pc, #348]	; (80057bc <_Z12shooter_basev+0x564>)
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f7fa ff94 	bl	8000590 <__aeabi_dmul>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4610      	mov	r0, r2
 800566e:	4619      	mov	r1, r3
 8005670:	a33d      	add	r3, pc, #244	; (adr r3, 8005768 <_Z12shooter_basev+0x510>)
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	f7fa ff8b 	bl	8000590 <__aeabi_dmul>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4620      	mov	r0, r4
 8005680:	4629      	mov	r1, r5
 8005682:	f7fa fdcf 	bl	8000224 <__adddf3>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4614      	mov	r4, r2
 800568c:	461d      	mov	r5, r3
 800568e:	4b4a      	ldr	r3, [pc, #296]	; (80057b8 <_Z12shooter_basev+0x560>)
 8005690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005694:	4b4c      	ldr	r3, [pc, #304]	; (80057c8 <_Z12shooter_basev+0x570>)
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	f7fa fdc1 	bl	8000220 <__aeabi_dsub>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4610      	mov	r0, r2
 80056a4:	4619      	mov	r1, r3
 80056a6:	4b49      	ldr	r3, [pc, #292]	; (80057cc <_Z12shooter_basev+0x574>)
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	f7fa ff70 	bl	8000590 <__aeabi_dmul>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4610      	mov	r0, r2
 80056b6:	4619      	mov	r1, r3
 80056b8:	a32b      	add	r3, pc, #172	; (adr r3, 8005768 <_Z12shooter_basev+0x510>)
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f7fb f891 	bl	80007e4 <__aeabi_ddiv>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fa fdab 	bl	8000224 <__adddf3>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	493f      	ldr	r1, [pc, #252]	; (80057d0 <_Z12shooter_basev+0x578>)
 80056d4:	e9c1 2300 	strd	r2, r3, [r1]

	if(ut_ev<0){
 80056d8:	4b3d      	ldr	r3, [pc, #244]	; (80057d0 <_Z12shooter_basev+0x578>)
 80056da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	f7fb f9c5 	bl	8000a74 <__aeabi_dcmplt>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d017      	beq.n	8005720 <_Z12shooter_basev+0x4c8>
		if(angle_ev < 45)	speed_ev = 0.08;
 80056f0:	4b2f      	ldr	r3, [pc, #188]	; (80057b0 <_Z12shooter_basev+0x558>)
 80056f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	4b36      	ldr	r3, [pc, #216]	; (80057d4 <_Z12shooter_basev+0x57c>)
 80056fc:	f7fb f9ba 	bl	8000a74 <__aeabi_dcmplt>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d006      	beq.n	8005714 <_Z12shooter_basev+0x4bc>
 8005706:	4934      	ldr	r1, [pc, #208]	; (80057d8 <_Z12shooter_basev+0x580>)
 8005708:	a319      	add	r3, pc, #100	; (adr r3, 8005770 <_Z12shooter_basev+0x518>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	e9c1 2300 	strd	r2, r3, [r1]
 8005712:	e005      	b.n	8005720 <_Z12shooter_basev+0x4c8>
		else speed_ev = 0.1;
 8005714:	4930      	ldr	r1, [pc, #192]	; (80057d8 <_Z12shooter_basev+0x580>)
 8005716:	a318      	add	r3, pc, #96	; (adr r3, 8005778 <_Z12shooter_basev+0x520>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if(ut_ev>0){
 8005720:	4b2b      	ldr	r3, [pc, #172]	; (80057d0 <_Z12shooter_basev+0x578>)
 8005722:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	f7fb f9bf 	bl	8000ab0 <__aeabi_dcmpgt>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d059      	beq.n	80057ec <_Z12shooter_basev+0x594>
		if(angle_ev < 20)	speed_ev = 0.8;
 8005738:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <_Z12shooter_basev+0x558>)
 800573a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	4b26      	ldr	r3, [pc, #152]	; (80057dc <_Z12shooter_basev+0x584>)
 8005744:	f7fb f996 	bl	8000a74 <__aeabi_dcmplt>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d048      	beq.n	80057e0 <_Z12shooter_basev+0x588>
 800574e:	4922      	ldr	r1, [pc, #136]	; (80057d8 <_Z12shooter_basev+0x580>)
 8005750:	a30b      	add	r3, pc, #44	; (adr r3, 8005780 <_Z12shooter_basev+0x528>)
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	e9c1 2300 	strd	r2, r3, [r1]
 800575a:	e047      	b.n	80057ec <_Z12shooter_basev+0x594>
 800575c:	f3af 8000 	nop.w
 8005760:	00000000 	.word	0x00000000
 8005764:	40d38800 	.word	0x40d38800
 8005768:	d2f1a9fc 	.word	0xd2f1a9fc
 800576c:	3f50624d 	.word	0x3f50624d
 8005770:	47ae147b 	.word	0x47ae147b
 8005774:	3fb47ae1 	.word	0x3fb47ae1
 8005778:	9999999a 	.word	0x9999999a
 800577c:	3fb99999 	.word	0x3fb99999
 8005780:	9999999a 	.word	0x9999999a
 8005784:	3fe99999 	.word	0x3fe99999
 8005788:	20001b20 	.word	0x20001b20
 800578c:	40020400 	.word	0x40020400
 8005790:	200002e4 	.word	0x200002e4
 8005794:	20001b30 	.word	0x20001b30
 8005798:	20001b00 	.word	0x20001b00
 800579c:	20001af8 	.word	0x20001af8
 80057a0:	200001c4 	.word	0x200001c4
 80057a4:	20001ad6 	.word	0x20001ad6
 80057a8:	40af4000 	.word	0x40af4000
 80057ac:	40768000 	.word	0x40768000
 80057b0:	20001af0 	.word	0x20001af0
 80057b4:	20001ae0 	.word	0x20001ae0
 80057b8:	20001b08 	.word	0x20001b08
 80057bc:	20001b18 	.word	0x20001b18
 80057c0:	20000030 	.word	0x20000030
 80057c4:	20000038 	.word	0x20000038
 80057c8:	20001b38 	.word	0x20001b38
 80057cc:	20000040 	.word	0x20000040
 80057d0:	20001b28 	.word	0x20001b28
 80057d4:	40468000 	.word	0x40468000
 80057d8:	20000010 	.word	0x20000010
 80057dc:	40340000 	.word	0x40340000
		else speed_ev = 1.0;
 80057e0:	495f      	ldr	r1, [pc, #380]	; (8005960 <_Z12shooter_basev+0x708>)
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	4b5f      	ldr	r3, [pc, #380]	; (8005964 <_Z12shooter_basev+0x70c>)
 80057e8:	e9c1 2300 	strd	r2, r3, [r1]
	}


	if(ut_ev > speed_ev) ut_ev = speed_ev;
 80057ec:	4b5e      	ldr	r3, [pc, #376]	; (8005968 <_Z12shooter_basev+0x710>)
 80057ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057f2:	4b5b      	ldr	r3, [pc, #364]	; (8005960 <_Z12shooter_basev+0x708>)
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f7fb f95a 	bl	8000ab0 <__aeabi_dcmpgt>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d006      	beq.n	8005810 <_Z12shooter_basev+0x5b8>
 8005802:	4b57      	ldr	r3, [pc, #348]	; (8005960 <_Z12shooter_basev+0x708>)
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	4957      	ldr	r1, [pc, #348]	; (8005968 <_Z12shooter_basev+0x710>)
 800580a:	e9c1 2300 	strd	r2, r3, [r1]
 800580e:	e019      	b.n	8005844 <_Z12shooter_basev+0x5ec>
	else if(ut_ev < -speed_ev) ut_ev = -speed_ev;
 8005810:	4b53      	ldr	r3, [pc, #332]	; (8005960 <_Z12shooter_basev+0x708>)
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	60ba      	str	r2, [r7, #8]
 8005818:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	4b52      	ldr	r3, [pc, #328]	; (8005968 <_Z12shooter_basev+0x710>)
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005828:	f7fb f942 	bl	8000ab0 <__aeabi_dcmpgt>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d008      	beq.n	8005844 <_Z12shooter_basev+0x5ec>
 8005832:	4b4b      	ldr	r3, [pc, #300]	; (8005960 <_Z12shooter_basev+0x708>)
 8005834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005838:	4690      	mov	r8, r2
 800583a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800583e:	4b4a      	ldr	r3, [pc, #296]	; (8005968 <_Z12shooter_basev+0x710>)
 8005840:	e9c3 8900 	strd	r8, r9, [r3]

	if(ut_ev>0){
 8005844:	4b48      	ldr	r3, [pc, #288]	; (8005968 <_Z12shooter_basev+0x710>)
 8005846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	f7fb f92d 	bl	8000ab0 <__aeabi_dcmpgt>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <_Z12shooter_basev+0x61a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800585c:	2200      	movs	r2, #0
 800585e:	2101      	movs	r1, #1
 8005860:	4842      	ldr	r0, [pc, #264]	; (800596c <_Z12shooter_basev+0x714>)
 8005862:	f002 f8a7 	bl	80079b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8005866:	2201      	movs	r2, #1
 8005868:	2102      	movs	r1, #2
 800586a:	4840      	ldr	r0, [pc, #256]	; (800596c <_Z12shooter_basev+0x714>)
 800586c:	f002 f8a2 	bl	80079b4 <HAL_GPIO_WritePin>
 8005870:	e02c      	b.n	80058cc <_Z12shooter_basev+0x674>
	}
	else if(ut_ev<0){
 8005872:	4b3d      	ldr	r3, [pc, #244]	; (8005968 <_Z12shooter_basev+0x710>)
 8005874:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	f7fb f8f8 	bl	8000a74 <__aeabi_dcmplt>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <_Z12shooter_basev+0x648>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800588a:	2201      	movs	r2, #1
 800588c:	2101      	movs	r1, #1
 800588e:	4837      	ldr	r0, [pc, #220]	; (800596c <_Z12shooter_basev+0x714>)
 8005890:	f002 f890 	bl	80079b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8005894:	2200      	movs	r2, #0
 8005896:	2102      	movs	r1, #2
 8005898:	4834      	ldr	r0, [pc, #208]	; (800596c <_Z12shooter_basev+0x714>)
 800589a:	f002 f88b 	bl	80079b4 <HAL_GPIO_WritePin>
 800589e:	e015      	b.n	80058cc <_Z12shooter_basev+0x674>
	}
	else if(ut_ev==0){
 80058a0:	4b31      	ldr	r3, [pc, #196]	; (8005968 <_Z12shooter_basev+0x710>)
 80058a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	f7fb f8d7 	bl	8000a60 <__aeabi_dcmpeq>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <_Z12shooter_basev+0x674>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80058b8:	2200      	movs	r2, #0
 80058ba:	2101      	movs	r1, #1
 80058bc:	482b      	ldr	r0, [pc, #172]	; (800596c <_Z12shooter_basev+0x714>)
 80058be:	f002 f879 	bl	80079b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80058c2:	2200      	movs	r2, #0
 80058c4:	2102      	movs	r1, #2
 80058c6:	4829      	ldr	r0, [pc, #164]	; (800596c <_Z12shooter_basev+0x714>)
 80058c8:	f002 f874 	bl	80079b4 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,fabs(ut_ev)*20000);
 80058cc:	4b26      	ldr	r3, [pc, #152]	; (8005968 <_Z12shooter_basev+0x710>)
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	603a      	str	r2, [r7, #0]
 80058d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058d8:	607b      	str	r3, [r7, #4]
 80058da:	a31f      	add	r3, pc, #124	; (adr r3, 8005958 <_Z12shooter_basev+0x700>)
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058e4:	f7fa fe54 	bl	8000590 <__aeabi_dmul>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4920      	ldr	r1, [pc, #128]	; (8005970 <_Z12shooter_basev+0x718>)
 80058ee:	680c      	ldr	r4, [r1, #0]
 80058f0:	4610      	mov	r0, r2
 80058f2:	4619      	mov	r1, r3
 80058f4:	f7fb f8e6 	bl	8000ac4 <__aeabi_d2uiz>
 80058f8:	4603      	mov	r3, r0
 80058fa:	6363      	str	r3, [r4, #52]	; 0x34

	//report set
	if(last_et_ev == et_ev  && ev_ok < 222) ev_ok++;
 80058fc:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <_Z12shooter_basev+0x71c>)
 80058fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005902:	4b1d      	ldr	r3, [pc, #116]	; (8005978 <_Z12shooter_basev+0x720>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	f7fb f8aa 	bl	8000a60 <__aeabi_dcmpeq>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <_Z12shooter_basev+0x6ce>
 8005912:	4b1a      	ldr	r3, [pc, #104]	; (800597c <_Z12shooter_basev+0x724>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2bdd      	cmp	r3, #221	; 0xdd
 8005918:	dc05      	bgt.n	8005926 <_Z12shooter_basev+0x6ce>
 800591a:	4b18      	ldr	r3, [pc, #96]	; (800597c <_Z12shooter_basev+0x724>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3301      	adds	r3, #1
 8005920:	4a16      	ldr	r2, [pc, #88]	; (800597c <_Z12shooter_basev+0x724>)
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	e00d      	b.n	8005942 <_Z12shooter_basev+0x6ea>
	else if(last_et_ev != et_ev) ev_ok = 0;
 8005926:	4b13      	ldr	r3, [pc, #76]	; (8005974 <_Z12shooter_basev+0x71c>)
 8005928:	e9d3 0100 	ldrd	r0, r1, [r3]
 800592c:	4b12      	ldr	r3, [pc, #72]	; (8005978 <_Z12shooter_basev+0x720>)
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	f7fb f895 	bl	8000a60 <__aeabi_dcmpeq>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <_Z12shooter_basev+0x6ea>
 800593c:	4b0f      	ldr	r3, [pc, #60]	; (800597c <_Z12shooter_basev+0x724>)
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]

	//record et
	last_et_ev = et_ev;
 8005942:	4b0d      	ldr	r3, [pc, #52]	; (8005978 <_Z12shooter_basev+0x720>)
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	490a      	ldr	r1, [pc, #40]	; (8005974 <_Z12shooter_basev+0x71c>)
 800594a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800594e:	bf00      	nop
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005958:	00000000 	.word	0x00000000
 800595c:	40d38800 	.word	0x40d38800
 8005960:	20000010 	.word	0x20000010
 8005964:	3ff00000 	.word	0x3ff00000
 8005968:	20001b28 	.word	0x20001b28
 800596c:	40020800 	.word	0x40020800
 8005970:	200002e4 	.word	0x200002e4
 8005974:	20001b38 	.word	0x20001b38
 8005978:	20001b08 	.word	0x20001b08
 800597c:	20001afc 	.word	0x20001afc

08005980 <_Z5Resetv>:
int num = 0;
int first = 1;
int reset_hz = 0.0;
int reset_ev = 0.0;

void Reset(){
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
	//horizontal angle
	enc_hz = __HAL_TIM_GetCounter(&htim2);
 8005984:	4b94      	ldr	r3, [pc, #592]	; (8005bd8 <_Z5Resetv+0x258>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	b21a      	sxth	r2, r3
 800598c:	4b93      	ldr	r3, [pc, #588]	; (8005bdc <_Z5Resetv+0x25c>)
 800598e:	801a      	strh	r2, [r3, #0]
	angle_hz += 360*((double)enc_hz/(4*resolution_hz*ratio_hz))*2;	//PV
 8005990:	4b92      	ldr	r3, [pc, #584]	; (8005bdc <_Z5Resetv+0x25c>)
 8005992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005996:	4618      	mov	r0, r3
 8005998:	f7fa fd90 	bl	80004bc <__aeabi_i2d>
 800599c:	a38c      	add	r3, pc, #560	; (adr r3, 8005bd0 <_Z5Resetv+0x250>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f7fa ff1f 	bl	80007e4 <__aeabi_ddiv>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4610      	mov	r0, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	4b8b      	ldr	r3, [pc, #556]	; (8005be0 <_Z5Resetv+0x260>)
 80059b4:	f7fa fdec 	bl	8000590 <__aeabi_dmul>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4610      	mov	r0, r2
 80059be:	4619      	mov	r1, r3
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	f7fa fc2e 	bl	8000224 <__adddf3>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4610      	mov	r0, r2
 80059ce:	4619      	mov	r1, r3
 80059d0:	4b84      	ldr	r3, [pc, #528]	; (8005be4 <_Z5Resetv+0x264>)
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	f7fa fc25 	bl	8000224 <__adddf3>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4981      	ldr	r1, [pc, #516]	; (8005be4 <_Z5Resetv+0x264>)
 80059e0:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCounter(&htim2, 0);
 80059e4:	4b7c      	ldr	r3, [pc, #496]	; (8005bd8 <_Z5Resetv+0x258>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2200      	movs	r2, #0
 80059ea:	625a      	str	r2, [r3, #36]	; 0x24

	if(hz_origin == 1){
 80059ec:	4b7e      	ldr	r3, [pc, #504]	; (8005be8 <_Z5Resetv+0x268>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	f040 8087 	bne.w	8005b04 <_Z5Resetv+0x184>
		if(angle_hz > 0 && first == 0){
 80059f6:	4b7b      	ldr	r3, [pc, #492]	; (8005be4 <_Z5Resetv+0x264>)
 80059f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	f7fb f854 	bl	8000ab0 <__aeabi_dcmpgt>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d015      	beq.n	8005a3a <_Z5Resetv+0xba>
 8005a0e:	4b77      	ldr	r3, [pc, #476]	; (8005bec <_Z5Resetv+0x26c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d111      	bne.n	8005a3a <_Z5Resetv+0xba>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8005a16:	2200      	movs	r2, #0
 8005a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a1c:	4874      	ldr	r0, [pc, #464]	; (8005bf0 <_Z5Resetv+0x270>)
 8005a1e:	f001 ffc9 	bl	80079b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8005a22:	2201      	movs	r2, #1
 8005a24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a28:	4871      	ldr	r0, [pc, #452]	; (8005bf0 <_Z5Resetv+0x270>)
 8005a2a:	f001 ffc3 	bl	80079b4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,0.4*20000);
 8005a2e:	4b71      	ldr	r3, [pc, #452]	; (8005bf4 <_Z5Resetv+0x274>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38
 8005a38:	e07b      	b.n	8005b32 <_Z5Resetv+0x1b2>
		}
		else if(angle_hz < 0 && first == 0){
 8005a3a:	4b6a      	ldr	r3, [pc, #424]	; (8005be4 <_Z5Resetv+0x264>)
 8005a3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	f7fb f814 	bl	8000a74 <__aeabi_dcmplt>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d015      	beq.n	8005a7e <_Z5Resetv+0xfe>
 8005a52:	4b66      	ldr	r3, [pc, #408]	; (8005bec <_Z5Resetv+0x26c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d111      	bne.n	8005a7e <_Z5Resetv+0xfe>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a60:	4863      	ldr	r0, [pc, #396]	; (8005bf0 <_Z5Resetv+0x270>)
 8005a62:	f001 ffa7 	bl	80079b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8005a66:	2200      	movs	r2, #0
 8005a68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a6c:	4860      	ldr	r0, [pc, #384]	; (8005bf0 <_Z5Resetv+0x270>)
 8005a6e:	f001 ffa1 	bl	80079b4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,0.4*20000);
 8005a72:	4b60      	ldr	r3, [pc, #384]	; (8005bf4 <_Z5Resetv+0x274>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
 8005a7c:	e059      	b.n	8005b32 <_Z5Resetv+0x1b2>
		}
		else if(first == 1){
 8005a7e:	4b5b      	ldr	r3, [pc, #364]	; (8005bec <_Z5Resetv+0x26c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d155      	bne.n	8005b32 <_Z5Resetv+0x1b2>
//			reset_ev = 10;
//			reset_ev = 5;
			num++;
 8005a86:	4b5c      	ldr	r3, [pc, #368]	; (8005bf8 <_Z5Resetv+0x278>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	4a5a      	ldr	r2, [pc, #360]	; (8005bf8 <_Z5Resetv+0x278>)
 8005a8e:	6013      	str	r3, [r2, #0]
			if(num < 5000){
 8005a90:	4b59      	ldr	r3, [pc, #356]	; (8005bf8 <_Z5Resetv+0x278>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f241 3287 	movw	r2, #4999	; 0x1387
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	dc11      	bgt.n	8005ac0 <_Z5Resetv+0x140>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005aa2:	4853      	ldr	r0, [pc, #332]	; (8005bf0 <_Z5Resetv+0x270>)
 8005aa4:	f001 ff86 	bl	80079b4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005aae:	4850      	ldr	r0, [pc, #320]	; (8005bf0 <_Z5Resetv+0x270>)
 8005ab0:	f001 ff80 	bl	80079b4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,0.4*20000);
 8005ab4:	4b4f      	ldr	r3, [pc, #316]	; (8005bf4 <_Z5Resetv+0x274>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38
 8005abe:	e038      	b.n	8005b32 <_Z5Resetv+0x1b2>
			}
			else if(num < 10000 && num >= 5000){
 8005ac0:	4b4d      	ldr	r3, [pc, #308]	; (8005bf8 <_Z5Resetv+0x278>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f242 720f 	movw	r2, #9999	; 0x270f
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	dc17      	bgt.n	8005afc <_Z5Resetv+0x17c>
 8005acc:	4b4a      	ldr	r3, [pc, #296]	; (8005bf8 <_Z5Resetv+0x278>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f241 3287 	movw	r2, #4999	; 0x1387
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	dd11      	ble.n	8005afc <_Z5Resetv+0x17c>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ade:	4844      	ldr	r0, [pc, #272]	; (8005bf0 <_Z5Resetv+0x270>)
 8005ae0:	f001 ff68 	bl	80079b4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005aea:	4841      	ldr	r0, [pc, #260]	; (8005bf0 <_Z5Resetv+0x270>)
 8005aec:	f001 ff62 	bl	80079b4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,0.4*20000);
 8005af0:	4b40      	ldr	r3, [pc, #256]	; (8005bf4 <_Z5Resetv+0x274>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
 8005afa:	e01a      	b.n	8005b32 <_Z5Resetv+0x1b2>
			}
			else{
				num = 0;
 8005afc:	4b3e      	ldr	r3, [pc, #248]	; (8005bf8 <_Z5Resetv+0x278>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	e016      	b.n	8005b32 <_Z5Resetv+0x1b2>
			}
		}
	}
	else{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8005b04:	2200      	movs	r2, #0
 8005b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b0a:	4839      	ldr	r0, [pc, #228]	; (8005bf0 <_Z5Resetv+0x270>)
 8005b0c:	f001 ff52 	bl	80079b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8005b10:	2200      	movs	r2, #0
 8005b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b16:	4836      	ldr	r0, [pc, #216]	; (8005bf0 <_Z5Resetv+0x270>)
 8005b18:	f001 ff4c 	bl	80079b4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,0);
 8005b1c:	4b35      	ldr	r3, [pc, #212]	; (8005bf4 <_Z5Resetv+0x274>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2200      	movs	r2, #0
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
		angle_hz = 0;
 8005b24:	492f      	ldr	r1, [pc, #188]	; (8005be4 <_Z5Resetv+0x264>)
 8005b26:	f04f 0200 	mov.w	r2, #0
 8005b2a:	f04f 0300 	mov.w	r3, #0
 8005b2e:	e9c1 2300 	strd	r2, r3, [r1]
	}

	//elevation angle
	enc_ev = __HAL_TIM_GetCounter(&htim3);
 8005b32:	4b32      	ldr	r3, [pc, #200]	; (8005bfc <_Z5Resetv+0x27c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	b21a      	sxth	r2, r3
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <_Z5Resetv+0x280>)
 8005b3c:	801a      	strh	r2, [r3, #0]
	angle_ev += 360*((double)enc_ev/(4*resolution_ev*ratio_ev))*2;	//PV
 8005b3e:	4b30      	ldr	r3, [pc, #192]	; (8005c00 <_Z5Resetv+0x280>)
 8005b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fa fcb9 	bl	80004bc <__aeabi_i2d>
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	4b2d      	ldr	r3, [pc, #180]	; (8005c04 <_Z5Resetv+0x284>)
 8005b50:	f7fa fe48 	bl	80007e4 <__aeabi_ddiv>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	4b1f      	ldr	r3, [pc, #124]	; (8005be0 <_Z5Resetv+0x260>)
 8005b62:	f7fa fd15 	bl	8000590 <__aeabi_dmul>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	f7fa fb57 	bl	8000224 <__adddf3>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <_Z5Resetv+0x288>)
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f7fa fb4e 	bl	8000224 <__adddf3>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	491e      	ldr	r1, [pc, #120]	; (8005c08 <_Z5Resetv+0x288>)
 8005b8e:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCounter(&htim3, 0);
 8005b92:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <_Z5Resetv+0x27c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2200      	movs	r2, #0
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24

	if(hz_origin == 0){
 8005b9a:	4b13      	ldr	r3, [pc, #76]	; (8005be8 <_Z5Resetv+0x268>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d14d      	bne.n	8005c3e <_Z5Resetv+0x2be>
		if(ev_origin == 0){
 8005ba2:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <_Z5Resetv+0x28c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d134      	bne.n	8005c14 <_Z5Resetv+0x294>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8005baa:	2201      	movs	r2, #1
 8005bac:	2101      	movs	r1, #1
 8005bae:	4818      	ldr	r0, [pc, #96]	; (8005c10 <_Z5Resetv+0x290>)
 8005bb0:	f001 ff00 	bl	80079b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2102      	movs	r1, #2
 8005bb8:	4815      	ldr	r0, [pc, #84]	; (8005c10 <_Z5Resetv+0x290>)
 8005bba:	f001 fefb 	bl	80079b4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0.15*20000);
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <_Z5Resetv+0x274>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005bc6:	635a      	str	r2, [r3, #52]	; 0x34
 8005bc8:	e039      	b.n	8005c3e <_Z5Resetv+0x2be>
 8005bca:	bf00      	nop
 8005bcc:	f3af 8000 	nop.w
 8005bd0:	00000000 	.word	0x00000000
 8005bd4:	40d77000 	.word	0x40d77000
 8005bd8:	2000017c 	.word	0x2000017c
 8005bdc:	20001ad4 	.word	0x20001ad4
 8005be0:	40768000 	.word	0x40768000
 8005be4:	20001ae8 	.word	0x20001ae8
 8005be8:	20001b40 	.word	0x20001b40
 8005bec:	20000068 	.word	0x20000068
 8005bf0:	40020400 	.word	0x40020400
 8005bf4:	200002e4 	.word	0x200002e4
 8005bf8:	20001b4c 	.word	0x20001b4c
 8005bfc:	200001c4 	.word	0x200001c4
 8005c00:	20001ad6 	.word	0x20001ad6
 8005c04:	40af4000 	.word	0x40af4000
 8005c08:	20001af0 	.word	0x20001af0
 8005c0c:	20001b44 	.word	0x20001b44
 8005c10:	40020800 	.word	0x40020800

		}
		else{
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8005c14:	2200      	movs	r2, #0
 8005c16:	2101      	movs	r1, #1
 8005c18:	481e      	ldr	r0, [pc, #120]	; (8005c94 <_Z5Resetv+0x314>)
 8005c1a:	f001 fecb 	bl	80079b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2102      	movs	r1, #2
 8005c22:	481c      	ldr	r0, [pc, #112]	; (8005c94 <_Z5Resetv+0x314>)
 8005c24:	f001 fec6 	bl	80079b4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <_Z5Resetv+0x318>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	635a      	str	r2, [r3, #52]	; 0x34
			angle_ev = 0;
 8005c30:	491a      	ldr	r1, [pc, #104]	; (8005c9c <_Z5Resetv+0x31c>)
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}


	if(hz_origin == 0 && ev_origin == 1){
 8005c3e:	4b18      	ldr	r3, [pc, #96]	; (8005ca0 <_Z5Resetv+0x320>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d123      	bne.n	8005c8e <_Z5Resetv+0x30e>
 8005c46:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <_Z5Resetv+0x324>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d11f      	bne.n	8005c8e <_Z5Resetv+0x30e>
//		reset_hz = 0;
//		reset_ev = 0;
		target_hz = 0;
 8005c4e:	4916      	ldr	r1, [pc, #88]	; (8005ca8 <_Z5Resetv+0x328>)
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	e9c1 2300 	strd	r2, r3, [r1]
		target_ev = 0;
 8005c5c:	4913      	ldr	r1, [pc, #76]	; (8005cac <_Z5Resetv+0x32c>)
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	e9c1 2300 	strd	r2, r3, [r1]
		//buffer
		buffer_time++;
 8005c6a:	4b11      	ldr	r3, [pc, #68]	; (8005cb0 <_Z5Resetv+0x330>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <_Z5Resetv+0x330>)
 8005c72:	6013      	str	r3, [r2, #0]
		if(buffer_time >= 222){
 8005c74:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <_Z5Resetv+0x330>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2bdd      	cmp	r3, #221	; 0xdd
 8005c7a:	dd08      	ble.n	8005c8e <_Z5Resetv+0x30e>
			buffer_time = 0;
 8005c7c:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <_Z5Resetv+0x330>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
			first = 0;
 8005c82:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <_Z5Resetv+0x334>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
			reset = 0;
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <_Z5Resetv+0x338>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
		}
	}
}
 8005c8e:	bf00      	nop
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40020800 	.word	0x40020800
 8005c98:	200002e4 	.word	0x200002e4
 8005c9c:	20001af0 	.word	0x20001af0
 8005ca0:	20001b40 	.word	0x20001b40
 8005ca4:	20001b44 	.word	0x20001b44
 8005ca8:	20001ad8 	.word	0x20001ad8
 8005cac:	20001ae0 	.word	0x20001ae0
 8005cb0:	20001b48 	.word	0x20001b48
 8005cb4:	20000068 	.word	0x20000068
 8005cb8:	2000004c 	.word	0x2000004c

08005cbc <_Z10base_limitv>:


void base_limit(){
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
	//elevation angle limit
	if(target_ev <= 0)	target_ev = 0;
 8005cc0:	4b25      	ldr	r3, [pc, #148]	; (8005d58 <_Z10base_limitv+0x9c>)
 8005cc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	f7fa fedb 	bl	8000a88 <__aeabi_dcmple>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d007      	beq.n	8005ce8 <_Z10base_limitv+0x2c>
 8005cd8:	491f      	ldr	r1, [pc, #124]	; (8005d58 <_Z10base_limitv+0x9c>)
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	e9c1 2300 	strd	r2, r3, [r1]
 8005ce6:	e010      	b.n	8005d0a <_Z10base_limitv+0x4e>
	else if (target_ev >= ev_limit)	target_ev = ev_limit;
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <_Z10base_limitv+0x9c>)
 8005cea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cee:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <_Z10base_limitv+0xa0>)
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f7fa fed2 	bl	8000a9c <__aeabi_dcmpge>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <_Z10base_limitv+0x4e>
 8005cfe:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <_Z10base_limitv+0xa0>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	4914      	ldr	r1, [pc, #80]	; (8005d58 <_Z10base_limitv+0x9c>)
 8005d06:	e9c1 2300 	strd	r2, r3, [r1]
	//horizontal angle limit
	if(target_hz >= hz_pos_limit)	target_hz = hz_pos_limit;
 8005d0a:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <_Z10base_limitv+0xa4>)
 8005d0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d10:	4b14      	ldr	r3, [pc, #80]	; (8005d64 <_Z10base_limitv+0xa8>)
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	f7fa fec1 	bl	8000a9c <__aeabi_dcmpge>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <_Z10base_limitv+0x72>
 8005d20:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <_Z10base_limitv+0xa8>)
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	490e      	ldr	r1, [pc, #56]	; (8005d60 <_Z10base_limitv+0xa4>)
 8005d28:	e9c1 2300 	strd	r2, r3, [r1]
	else if(target_hz <= hz_neg_limit)	target_hz = hz_neg_limit;
}
 8005d2c:	e011      	b.n	8005d52 <_Z10base_limitv+0x96>
	else if(target_hz <= hz_neg_limit)	target_hz = hz_neg_limit;
 8005d2e:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <_Z10base_limitv+0xa4>)
 8005d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <_Z10base_limitv+0xac>)
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	f7fa fea5 	bl	8000a88 <__aeabi_dcmple>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d100      	bne.n	8005d46 <_Z10base_limitv+0x8a>
}
 8005d44:	e005      	b.n	8005d52 <_Z10base_limitv+0x96>
	else if(target_hz <= hz_neg_limit)	target_hz = hz_neg_limit;
 8005d46:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <_Z10base_limitv+0xac>)
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	4904      	ldr	r1, [pc, #16]	; (8005d60 <_Z10base_limitv+0xa4>)
 8005d4e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005d52:	bf00      	nop
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20001ae0 	.word	0x20001ae0
 8005d5c:	20000060 	.word	0x20000060
 8005d60:	20001ad8 	.word	0x20001ad8
 8005d64:	20000050 	.word	0x20000050
 8005d68:	20000058 	.word	0x20000058
 8005d6c:	00000000 	.word	0x00000000

08005d70 <_Z6Scriptv>:
double ros_st = 0.0;
double ros_hz = 0.0;
double ros_ev = 0.0;
int time = 0;

void Script(){
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
	switch(step){
 8005d74:	4b6e      	ldr	r3, [pc, #440]	; (8005f30 <_Z6Scriptv+0x1c0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	2b09      	cmp	r3, #9
 8005d7c:	f200 80d2 	bhi.w	8005f24 <_Z6Scriptv+0x1b4>
 8005d80:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <_Z6Scriptv+0x18>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005eef 	.word	0x08005eef
 8005d8c:	08005ec9 	.word	0x08005ec9
 8005d90:	08005db1 	.word	0x08005db1
 8005d94:	08005ddf 	.word	0x08005ddf
 8005d98:	08005dff 	.word	0x08005dff
 8005d9c:	08005e23 	.word	0x08005e23
 8005da0:	08005e49 	.word	0x08005e49
 8005da4:	08005e6b 	.word	0x08005e6b
 8005da8:	08005e87 	.word	0x08005e87
 8005dac:	08005ead 	.word	0x08005ead
		case 1:
			time++;
 8005db0:	4b60      	ldr	r3, [pc, #384]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3301      	adds	r3, #1
 8005db6:	4a5f      	ldr	r2, [pc, #380]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005db8:	6013      	str	r3, [r2, #0]
			if(time>50){
 8005dba:	4b5e      	ldr	r3, [pc, #376]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b32      	cmp	r3, #50	; 0x32
 8005dc0:	f340 80a1 	ble.w	8005f06 <_Z6Scriptv+0x196>
				target_length = 90;
 8005dc4:	495c      	ldr	r1, [pc, #368]	; (8005f38 <_Z6Scriptv+0x1c8>)
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	4b5c      	ldr	r3, [pc, #368]	; (8005f3c <_Z6Scriptv+0x1cc>)
 8005dcc:	e9c1 2300 	strd	r2, r3, [r1]
				time = 0;
 8005dd0:	4b58      	ldr	r3, [pc, #352]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
				step = 2;
 8005dd6:	4b56      	ldr	r3, [pc, #344]	; (8005f30 <_Z6Scriptv+0x1c0>)
 8005dd8:	2202      	movs	r2, #2
 8005dda:	601a      	str	r2, [r3, #0]
			}
			break;
 8005ddc:	e093      	b.n	8005f06 <_Z6Scriptv+0x196>
		case 2:
			Reset();
 8005dde:	f7ff fdcf 	bl	8005980 <_Z5Resetv>
			if(hz_origin == 0 && ev_origin == 1)	step = 3;
 8005de2:	4b57      	ldr	r3, [pc, #348]	; (8005f40 <_Z6Scriptv+0x1d0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 808f 	bne.w	8005f0a <_Z6Scriptv+0x19a>
 8005dec:	4b55      	ldr	r3, [pc, #340]	; (8005f44 <_Z6Scriptv+0x1d4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	f040 808a 	bne.w	8005f0a <_Z6Scriptv+0x19a>
 8005df6:	4b4e      	ldr	r3, [pc, #312]	; (8005f30 <_Z6Scriptv+0x1c0>)
 8005df8:	2203      	movs	r2, #3
 8005dfa:	601a      	str	r2, [r3, #0]
			break;
 8005dfc:	e085      	b.n	8005f0a <_Z6Scriptv+0x19a>
		case 3:
			target_ev = 80;
 8005dfe:	4952      	ldr	r1, [pc, #328]	; (8005f48 <_Z6Scriptv+0x1d8>)
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	4b51      	ldr	r3, [pc, #324]	; (8005f4c <_Z6Scriptv+0x1dc>)
 8005e06:	e9c1 2300 	strd	r2, r3, [r1]
			if(st_set == 1 && ev_ok == 222)	step = 4;
 8005e0a:	4b51      	ldr	r3, [pc, #324]	; (8005f50 <_Z6Scriptv+0x1e0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d17d      	bne.n	8005f0e <_Z6Scriptv+0x19e>
 8005e12:	4b50      	ldr	r3, [pc, #320]	; (8005f54 <_Z6Scriptv+0x1e4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2bde      	cmp	r3, #222	; 0xde
 8005e18:	d179      	bne.n	8005f0e <_Z6Scriptv+0x19e>
 8005e1a:	4b45      	ldr	r3, [pc, #276]	; (8005f30 <_Z6Scriptv+0x1c0>)
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	601a      	str	r2, [r3, #0]
			break;
 8005e20:	e075      	b.n	8005f0e <_Z6Scriptv+0x19e>
		case 4:
			seat_mode = 2;
 8005e22:	4b4d      	ldr	r3, [pc, #308]	; (8005f58 <_Z6Scriptv+0x1e8>)
 8005e24:	2202      	movs	r2, #2
 8005e26:	601a      	str	r2, [r3, #0]
			time++;
 8005e28:	4b42      	ldr	r3, [pc, #264]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	4a41      	ldr	r2, [pc, #260]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005e30:	6013      	str	r3, [r2, #0]
			if(time>200){
 8005e32:	4b40      	ldr	r3, [pc, #256]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2bc8      	cmp	r3, #200	; 0xc8
 8005e38:	dd6b      	ble.n	8005f12 <_Z6Scriptv+0x1a2>
				time = 0;
 8005e3a:	4b3e      	ldr	r3, [pc, #248]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
				step = 5;
 8005e40:	4b3b      	ldr	r3, [pc, #236]	; (8005f30 <_Z6Scriptv+0x1c0>)
 8005e42:	2205      	movs	r2, #5
 8005e44:	601a      	str	r2, [r3, #0]
			}
			break;
 8005e46:	e064      	b.n	8005f12 <_Z6Scriptv+0x1a2>
		case 5:
			//ball drop
			time++;
 8005e48:	4b3a      	ldr	r3, [pc, #232]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	4a39      	ldr	r2, [pc, #228]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005e50:	6013      	str	r3, [r2, #0]

			if(time>1000){
 8005e52:	4b38      	ldr	r3, [pc, #224]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e5a:	dd5c      	ble.n	8005f16 <_Z6Scriptv+0x1a6>
				time = 0;
 8005e5c:	4b35      	ldr	r3, [pc, #212]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
				step = 6;
 8005e62:	4b33      	ldr	r3, [pc, #204]	; (8005f30 <_Z6Scriptv+0x1c0>)
 8005e64:	2206      	movs	r2, #6
 8005e66:	601a      	str	r2, [r3, #0]
			}
			break;
 8005e68:	e055      	b.n	8005f16 <_Z6Scriptv+0x1a6>
		case 6:
			target_ev = 75;
 8005e6a:	4937      	ldr	r1, [pc, #220]	; (8005f48 <_Z6Scriptv+0x1d8>)
 8005e6c:	a32e      	add	r3, pc, #184	; (adr r3, 8005f28 <_Z6Scriptv+0x1b8>)
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	e9c1 2300 	strd	r2, r3, [r1]
			if(ev_ok == 222)	step = 7;
 8005e76:	4b37      	ldr	r3, [pc, #220]	; (8005f54 <_Z6Scriptv+0x1e4>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2bde      	cmp	r3, #222	; 0xde
 8005e7c:	d14d      	bne.n	8005f1a <_Z6Scriptv+0x1aa>
 8005e7e:	4b2c      	ldr	r3, [pc, #176]	; (8005f30 <_Z6Scriptv+0x1c0>)
 8005e80:	2207      	movs	r2, #7
 8005e82:	601a      	str	r2, [r3, #0]
			break;
 8005e84:	e049      	b.n	8005f1a <_Z6Scriptv+0x1aa>
		case 7:
			seat_mode = 1;
 8005e86:	4b34      	ldr	r3, [pc, #208]	; (8005f58 <_Z6Scriptv+0x1e8>)
 8005e88:	2201      	movs	r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
			time++;
 8005e8c:	4b29      	ldr	r3, [pc, #164]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3301      	adds	r3, #1
 8005e92:	4a28      	ldr	r2, [pc, #160]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005e94:	6013      	str	r3, [r2, #0]
			if(time>200){
 8005e96:	4b27      	ldr	r3, [pc, #156]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2bc8      	cmp	r3, #200	; 0xc8
 8005e9c:	dd3f      	ble.n	8005f1e <_Z6Scriptv+0x1ae>
				time = 0;
 8005e9e:	4b25      	ldr	r3, [pc, #148]	; (8005f34 <_Z6Scriptv+0x1c4>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
				step = 8;
 8005ea4:	4b22      	ldr	r3, [pc, #136]	; (8005f30 <_Z6Scriptv+0x1c0>)
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	601a      	str	r2, [r3, #0]
			}
			break;
 8005eaa:	e038      	b.n	8005f1e <_Z6Scriptv+0x1ae>
		case 8:
			Reset();
 8005eac:	f7ff fd68 	bl	8005980 <_Z5Resetv>
			if(hz_origin == 0 && ev_origin == 1)	step = 0;
 8005eb0:	4b23      	ldr	r3, [pc, #140]	; (8005f40 <_Z6Scriptv+0x1d0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d134      	bne.n	8005f22 <_Z6Scriptv+0x1b2>
 8005eb8:	4b22      	ldr	r3, [pc, #136]	; (8005f44 <_Z6Scriptv+0x1d4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d130      	bne.n	8005f22 <_Z6Scriptv+0x1b2>
 8005ec0:	4b1b      	ldr	r3, [pc, #108]	; (8005f30 <_Z6Scriptv+0x1c0>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
			break;
 8005ec6:	e02c      	b.n	8005f22 <_Z6Scriptv+0x1b2>
		case 0:
			target_length = ros_st;
 8005ec8:	4b24      	ldr	r3, [pc, #144]	; (8005f5c <_Z6Scriptv+0x1ec>)
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	491a      	ldr	r1, [pc, #104]	; (8005f38 <_Z6Scriptv+0x1c8>)
 8005ed0:	e9c1 2300 	strd	r2, r3, [r1]
			target_hz = ros_hz;
 8005ed4:	4b22      	ldr	r3, [pc, #136]	; (8005f60 <_Z6Scriptv+0x1f0>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	4922      	ldr	r1, [pc, #136]	; (8005f64 <_Z6Scriptv+0x1f4>)
 8005edc:	e9c1 2300 	strd	r2, r3, [r1]
			target_ev = ros_ev;
 8005ee0:	4b21      	ldr	r3, [pc, #132]	; (8005f68 <_Z6Scriptv+0x1f8>)
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	4918      	ldr	r1, [pc, #96]	; (8005f48 <_Z6Scriptv+0x1d8>)
 8005ee8:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8005eec:	e01a      	b.n	8005f24 <_Z6Scriptv+0x1b4>
		case -1:
			if(first == 0 && flag == 8)	step = 1;
 8005eee:	4b1f      	ldr	r3, [pc, #124]	; (8005f6c <_Z6Scriptv+0x1fc>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d116      	bne.n	8005f24 <_Z6Scriptv+0x1b4>
 8005ef6:	4b1e      	ldr	r3, [pc, #120]	; (8005f70 <_Z6Scriptv+0x200>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d112      	bne.n	8005f24 <_Z6Scriptv+0x1b4>
 8005efe:	4b0c      	ldr	r3, [pc, #48]	; (8005f30 <_Z6Scriptv+0x1c0>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
	}
}
 8005f04:	e00e      	b.n	8005f24 <_Z6Scriptv+0x1b4>
			break;
 8005f06:	bf00      	nop
 8005f08:	e00c      	b.n	8005f24 <_Z6Scriptv+0x1b4>
			break;
 8005f0a:	bf00      	nop
 8005f0c:	e00a      	b.n	8005f24 <_Z6Scriptv+0x1b4>
			break;
 8005f0e:	bf00      	nop
 8005f10:	e008      	b.n	8005f24 <_Z6Scriptv+0x1b4>
			break;
 8005f12:	bf00      	nop
 8005f14:	e006      	b.n	8005f24 <_Z6Scriptv+0x1b4>
			break;
 8005f16:	bf00      	nop
 8005f18:	e004      	b.n	8005f24 <_Z6Scriptv+0x1b4>
			break;
 8005f1a:	bf00      	nop
 8005f1c:	e002      	b.n	8005f24 <_Z6Scriptv+0x1b4>
			break;
 8005f1e:	bf00      	nop
 8005f20:	e000      	b.n	8005f24 <_Z6Scriptv+0x1b4>
			break;
 8005f22:	bf00      	nop
}
 8005f24:	bf00      	nop
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	00000000 	.word	0x00000000
 8005f2c:	4052c000 	.word	0x4052c000
 8005f30:	2000006c 	.word	0x2000006c
 8005f34:	20001b68 	.word	0x20001b68
 8005f38:	20001aa0 	.word	0x20001aa0
 8005f3c:	40568000 	.word	0x40568000
 8005f40:	20001b40 	.word	0x20001b40
 8005f44:	20001b44 	.word	0x20001b44
 8005f48:	20001ae0 	.word	0x20001ae0
 8005f4c:	40540000 	.word	0x40540000
 8005f50:	20001ad0 	.word	0x20001ad0
 8005f54:	20001afc 	.word	0x20001afc
 8005f58:	20000008 	.word	0x20000008
 8005f5c:	20001b50 	.word	0x20001b50
 8005f60:	20001b58 	.word	0x20001b58
 8005f64:	20001ad8 	.word	0x20001ad8
 8005f68:	20001b60 	.word	0x20001b60
 8005f6c:	20000068 	.word	0x20000068
 8005f70:	2000048c 	.word	0x2000048c

08005f74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f82:	4a0f      	ldr	r2, [pc, #60]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f88:	6453      	str	r3, [r2, #68]	; 0x44
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	603b      	str	r3, [r7, #0]
 8005f9a:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	4a08      	ldr	r2, [pc, #32]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fa6:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40023800 	.word	0x40023800

08005fc4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08e      	sub	sp, #56	; 0x38
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	605a      	str	r2, [r3, #4]
 8005fd6:	609a      	str	r2, [r3, #8]
 8005fd8:	60da      	str	r2, [r3, #12]
 8005fda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a4f      	ldr	r2, [pc, #316]	; (8006120 <HAL_TIM_Encoder_MspInit+0x15c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d135      	bne.n	8006052 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	623b      	str	r3, [r7, #32]
 8005fea:	4b4e      	ldr	r3, [pc, #312]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	4a4d      	ldr	r2, [pc, #308]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 8005ff0:	f043 0301 	orr.w	r3, r3, #1
 8005ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ff6:	4b4b      	ldr	r3, [pc, #300]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	623b      	str	r3, [r7, #32]
 8006000:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006002:	2300      	movs	r3, #0
 8006004:	61fb      	str	r3, [r7, #28]
 8006006:	4b47      	ldr	r3, [pc, #284]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	4a46      	ldr	r2, [pc, #280]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	6313      	str	r3, [r2, #48]	; 0x30
 8006012:	4b44      	ldr	r3, [pc, #272]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 8006014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800601e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006024:	2302      	movs	r3, #2
 8006026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006028:	2300      	movs	r3, #0
 800602a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800602c:	2300      	movs	r3, #0
 800602e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006030:	2301      	movs	r3, #1
 8006032:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006038:	4619      	mov	r1, r3
 800603a:	483b      	ldr	r0, [pc, #236]	; (8006128 <HAL_TIM_Encoder_MspInit+0x164>)
 800603c:	f001 fa1a 	bl	8007474 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8006040:	2200      	movs	r2, #0
 8006042:	2100      	movs	r1, #0
 8006044:	2018      	movs	r0, #24
 8006046:	f000 fd6c 	bl	8006b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800604a:	2018      	movs	r0, #24
 800604c:	f000 fd85 	bl	8006b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006050:	e062      	b.n	8006118 <HAL_TIM_Encoder_MspInit+0x154>
  else if(htim_encoder->Instance==TIM2)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605a:	d12c      	bne.n	80060b6 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800605c:	2300      	movs	r3, #0
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	4b30      	ldr	r3, [pc, #192]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	4a2f      	ldr	r2, [pc, #188]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	6413      	str	r3, [r2, #64]	; 0x40
 800606c:	4b2d      	ldr	r3, [pc, #180]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	4b29      	ldr	r3, [pc, #164]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	4a28      	ldr	r2, [pc, #160]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	6313      	str	r3, [r2, #48]	; 0x30
 8006088:	4b26      	ldr	r3, [pc, #152]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 800608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8006094:	2322      	movs	r3, #34	; 0x22
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006098:	2302      	movs	r3, #2
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609c:	2300      	movs	r3, #0
 800609e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060a0:	2300      	movs	r3, #0
 80060a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80060a4:	2301      	movs	r3, #1
 80060a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ac:	4619      	mov	r1, r3
 80060ae:	481e      	ldr	r0, [pc, #120]	; (8006128 <HAL_TIM_Encoder_MspInit+0x164>)
 80060b0:	f001 f9e0 	bl	8007474 <HAL_GPIO_Init>
}
 80060b4:	e030      	b.n	8006118 <HAL_TIM_Encoder_MspInit+0x154>
  else if(htim_encoder->Instance==TIM3)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1c      	ldr	r2, [pc, #112]	; (800612c <HAL_TIM_Encoder_MspInit+0x168>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d12b      	bne.n	8006118 <HAL_TIM_Encoder_MspInit+0x154>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	4b17      	ldr	r3, [pc, #92]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	4a16      	ldr	r2, [pc, #88]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 80060ca:	f043 0302 	orr.w	r3, r3, #2
 80060ce:	6413      	str	r3, [r2, #64]	; 0x40
 80060d0:	4b14      	ldr	r3, [pc, #80]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	4b10      	ldr	r3, [pc, #64]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	4a0f      	ldr	r2, [pc, #60]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	6313      	str	r3, [r2, #48]	; 0x30
 80060ec:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <HAL_TIM_Encoder_MspInit+0x160>)
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80060f8:	23c0      	movs	r3, #192	; 0xc0
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060fc:	2302      	movs	r3, #2
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006100:	2300      	movs	r3, #0
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006104:	2300      	movs	r3, #0
 8006106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006108:	2302      	movs	r3, #2
 800610a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800610c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006110:	4619      	mov	r1, r3
 8006112:	4805      	ldr	r0, [pc, #20]	; (8006128 <HAL_TIM_Encoder_MspInit+0x164>)
 8006114:	f001 f9ae 	bl	8007474 <HAL_GPIO_Init>
}
 8006118:	bf00      	nop
 800611a:	3738      	adds	r7, #56	; 0x38
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40010000 	.word	0x40010000
 8006124:	40023800 	.word	0x40023800
 8006128:	40020000 	.word	0x40020000
 800612c:	40000400 	.word	0x40000400

08006130 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a26      	ldr	r2, [pc, #152]	; (80061d8 <HAL_TIM_PWM_MspInit+0xa8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d10e      	bne.n	8006160 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	4b25      	ldr	r3, [pc, #148]	; (80061dc <HAL_TIM_PWM_MspInit+0xac>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	4a24      	ldr	r2, [pc, #144]	; (80061dc <HAL_TIM_PWM_MspInit+0xac>)
 800614c:	f043 0304 	orr.w	r3, r3, #4
 8006150:	6413      	str	r3, [r2, #64]	; 0x40
 8006152:	4b22      	ldr	r3, [pc, #136]	; (80061dc <HAL_TIM_PWM_MspInit+0xac>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800615e:	e036      	b.n	80061ce <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM8)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <HAL_TIM_PWM_MspInit+0xb0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d116      	bne.n	8006198 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800616a:	2300      	movs	r3, #0
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	4b1b      	ldr	r3, [pc, #108]	; (80061dc <HAL_TIM_PWM_MspInit+0xac>)
 8006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006172:	4a1a      	ldr	r2, [pc, #104]	; (80061dc <HAL_TIM_PWM_MspInit+0xac>)
 8006174:	f043 0302 	orr.w	r3, r3, #2
 8006178:	6453      	str	r3, [r2, #68]	; 0x44
 800617a:	4b18      	ldr	r3, [pc, #96]	; (80061dc <HAL_TIM_PWM_MspInit+0xac>)
 800617c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8006186:	2200      	movs	r2, #0
 8006188:	2100      	movs	r1, #0
 800618a:	202b      	movs	r0, #43	; 0x2b
 800618c:	f000 fcc9 	bl	8006b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8006190:	202b      	movs	r0, #43	; 0x2b
 8006192:	f000 fce2 	bl	8006b5a <HAL_NVIC_EnableIRQ>
}
 8006196:	e01a      	b.n	80061ce <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM12)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <HAL_TIM_PWM_MspInit+0xb4>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d115      	bne.n	80061ce <HAL_TIM_PWM_MspInit+0x9e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <HAL_TIM_PWM_MspInit+0xac>)
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	4a0c      	ldr	r2, [pc, #48]	; (80061dc <HAL_TIM_PWM_MspInit+0xac>)
 80061ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b0:	6413      	str	r3, [r2, #64]	; 0x40
 80061b2:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <HAL_TIM_PWM_MspInit+0xac>)
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80061be:	2200      	movs	r2, #0
 80061c0:	2100      	movs	r1, #0
 80061c2:	202b      	movs	r0, #43	; 0x2b
 80061c4:	f000 fcad 	bl	8006b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80061c8:	202b      	movs	r0, #43	; 0x2b
 80061ca:	f000 fcc6 	bl	8006b5a <HAL_NVIC_EnableIRQ>
}
 80061ce:	bf00      	nop
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40000800 	.word	0x40000800
 80061dc:	40023800 	.word	0x40023800
 80061e0:	40010400 	.word	0x40010400
 80061e4:	40001800 	.word	0x40001800

080061e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a0e      	ldr	r2, [pc, #56]	; (8006230 <HAL_TIM_Base_MspInit+0x48>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d115      	bne.n	8006226 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	4b0d      	ldr	r3, [pc, #52]	; (8006234 <HAL_TIM_Base_MspInit+0x4c>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	4a0c      	ldr	r2, [pc, #48]	; (8006234 <HAL_TIM_Base_MspInit+0x4c>)
 8006204:	f043 0308 	orr.w	r3, r3, #8
 8006208:	6413      	str	r3, [r2, #64]	; 0x40
 800620a:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <HAL_TIM_Base_MspInit+0x4c>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006216:	2200      	movs	r2, #0
 8006218:	2100      	movs	r1, #0
 800621a:	2032      	movs	r0, #50	; 0x32
 800621c:	f000 fc81 	bl	8006b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006220:	2032      	movs	r0, #50	; 0x32
 8006222:	f000 fc9a 	bl	8006b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	40000c00 	.word	0x40000c00
 8006234:	40023800 	.word	0x40023800

08006238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006240:	f107 0314 	add.w	r3, r7, #20
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	605a      	str	r2, [r3, #4]
 800624a:	609a      	str	r2, [r3, #8]
 800624c:	60da      	str	r2, [r3, #12]
 800624e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a36      	ldr	r2, [pc, #216]	; (8006330 <HAL_TIM_MspPostInit+0xf8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d11e      	bne.n	8006298 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800625a:	2300      	movs	r3, #0
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	4b35      	ldr	r3, [pc, #212]	; (8006334 <HAL_TIM_MspPostInit+0xfc>)
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	4a34      	ldr	r2, [pc, #208]	; (8006334 <HAL_TIM_MspPostInit+0xfc>)
 8006264:	f043 0302 	orr.w	r3, r3, #2
 8006268:	6313      	str	r3, [r2, #48]	; 0x30
 800626a:	4b32      	ldr	r3, [pc, #200]	; (8006334 <HAL_TIM_MspPostInit+0xfc>)
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006276:	23c0      	movs	r3, #192	; 0xc0
 8006278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800627a:	2302      	movs	r3, #2
 800627c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800627e:	2300      	movs	r3, #0
 8006280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006282:	2300      	movs	r3, #0
 8006284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006286:	2302      	movs	r3, #2
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800628a:	f107 0314 	add.w	r3, r7, #20
 800628e:	4619      	mov	r1, r3
 8006290:	4829      	ldr	r0, [pc, #164]	; (8006338 <HAL_TIM_MspPostInit+0x100>)
 8006292:	f001 f8ef 	bl	8007474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8006296:	e047      	b.n	8006328 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM8)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a27      	ldr	r2, [pc, #156]	; (800633c <HAL_TIM_MspPostInit+0x104>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d11e      	bne.n	80062e0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	4b23      	ldr	r3, [pc, #140]	; (8006334 <HAL_TIM_MspPostInit+0xfc>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	4a22      	ldr	r2, [pc, #136]	; (8006334 <HAL_TIM_MspPostInit+0xfc>)
 80062ac:	f043 0304 	orr.w	r3, r3, #4
 80062b0:	6313      	str	r3, [r2, #48]	; 0x30
 80062b2:	4b20      	ldr	r3, [pc, #128]	; (8006334 <HAL_TIM_MspPostInit+0xfc>)
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80062be:	2340      	movs	r3, #64	; 0x40
 80062c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c2:	2302      	movs	r3, #2
 80062c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ca:	2300      	movs	r3, #0
 80062cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80062ce:	2303      	movs	r3, #3
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062d2:	f107 0314 	add.w	r3, r7, #20
 80062d6:	4619      	mov	r1, r3
 80062d8:	4819      	ldr	r0, [pc, #100]	; (8006340 <HAL_TIM_MspPostInit+0x108>)
 80062da:	f001 f8cb 	bl	8007474 <HAL_GPIO_Init>
}
 80062de:	e023      	b.n	8006328 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM12)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a17      	ldr	r2, [pc, #92]	; (8006344 <HAL_TIM_MspPostInit+0x10c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d11e      	bne.n	8006328 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	4b11      	ldr	r3, [pc, #68]	; (8006334 <HAL_TIM_MspPostInit+0xfc>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	4a10      	ldr	r2, [pc, #64]	; (8006334 <HAL_TIM_MspPostInit+0xfc>)
 80062f4:	f043 0302 	orr.w	r3, r3, #2
 80062f8:	6313      	str	r3, [r2, #48]	; 0x30
 80062fa:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <HAL_TIM_MspPostInit+0xfc>)
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006306:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800630a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800630c:	2302      	movs	r3, #2
 800630e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006310:	2300      	movs	r3, #0
 8006312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006314:	2300      	movs	r3, #0
 8006316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006318:	2309      	movs	r3, #9
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800631c:	f107 0314 	add.w	r3, r7, #20
 8006320:	4619      	mov	r1, r3
 8006322:	4805      	ldr	r0, [pc, #20]	; (8006338 <HAL_TIM_MspPostInit+0x100>)
 8006324:	f001 f8a6 	bl	8007474 <HAL_GPIO_Init>
}
 8006328:	bf00      	nop
 800632a:	3728      	adds	r7, #40	; 0x28
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40000800 	.word	0x40000800
 8006334:	40023800 	.word	0x40023800
 8006338:	40020400 	.word	0x40020400
 800633c:	40010400 	.word	0x40010400
 8006340:	40020800 	.word	0x40020800
 8006344:	40001800 	.word	0x40001800

08006348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08c      	sub	sp, #48	; 0x30
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006350:	f107 031c 	add.w	r3, r7, #28
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	605a      	str	r2, [r3, #4]
 800635a:	609a      	str	r2, [r3, #8]
 800635c:	60da      	str	r2, [r3, #12]
 800635e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a79      	ldr	r2, [pc, #484]	; (800654c <HAL_UART_MspInit+0x204>)
 8006366:	4293      	cmp	r3, r2
 8006368:	f040 8094 	bne.w	8006494 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800636c:	2300      	movs	r3, #0
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	4b77      	ldr	r3, [pc, #476]	; (8006550 <HAL_UART_MspInit+0x208>)
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	4a76      	ldr	r2, [pc, #472]	; (8006550 <HAL_UART_MspInit+0x208>)
 8006376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800637a:	6413      	str	r3, [r2, #64]	; 0x40
 800637c:	4b74      	ldr	r3, [pc, #464]	; (8006550 <HAL_UART_MspInit+0x208>)
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006388:	2300      	movs	r3, #0
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	4b70      	ldr	r3, [pc, #448]	; (8006550 <HAL_UART_MspInit+0x208>)
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	4a6f      	ldr	r2, [pc, #444]	; (8006550 <HAL_UART_MspInit+0x208>)
 8006392:	f043 0301 	orr.w	r3, r3, #1
 8006396:	6313      	str	r3, [r2, #48]	; 0x30
 8006398:	4b6d      	ldr	r3, [pc, #436]	; (8006550 <HAL_UART_MspInit+0x208>)
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80063a4:	230c      	movs	r3, #12
 80063a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063a8:	2302      	movs	r3, #2
 80063aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ac:	2300      	movs	r3, #0
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063b0:	2303      	movs	r3, #3
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063b4:	2307      	movs	r3, #7
 80063b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063b8:	f107 031c 	add.w	r3, r7, #28
 80063bc:	4619      	mov	r1, r3
 80063be:	4865      	ldr	r0, [pc, #404]	; (8006554 <HAL_UART_MspInit+0x20c>)
 80063c0:	f001 f858 	bl	8007474 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80063c4:	4b64      	ldr	r3, [pc, #400]	; (8006558 <HAL_UART_MspInit+0x210>)
 80063c6:	4a65      	ldr	r2, [pc, #404]	; (800655c <HAL_UART_MspInit+0x214>)
 80063c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80063ca:	4b63      	ldr	r3, [pc, #396]	; (8006558 <HAL_UART_MspInit+0x210>)
 80063cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063d2:	4b61      	ldr	r3, [pc, #388]	; (8006558 <HAL_UART_MspInit+0x210>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063d8:	4b5f      	ldr	r3, [pc, #380]	; (8006558 <HAL_UART_MspInit+0x210>)
 80063da:	2200      	movs	r2, #0
 80063dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063de:	4b5e      	ldr	r3, [pc, #376]	; (8006558 <HAL_UART_MspInit+0x210>)
 80063e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063e6:	4b5c      	ldr	r3, [pc, #368]	; (8006558 <HAL_UART_MspInit+0x210>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063ec:	4b5a      	ldr	r3, [pc, #360]	; (8006558 <HAL_UART_MspInit+0x210>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80063f2:	4b59      	ldr	r3, [pc, #356]	; (8006558 <HAL_UART_MspInit+0x210>)
 80063f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80063fa:	4b57      	ldr	r3, [pc, #348]	; (8006558 <HAL_UART_MspInit+0x210>)
 80063fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006400:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006402:	4b55      	ldr	r3, [pc, #340]	; (8006558 <HAL_UART_MspInit+0x210>)
 8006404:	2200      	movs	r2, #0
 8006406:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006408:	4853      	ldr	r0, [pc, #332]	; (8006558 <HAL_UART_MspInit+0x210>)
 800640a:	f000 fbd3 	bl	8006bb4 <HAL_DMA_Init>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8006414:	f7fb fc6a 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a4f      	ldr	r2, [pc, #316]	; (8006558 <HAL_UART_MspInit+0x210>)
 800641c:	639a      	str	r2, [r3, #56]	; 0x38
 800641e:	4a4e      	ldr	r2, [pc, #312]	; (8006558 <HAL_UART_MspInit+0x210>)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006424:	4b4e      	ldr	r3, [pc, #312]	; (8006560 <HAL_UART_MspInit+0x218>)
 8006426:	4a4f      	ldr	r2, [pc, #316]	; (8006564 <HAL_UART_MspInit+0x21c>)
 8006428:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800642a:	4b4d      	ldr	r3, [pc, #308]	; (8006560 <HAL_UART_MspInit+0x218>)
 800642c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006430:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006432:	4b4b      	ldr	r3, [pc, #300]	; (8006560 <HAL_UART_MspInit+0x218>)
 8006434:	2240      	movs	r2, #64	; 0x40
 8006436:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006438:	4b49      	ldr	r3, [pc, #292]	; (8006560 <HAL_UART_MspInit+0x218>)
 800643a:	2200      	movs	r2, #0
 800643c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800643e:	4b48      	ldr	r3, [pc, #288]	; (8006560 <HAL_UART_MspInit+0x218>)
 8006440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006444:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006446:	4b46      	ldr	r3, [pc, #280]	; (8006560 <HAL_UART_MspInit+0x218>)
 8006448:	2200      	movs	r2, #0
 800644a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800644c:	4b44      	ldr	r3, [pc, #272]	; (8006560 <HAL_UART_MspInit+0x218>)
 800644e:	2200      	movs	r2, #0
 8006450:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006452:	4b43      	ldr	r3, [pc, #268]	; (8006560 <HAL_UART_MspInit+0x218>)
 8006454:	2200      	movs	r2, #0
 8006456:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006458:	4b41      	ldr	r3, [pc, #260]	; (8006560 <HAL_UART_MspInit+0x218>)
 800645a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800645e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006460:	4b3f      	ldr	r3, [pc, #252]	; (8006560 <HAL_UART_MspInit+0x218>)
 8006462:	2200      	movs	r2, #0
 8006464:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006466:	483e      	ldr	r0, [pc, #248]	; (8006560 <HAL_UART_MspInit+0x218>)
 8006468:	f000 fba4 	bl	8006bb4 <HAL_DMA_Init>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8006472:	f7fb fc3b 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a39      	ldr	r2, [pc, #228]	; (8006560 <HAL_UART_MspInit+0x218>)
 800647a:	635a      	str	r2, [r3, #52]	; 0x34
 800647c:	4a38      	ldr	r2, [pc, #224]	; (8006560 <HAL_UART_MspInit+0x218>)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006482:	2200      	movs	r2, #0
 8006484:	2100      	movs	r1, #0
 8006486:	2026      	movs	r0, #38	; 0x26
 8006488:	f000 fb4b 	bl	8006b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800648c:	2026      	movs	r0, #38	; 0x26
 800648e:	f000 fb64 	bl	8006b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006492:	e057      	b.n	8006544 <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART3)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a33      	ldr	r2, [pc, #204]	; (8006568 <HAL_UART_MspInit+0x220>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d152      	bne.n	8006544 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <HAL_UART_MspInit+0x208>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	4a2a      	ldr	r2, [pc, #168]	; (8006550 <HAL_UART_MspInit+0x208>)
 80064a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064ac:	6413      	str	r3, [r2, #64]	; 0x40
 80064ae:	4b28      	ldr	r3, [pc, #160]	; (8006550 <HAL_UART_MspInit+0x208>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	4b24      	ldr	r3, [pc, #144]	; (8006550 <HAL_UART_MspInit+0x208>)
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	4a23      	ldr	r2, [pc, #140]	; (8006550 <HAL_UART_MspInit+0x208>)
 80064c4:	f043 0304 	orr.w	r3, r3, #4
 80064c8:	6313      	str	r3, [r2, #48]	; 0x30
 80064ca:	4b21      	ldr	r3, [pc, #132]	; (8006550 <HAL_UART_MspInit+0x208>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064d6:	2300      	movs	r3, #0
 80064d8:	60bb      	str	r3, [r7, #8]
 80064da:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <HAL_UART_MspInit+0x208>)
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	4a1c      	ldr	r2, [pc, #112]	; (8006550 <HAL_UART_MspInit+0x208>)
 80064e0:	f043 0302 	orr.w	r3, r3, #2
 80064e4:	6313      	str	r3, [r2, #48]	; 0x30
 80064e6:	4b1a      	ldr	r3, [pc, #104]	; (8006550 <HAL_UART_MspInit+0x208>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	60bb      	str	r3, [r7, #8]
 80064f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80064f2:	2320      	movs	r3, #32
 80064f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f6:	2302      	movs	r3, #2
 80064f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064fe:	2303      	movs	r3, #3
 8006500:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006502:	2307      	movs	r3, #7
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006506:	f107 031c 	add.w	r3, r7, #28
 800650a:	4619      	mov	r1, r3
 800650c:	4817      	ldr	r0, [pc, #92]	; (800656c <HAL_UART_MspInit+0x224>)
 800650e:	f000 ffb1 	bl	8007474 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006518:	2302      	movs	r3, #2
 800651a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800651c:	2300      	movs	r3, #0
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006520:	2303      	movs	r3, #3
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006524:	2307      	movs	r3, #7
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006528:	f107 031c 	add.w	r3, r7, #28
 800652c:	4619      	mov	r1, r3
 800652e:	4810      	ldr	r0, [pc, #64]	; (8006570 <HAL_UART_MspInit+0x228>)
 8006530:	f000 ffa0 	bl	8007474 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006534:	2200      	movs	r2, #0
 8006536:	2100      	movs	r1, #0
 8006538:	2027      	movs	r0, #39	; 0x27
 800653a:	f000 faf2 	bl	8006b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800653e:	2027      	movs	r0, #39	; 0x27
 8006540:	f000 fb0b 	bl	8006b5a <HAL_NVIC_EnableIRQ>
}
 8006544:	bf00      	nop
 8006546:	3730      	adds	r7, #48	; 0x30
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40004400 	.word	0x40004400
 8006550:	40023800 	.word	0x40023800
 8006554:	40020000 	.word	0x40020000
 8006558:	200003b4 	.word	0x200003b4
 800655c:	40026088 	.word	0x40026088
 8006560:	20000414 	.word	0x20000414
 8006564:	400260a0 	.word	0x400260a0
 8006568:	40004800 	.word	0x40004800
 800656c:	40020800 	.word	0x40020800
 8006570:	40020400 	.word	0x40020400

08006574 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1a      	ldr	r2, [pc, #104]	; (80065ec <HAL_UART_MspDeInit+0x78>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d117      	bne.n	80065b6 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8006586:	4b1a      	ldr	r3, [pc, #104]	; (80065f0 <HAL_UART_MspDeInit+0x7c>)
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	4a19      	ldr	r2, [pc, #100]	; (80065f0 <HAL_UART_MspDeInit+0x7c>)
 800658c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006590:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8006592:	210c      	movs	r1, #12
 8006594:	4817      	ldr	r0, [pc, #92]	; (80065f4 <HAL_UART_MspDeInit+0x80>)
 8006596:	f001 f901 	bl	800779c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fbb6 	bl	8006d10 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fbb1 	bl	8006d10 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80065ae:	2026      	movs	r0, #38	; 0x26
 80065b0:	f000 fae1 	bl	8006b76 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80065b4:	e016      	b.n	80065e4 <HAL_UART_MspDeInit+0x70>
  else if(huart->Instance==USART3)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a0f      	ldr	r2, [pc, #60]	; (80065f8 <HAL_UART_MspDeInit+0x84>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d111      	bne.n	80065e4 <HAL_UART_MspDeInit+0x70>
    __HAL_RCC_USART3_CLK_DISABLE();
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <HAL_UART_MspDeInit+0x7c>)
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	4a0a      	ldr	r2, [pc, #40]	; (80065f0 <HAL_UART_MspDeInit+0x7c>)
 80065c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065ca:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 80065cc:	2120      	movs	r1, #32
 80065ce:	480b      	ldr	r0, [pc, #44]	; (80065fc <HAL_UART_MspDeInit+0x88>)
 80065d0:	f001 f8e4 	bl	800779c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80065d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065d8:	4809      	ldr	r0, [pc, #36]	; (8006600 <HAL_UART_MspDeInit+0x8c>)
 80065da:	f001 f8df 	bl	800779c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80065de:	2027      	movs	r0, #39	; 0x27
 80065e0:	f000 fac9 	bl	8006b76 <HAL_NVIC_DisableIRQ>
}
 80065e4:	bf00      	nop
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40004400 	.word	0x40004400
 80065f0:	40023800 	.word	0x40023800
 80065f4:	40020000 	.word	0x40020000
 80065f8:	40004800 	.word	0x40004800
 80065fc:	40020800 	.word	0x40020800
 8006600:	40020400 	.word	0x40020400

08006604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006608:	e7fe      	b.n	8006608 <NMI_Handler+0x4>

0800660a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800660a:	b480      	push	{r7}
 800660c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800660e:	e7fe      	b.n	800660e <HardFault_Handler+0x4>

08006610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006614:	e7fe      	b.n	8006614 <MemManage_Handler+0x4>

08006616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006616:	b480      	push	{r7}
 8006618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800661a:	e7fe      	b.n	800661a <BusFault_Handler+0x4>

0800661c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006620:	e7fe      	b.n	8006620 <UsageFault_Handler+0x4>

08006622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006622:	b480      	push	{r7}
 8006624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006626:	bf00      	nop
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006634:	bf00      	nop
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800663e:	b480      	push	{r7}
 8006640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006642:	bf00      	nop
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006650:	f000 f932 	bl	80068b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006654:	bf00      	nop
 8006656:	bd80      	pop	{r7, pc}

08006658 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800665c:	4802      	ldr	r0, [pc, #8]	; (8006668 <DMA1_Stream5_IRQHandler+0x10>)
 800665e:	f000 fc9f 	bl	8006fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006662:	bf00      	nop
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	200003b4 	.word	0x200003b4

0800666c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006670:	4802      	ldr	r0, [pc, #8]	; (800667c <DMA1_Stream6_IRQHandler+0x10>)
 8006672:	f000 fc95 	bl	8006fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006676:	bf00      	nop
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000414 	.word	0x20000414

08006680 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006684:	4802      	ldr	r0, [pc, #8]	; (8006690 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8006686:	f002 faa3 	bl	8008bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800668a:	bf00      	nop
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000134 	.word	0x20000134

08006694 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006698:	4802      	ldr	r0, [pc, #8]	; (80066a4 <USART2_IRQHandler+0x10>)
 800669a:	f003 fb01 	bl	8009ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800669e:	bf00      	nop
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	2000032c 	.word	0x2000032c

080066a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80066ac:	4802      	ldr	r0, [pc, #8]	; (80066b8 <USART3_IRQHandler+0x10>)
 80066ae:	f003 faf7 	bl	8009ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80066b2:	bf00      	nop
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000370 	.word	0x20000370

080066bc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80066c0:	4803      	ldr	r0, [pc, #12]	; (80066d0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80066c2:	f002 fa85 	bl	8008bd0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80066c6:	4803      	ldr	r0, [pc, #12]	; (80066d4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80066c8:	f002 fa82 	bl	8008bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80066cc:	bf00      	nop
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	2000029c 	.word	0x2000029c
 80066d4:	200002e4 	.word	0x200002e4

080066d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80066dc:	4802      	ldr	r0, [pc, #8]	; (80066e8 <TIM5_IRQHandler+0x10>)
 80066de:	f002 fa77 	bl	8008bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80066e2:	bf00      	nop
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000254 	.word	0x20000254

080066ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
	return 1;
 80066f0:	2301      	movs	r3, #1
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <_kill>:

int _kill(int pid, int sig)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006706:	f004 fc35 	bl	800af74 <__errno>
 800670a:	4603      	mov	r3, r0
 800670c:	2216      	movs	r2, #22
 800670e:	601a      	str	r2, [r3, #0]
	return -1;
 8006710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <_exit>:

void _exit (int status)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006724:	f04f 31ff 	mov.w	r1, #4294967295
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ffe7 	bl	80066fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800672e:	e7fe      	b.n	800672e <_exit+0x12>

08006730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006738:	4a14      	ldr	r2, [pc, #80]	; (800678c <_sbrk+0x5c>)
 800673a:	4b15      	ldr	r3, [pc, #84]	; (8006790 <_sbrk+0x60>)
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006744:	4b13      	ldr	r3, [pc, #76]	; (8006794 <_sbrk+0x64>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800674c:	4b11      	ldr	r3, [pc, #68]	; (8006794 <_sbrk+0x64>)
 800674e:	4a12      	ldr	r2, [pc, #72]	; (8006798 <_sbrk+0x68>)
 8006750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006752:	4b10      	ldr	r3, [pc, #64]	; (8006794 <_sbrk+0x64>)
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4413      	add	r3, r2
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	429a      	cmp	r2, r3
 800675e:	d207      	bcs.n	8006770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006760:	f004 fc08 	bl	800af74 <__errno>
 8006764:	4603      	mov	r3, r0
 8006766:	220c      	movs	r2, #12
 8006768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800676a:	f04f 33ff 	mov.w	r3, #4294967295
 800676e:	e009      	b.n	8006784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006770:	4b08      	ldr	r3, [pc, #32]	; (8006794 <_sbrk+0x64>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006776:	4b07      	ldr	r3, [pc, #28]	; (8006794 <_sbrk+0x64>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	4a05      	ldr	r2, [pc, #20]	; (8006794 <_sbrk+0x64>)
 8006780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006782:	68fb      	ldr	r3, [r7, #12]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	20020000 	.word	0x20020000
 8006790:	00000400 	.word	0x00000400
 8006794:	20001b6c 	.word	0x20001b6c
 8006798:	20001b88 	.word	0x20001b88

0800679c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067a0:	4b06      	ldr	r3, [pc, #24]	; (80067bc <SystemInit+0x20>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a6:	4a05      	ldr	r2, [pc, #20]	; (80067bc <SystemInit+0x20>)
 80067a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80067b0:	bf00      	nop
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	e000ed00 	.word	0xe000ed00

080067c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80067c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80067f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80067c4:	480d      	ldr	r0, [pc, #52]	; (80067fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80067c6:	490e      	ldr	r1, [pc, #56]	; (8006800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80067c8:	4a0e      	ldr	r2, [pc, #56]	; (8006804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80067ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80067cc:	e002      	b.n	80067d4 <LoopCopyDataInit>

080067ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80067ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80067d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80067d2:	3304      	adds	r3, #4

080067d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80067d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80067d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80067d8:	d3f9      	bcc.n	80067ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80067da:	4a0b      	ldr	r2, [pc, #44]	; (8006808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80067dc:	4c0b      	ldr	r4, [pc, #44]	; (800680c <LoopFillZerobss+0x26>)
  movs r3, #0
 80067de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80067e0:	e001      	b.n	80067e6 <LoopFillZerobss>

080067e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80067e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80067e4:	3204      	adds	r2, #4

080067e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80067e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80067e8:	d3fb      	bcc.n	80067e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80067ea:	f7ff ffd7 	bl	800679c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80067ee:	f004 fbc7 	bl	800af80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80067f2:	f7fa fe35 	bl	8001460 <main>
  bx  lr    
 80067f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80067f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80067fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006800:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8006804:	0800b680 	.word	0x0800b680
  ldr r2, =_sbss
 8006808:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 800680c:	20001b84 	.word	0x20001b84

08006810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006810:	e7fe      	b.n	8006810 <ADC_IRQHandler>
	...

08006814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006818:	4b0e      	ldr	r3, [pc, #56]	; (8006854 <HAL_Init+0x40>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a0d      	ldr	r2, [pc, #52]	; (8006854 <HAL_Init+0x40>)
 800681e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006824:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <HAL_Init+0x40>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a0a      	ldr	r2, [pc, #40]	; (8006854 <HAL_Init+0x40>)
 800682a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800682e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006830:	4b08      	ldr	r3, [pc, #32]	; (8006854 <HAL_Init+0x40>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a07      	ldr	r2, [pc, #28]	; (8006854 <HAL_Init+0x40>)
 8006836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800683c:	2003      	movs	r0, #3
 800683e:	f000 f965 	bl	8006b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006842:	200f      	movs	r0, #15
 8006844:	f000 f808 	bl	8006858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006848:	f7ff fb94 	bl	8005f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40023c00 	.word	0x40023c00

08006858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006860:	4b12      	ldr	r3, [pc, #72]	; (80068ac <HAL_InitTick+0x54>)
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <HAL_InitTick+0x58>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	4619      	mov	r1, r3
 800686a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800686e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006872:	fbb2 f3f3 	udiv	r3, r2, r3
 8006876:	4618      	mov	r0, r3
 8006878:	f000 f98f 	bl	8006b9a <HAL_SYSTICK_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e00e      	b.n	80068a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b0f      	cmp	r3, #15
 800688a:	d80a      	bhi.n	80068a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800688c:	2200      	movs	r2, #0
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	f04f 30ff 	mov.w	r0, #4294967295
 8006894:	f000 f945 	bl	8006b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006898:	4a06      	ldr	r2, [pc, #24]	; (80068b4 <HAL_InitTick+0x5c>)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	e000      	b.n	80068a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20000070 	.word	0x20000070
 80068b0:	20000078 	.word	0x20000078
 80068b4:	20000074 	.word	0x20000074

080068b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068bc:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <HAL_IncTick+0x20>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	461a      	mov	r2, r3
 80068c2:	4b06      	ldr	r3, [pc, #24]	; (80068dc <HAL_IncTick+0x24>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4413      	add	r3, r2
 80068c8:	4a04      	ldr	r2, [pc, #16]	; (80068dc <HAL_IncTick+0x24>)
 80068ca:	6013      	str	r3, [r2, #0]
}
 80068cc:	bf00      	nop
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	20000078 	.word	0x20000078
 80068dc:	20001b70 	.word	0x20001b70

080068e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  return uwTick;
 80068e4:	4b03      	ldr	r3, [pc, #12]	; (80068f4 <HAL_GetTick+0x14>)
 80068e6:	681b      	ldr	r3, [r3, #0]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	20001b70 	.word	0x20001b70

080068f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006908:	4b0c      	ldr	r3, [pc, #48]	; (800693c <__NVIC_SetPriorityGrouping+0x44>)
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006914:	4013      	ands	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800692a:	4a04      	ldr	r2, [pc, #16]	; (800693c <__NVIC_SetPriorityGrouping+0x44>)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	60d3      	str	r3, [r2, #12]
}
 8006930:	bf00      	nop
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	e000ed00 	.word	0xe000ed00

08006940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006944:	4b04      	ldr	r3, [pc, #16]	; (8006958 <__NVIC_GetPriorityGrouping+0x18>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	0a1b      	lsrs	r3, r3, #8
 800694a:	f003 0307 	and.w	r3, r3, #7
}
 800694e:	4618      	mov	r0, r3
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	e000ed00 	.word	0xe000ed00

0800695c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	4603      	mov	r3, r0
 8006964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800696a:	2b00      	cmp	r3, #0
 800696c:	db0b      	blt.n	8006986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800696e:	79fb      	ldrb	r3, [r7, #7]
 8006970:	f003 021f 	and.w	r2, r3, #31
 8006974:	4907      	ldr	r1, [pc, #28]	; (8006994 <__NVIC_EnableIRQ+0x38>)
 8006976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	2001      	movs	r0, #1
 800697e:	fa00 f202 	lsl.w	r2, r0, r2
 8006982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	e000e100 	.word	0xe000e100

08006998 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	db12      	blt.n	80069d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069aa:	79fb      	ldrb	r3, [r7, #7]
 80069ac:	f003 021f 	and.w	r2, r3, #31
 80069b0:	490a      	ldr	r1, [pc, #40]	; (80069dc <__NVIC_DisableIRQ+0x44>)
 80069b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	2001      	movs	r0, #1
 80069ba:	fa00 f202 	lsl.w	r2, r0, r2
 80069be:	3320      	adds	r3, #32
 80069c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80069c4:	f3bf 8f4f 	dsb	sy
}
 80069c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80069ca:	f3bf 8f6f 	isb	sy
}
 80069ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	e000e100 	.word	0xe000e100

080069e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	6039      	str	r1, [r7, #0]
 80069ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	db0a      	blt.n	8006a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	490c      	ldr	r1, [pc, #48]	; (8006a2c <__NVIC_SetPriority+0x4c>)
 80069fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069fe:	0112      	lsls	r2, r2, #4
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	440b      	add	r3, r1
 8006a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a08:	e00a      	b.n	8006a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	4908      	ldr	r1, [pc, #32]	; (8006a30 <__NVIC_SetPriority+0x50>)
 8006a10:	79fb      	ldrb	r3, [r7, #7]
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	3b04      	subs	r3, #4
 8006a18:	0112      	lsls	r2, r2, #4
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	761a      	strb	r2, [r3, #24]
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	e000e100 	.word	0xe000e100
 8006a30:	e000ed00 	.word	0xe000ed00

08006a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b089      	sub	sp, #36	; 0x24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	f1c3 0307 	rsb	r3, r3, #7
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	bf28      	it	cs
 8006a52:	2304      	movcs	r3, #4
 8006a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	2b06      	cmp	r3, #6
 8006a5c:	d902      	bls.n	8006a64 <NVIC_EncodePriority+0x30>
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	3b03      	subs	r3, #3
 8006a62:	e000      	b.n	8006a66 <NVIC_EncodePriority+0x32>
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a68:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	43da      	mvns	r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	401a      	ands	r2, r3
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	fa01 f303 	lsl.w	r3, r1, r3
 8006a86:	43d9      	mvns	r1, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a8c:	4313      	orrs	r3, r2
         );
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3724      	adds	r7, #36	; 0x24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
	...

08006a9c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006aa0:	f3bf 8f4f 	dsb	sy
}
 8006aa4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006aa6:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <__NVIC_SystemReset+0x24>)
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006aae:	4904      	ldr	r1, [pc, #16]	; (8006ac0 <__NVIC_SystemReset+0x24>)
 8006ab0:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <__NVIC_SystemReset+0x28>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006ab6:	f3bf 8f4f 	dsb	sy
}
 8006aba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <__NVIC_SystemReset+0x20>
 8006ac0:	e000ed00 	.word	0xe000ed00
 8006ac4:	05fa0004 	.word	0x05fa0004

08006ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ad8:	d301      	bcc.n	8006ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ada:	2301      	movs	r3, #1
 8006adc:	e00f      	b.n	8006afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ade:	4a0a      	ldr	r2, [pc, #40]	; (8006b08 <SysTick_Config+0x40>)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ae6:	210f      	movs	r1, #15
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aec:	f7ff ff78 	bl	80069e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006af0:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <SysTick_Config+0x40>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006af6:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <SysTick_Config+0x40>)
 8006af8:	2207      	movs	r2, #7
 8006afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	e000e010 	.word	0xe000e010

08006b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7ff feef 	bl	80068f8 <__NVIC_SetPriorityGrouping>
}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	4603      	mov	r3, r0
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b34:	f7ff ff04 	bl	8006940 <__NVIC_GetPriorityGrouping>
 8006b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	6978      	ldr	r0, [r7, #20]
 8006b40:	f7ff ff78 	bl	8006a34 <NVIC_EncodePriority>
 8006b44:	4602      	mov	r2, r0
 8006b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff ff47 	bl	80069e0 <__NVIC_SetPriority>
}
 8006b52:	bf00      	nop
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	4603      	mov	r3, r0
 8006b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff fef7 	bl	800695c <__NVIC_EnableIRQ>
}
 8006b6e:	bf00      	nop
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff ff07 	bl	8006998 <__NVIC_DisableIRQ>
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006b96:	f7ff ff81 	bl	8006a9c <__NVIC_SystemReset>

08006b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff ff90 	bl	8006ac8 <SysTick_Config>
 8006ba8:	4603      	mov	r3, r0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
	...

08006bb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006bc0:	f7ff fe8e 	bl	80068e0 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e099      	b.n	8006d04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0201 	bic.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bf0:	e00f      	b.n	8006c12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bf2:	f7ff fe75 	bl	80068e0 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b05      	cmp	r3, #5
 8006bfe:	d908      	bls.n	8006c12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2203      	movs	r2, #3
 8006c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e078      	b.n	8006d04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e8      	bne.n	8006bf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4b38      	ldr	r3, [pc, #224]	; (8006d0c <HAL_DMA_Init+0x158>)
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d107      	bne.n	8006c7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c74:	4313      	orrs	r3, r2
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f023 0307 	bic.w	r3, r3, #7
 8006c92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d117      	bne.n	8006cd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00e      	beq.n	8006cd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fb5f 	bl	800737c <DMA_CheckFifoParam>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d008      	beq.n	8006cd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2240      	movs	r2, #64	; 0x40
 8006cc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e016      	b.n	8006d04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fb16 	bl	8007310 <DMA_CalcBaseAndBitshift>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cec:	223f      	movs	r2, #63	; 0x3f
 8006cee:	409a      	lsls	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	f010803f 	.word	0xf010803f

08006d10 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e050      	b.n	8006dc4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d101      	bne.n	8006d32 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e048      	b.n	8006dc4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0201 	bic.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2200      	movs	r2, #0
 8006d58:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2200      	movs	r2, #0
 8006d68:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2221      	movs	r2, #33	; 0x21
 8006d70:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 facc 	bl	8007310 <DMA_CalcBaseAndBitshift>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da4:	223f      	movs	r2, #63	; 0x3f
 8006da6:	409a      	lsls	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d101      	bne.n	8006df2 <HAL_DMA_Start_IT+0x26>
 8006dee:	2302      	movs	r3, #2
 8006df0:	e040      	b.n	8006e74 <HAL_DMA_Start_IT+0xa8>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d12f      	bne.n	8006e66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	68b9      	ldr	r1, [r7, #8]
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 fa4a 	bl	80072b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e24:	223f      	movs	r2, #63	; 0x3f
 8006e26:	409a      	lsls	r2, r3
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0216 	orr.w	r2, r2, #22
 8006e3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d007      	beq.n	8006e54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0208 	orr.w	r2, r2, #8
 8006e52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	e005      	b.n	8006e72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006e6e:	2302      	movs	r3, #2
 8006e70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006e8a:	f7ff fd29 	bl	80068e0 <HAL_GetTick>
 8006e8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d008      	beq.n	8006eae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2280      	movs	r2, #128	; 0x80
 8006ea0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e052      	b.n	8006f54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0216 	bic.w	r2, r2, #22
 8006ebc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695a      	ldr	r2, [r3, #20]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ecc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d103      	bne.n	8006ede <HAL_DMA_Abort+0x62>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d007      	beq.n	8006eee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0208 	bic.w	r2, r2, #8
 8006eec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0201 	bic.w	r2, r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006efe:	e013      	b.n	8006f28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f00:	f7ff fcee 	bl	80068e0 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b05      	cmp	r3, #5
 8006f0c:	d90c      	bls.n	8006f28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2203      	movs	r2, #3
 8006f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e015      	b.n	8006f54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e4      	bne.n	8006f00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3a:	223f      	movs	r2, #63	; 0x3f
 8006f3c:	409a      	lsls	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d004      	beq.n	8006f7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2280      	movs	r2, #128	; 0x80
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e00c      	b.n	8006f94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2205      	movs	r2, #5
 8006f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 0201 	bic.w	r2, r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006fac:	4b8e      	ldr	r3, [pc, #568]	; (80071e8 <HAL_DMA_IRQHandler+0x248>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a8e      	ldr	r2, [pc, #568]	; (80071ec <HAL_DMA_IRQHandler+0x24c>)
 8006fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb6:	0a9b      	lsrs	r3, r3, #10
 8006fb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fca:	2208      	movs	r2, #8
 8006fcc:	409a      	lsls	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d01a      	beq.n	800700c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d013      	beq.n	800700c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 0204 	bic.w	r2, r2, #4
 8006ff2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	409a      	lsls	r2, r3
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007004:	f043 0201 	orr.w	r2, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007010:	2201      	movs	r2, #1
 8007012:	409a      	lsls	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4013      	ands	r3, r2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d012      	beq.n	8007042 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00b      	beq.n	8007042 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702e:	2201      	movs	r2, #1
 8007030:	409a      	lsls	r2, r3
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703a:	f043 0202 	orr.w	r2, r3, #2
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007046:	2204      	movs	r2, #4
 8007048:	409a      	lsls	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4013      	ands	r3, r2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d012      	beq.n	8007078 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007064:	2204      	movs	r2, #4
 8007066:	409a      	lsls	r2, r3
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007070:	f043 0204 	orr.w	r2, r3, #4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800707c:	2210      	movs	r2, #16
 800707e:	409a      	lsls	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4013      	ands	r3, r2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d043      	beq.n	8007110 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d03c      	beq.n	8007110 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709a:	2210      	movs	r2, #16
 800709c:	409a      	lsls	r2, r3
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d018      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d108      	bne.n	80070d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d024      	beq.n	8007110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
 80070ce:	e01f      	b.n	8007110 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01b      	beq.n	8007110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	4798      	blx	r3
 80070e0:	e016      	b.n	8007110 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d107      	bne.n	8007100 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0208 	bic.w	r2, r2, #8
 80070fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007114:	2220      	movs	r2, #32
 8007116:	409a      	lsls	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4013      	ands	r3, r2
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 808f 	beq.w	8007240 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0310 	and.w	r3, r3, #16
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 8087 	beq.w	8007240 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007136:	2220      	movs	r2, #32
 8007138:	409a      	lsls	r2, r3
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b05      	cmp	r3, #5
 8007148:	d136      	bne.n	80071b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0216 	bic.w	r2, r2, #22
 8007158:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	695a      	ldr	r2, [r3, #20]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007168:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <HAL_DMA_IRQHandler+0x1da>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007176:	2b00      	cmp	r3, #0
 8007178:	d007      	beq.n	800718a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0208 	bic.w	r2, r2, #8
 8007188:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800718e:	223f      	movs	r2, #63	; 0x3f
 8007190:	409a      	lsls	r2, r3
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d07e      	beq.n	80072ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
        }
        return;
 80071b6:	e079      	b.n	80072ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01d      	beq.n	8007202 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10d      	bne.n	80071f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d031      	beq.n	8007240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
 80071e4:	e02c      	b.n	8007240 <HAL_DMA_IRQHandler+0x2a0>
 80071e6:	bf00      	nop
 80071e8:	20000070 	.word	0x20000070
 80071ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d023      	beq.n	8007240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
 8007200:	e01e      	b.n	8007240 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10f      	bne.n	8007230 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0210 	bic.w	r2, r2, #16
 800721e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007244:	2b00      	cmp	r3, #0
 8007246:	d032      	beq.n	80072ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d022      	beq.n	800729a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2205      	movs	r2, #5
 8007258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0201 	bic.w	r2, r2, #1
 800726a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	3301      	adds	r3, #1
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	429a      	cmp	r2, r3
 8007276:	d307      	bcc.n	8007288 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1f2      	bne.n	800726c <HAL_DMA_IRQHandler+0x2cc>
 8007286:	e000      	b.n	800728a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007288:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d005      	beq.n	80072ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
 80072aa:	e000      	b.n	80072ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80072ac:	bf00      	nop
    }
  }
}
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d108      	bne.n	80072f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80072f2:	e007      	b.n	8007304 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	60da      	str	r2, [r3, #12]
}
 8007304:	bf00      	nop
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	b2db      	uxtb	r3, r3
 800731e:	3b10      	subs	r3, #16
 8007320:	4a14      	ldr	r2, [pc, #80]	; (8007374 <DMA_CalcBaseAndBitshift+0x64>)
 8007322:	fba2 2303 	umull	r2, r3, r2, r3
 8007326:	091b      	lsrs	r3, r3, #4
 8007328:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800732a:	4a13      	ldr	r2, [pc, #76]	; (8007378 <DMA_CalcBaseAndBitshift+0x68>)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b03      	cmp	r3, #3
 800733c:	d909      	bls.n	8007352 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	1d1a      	adds	r2, r3, #4
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	659a      	str	r2, [r3, #88]	; 0x58
 8007350:	e007      	b.n	8007362 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800735a:	f023 0303 	bic.w	r3, r3, #3
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	aaaaaaab 	.word	0xaaaaaaab
 8007378:	0800b664 	.word	0x0800b664

0800737c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d11f      	bne.n	80073d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b03      	cmp	r3, #3
 800739a:	d856      	bhi.n	800744a <DMA_CheckFifoParam+0xce>
 800739c:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <DMA_CheckFifoParam+0x28>)
 800739e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a2:	bf00      	nop
 80073a4:	080073b5 	.word	0x080073b5
 80073a8:	080073c7 	.word	0x080073c7
 80073ac:	080073b5 	.word	0x080073b5
 80073b0:	0800744b 	.word	0x0800744b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d046      	beq.n	800744e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073c4:	e043      	b.n	800744e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073ce:	d140      	bne.n	8007452 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073d4:	e03d      	b.n	8007452 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073de:	d121      	bne.n	8007424 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d837      	bhi.n	8007456 <DMA_CheckFifoParam+0xda>
 80073e6:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <DMA_CheckFifoParam+0x70>)
 80073e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ec:	080073fd 	.word	0x080073fd
 80073f0:	08007403 	.word	0x08007403
 80073f4:	080073fd 	.word	0x080073fd
 80073f8:	08007415 	.word	0x08007415
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007400:	e030      	b.n	8007464 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d025      	beq.n	800745a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007412:	e022      	b.n	800745a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800741c:	d11f      	bne.n	800745e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007422:	e01c      	b.n	800745e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d903      	bls.n	8007432 <DMA_CheckFifoParam+0xb6>
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b03      	cmp	r3, #3
 800742e:	d003      	beq.n	8007438 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007430:	e018      	b.n	8007464 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	73fb      	strb	r3, [r7, #15]
      break;
 8007436:	e015      	b.n	8007464 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00e      	beq.n	8007462 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	73fb      	strb	r3, [r7, #15]
      break;
 8007448:	e00b      	b.n	8007462 <DMA_CheckFifoParam+0xe6>
      break;
 800744a:	bf00      	nop
 800744c:	e00a      	b.n	8007464 <DMA_CheckFifoParam+0xe8>
      break;
 800744e:	bf00      	nop
 8007450:	e008      	b.n	8007464 <DMA_CheckFifoParam+0xe8>
      break;
 8007452:	bf00      	nop
 8007454:	e006      	b.n	8007464 <DMA_CheckFifoParam+0xe8>
      break;
 8007456:	bf00      	nop
 8007458:	e004      	b.n	8007464 <DMA_CheckFifoParam+0xe8>
      break;
 800745a:	bf00      	nop
 800745c:	e002      	b.n	8007464 <DMA_CheckFifoParam+0xe8>
      break;   
 800745e:	bf00      	nop
 8007460:	e000      	b.n	8007464 <DMA_CheckFifoParam+0xe8>
      break;
 8007462:	bf00      	nop
    }
  } 
  
  return status; 
 8007464:	7bfb      	ldrb	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop

08007474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007474:	b480      	push	{r7}
 8007476:	b089      	sub	sp, #36	; 0x24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007482:	2300      	movs	r3, #0
 8007484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007486:	2300      	movs	r3, #0
 8007488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800748a:	2300      	movs	r3, #0
 800748c:	61fb      	str	r3, [r7, #28]
 800748e:	e165      	b.n	800775c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007490:	2201      	movs	r2, #1
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	fa02 f303 	lsl.w	r3, r2, r3
 8007498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	4013      	ands	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	f040 8154 	bne.w	8007756 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d005      	beq.n	80074c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d130      	bne.n	8007528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	2203      	movs	r2, #3
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	43db      	mvns	r3, r3
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	4013      	ands	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80074fc:	2201      	movs	r2, #1
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	fa02 f303 	lsl.w	r3, r2, r3
 8007504:	43db      	mvns	r3, r3
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	4013      	ands	r3, r2
 800750a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	091b      	lsrs	r3, r3, #4
 8007512:	f003 0201 	and.w	r2, r3, #1
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	fa02 f303 	lsl.w	r3, r2, r3
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	4313      	orrs	r3, r2
 8007520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f003 0303 	and.w	r3, r3, #3
 8007530:	2b03      	cmp	r3, #3
 8007532:	d017      	beq.n	8007564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	2203      	movs	r2, #3
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	43db      	mvns	r3, r3
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	4013      	ands	r3, r2
 800754a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	fa02 f303 	lsl.w	r3, r2, r3
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	4313      	orrs	r3, r2
 800755c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f003 0303 	and.w	r3, r3, #3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d123      	bne.n	80075b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	08da      	lsrs	r2, r3, #3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3208      	adds	r2, #8
 8007578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	f003 0307 	and.w	r3, r3, #7
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	220f      	movs	r2, #15
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	43db      	mvns	r3, r3
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	4013      	ands	r3, r2
 8007592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	691a      	ldr	r2, [r3, #16]
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	fa02 f303 	lsl.w	r3, r2, r3
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	08da      	lsrs	r2, r3, #3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3208      	adds	r2, #8
 80075b2:	69b9      	ldr	r1, [r7, #24]
 80075b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	2203      	movs	r2, #3
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	43db      	mvns	r3, r3
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	4013      	ands	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f003 0203 	and.w	r2, r3, #3
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 80ae 	beq.w	8007756 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	4b5d      	ldr	r3, [pc, #372]	; (8007774 <HAL_GPIO_Init+0x300>)
 8007600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007602:	4a5c      	ldr	r2, [pc, #368]	; (8007774 <HAL_GPIO_Init+0x300>)
 8007604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007608:	6453      	str	r3, [r2, #68]	; 0x44
 800760a:	4b5a      	ldr	r3, [pc, #360]	; (8007774 <HAL_GPIO_Init+0x300>)
 800760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007616:	4a58      	ldr	r2, [pc, #352]	; (8007778 <HAL_GPIO_Init+0x304>)
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	089b      	lsrs	r3, r3, #2
 800761c:	3302      	adds	r3, #2
 800761e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	220f      	movs	r2, #15
 800762e:	fa02 f303 	lsl.w	r3, r2, r3
 8007632:	43db      	mvns	r3, r3
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	4013      	ands	r3, r2
 8007638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a4f      	ldr	r2, [pc, #316]	; (800777c <HAL_GPIO_Init+0x308>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d025      	beq.n	800768e <HAL_GPIO_Init+0x21a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a4e      	ldr	r2, [pc, #312]	; (8007780 <HAL_GPIO_Init+0x30c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d01f      	beq.n	800768a <HAL_GPIO_Init+0x216>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a4d      	ldr	r2, [pc, #308]	; (8007784 <HAL_GPIO_Init+0x310>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d019      	beq.n	8007686 <HAL_GPIO_Init+0x212>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a4c      	ldr	r2, [pc, #304]	; (8007788 <HAL_GPIO_Init+0x314>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d013      	beq.n	8007682 <HAL_GPIO_Init+0x20e>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a4b      	ldr	r2, [pc, #300]	; (800778c <HAL_GPIO_Init+0x318>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00d      	beq.n	800767e <HAL_GPIO_Init+0x20a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a4a      	ldr	r2, [pc, #296]	; (8007790 <HAL_GPIO_Init+0x31c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d007      	beq.n	800767a <HAL_GPIO_Init+0x206>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a49      	ldr	r2, [pc, #292]	; (8007794 <HAL_GPIO_Init+0x320>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d101      	bne.n	8007676 <HAL_GPIO_Init+0x202>
 8007672:	2306      	movs	r3, #6
 8007674:	e00c      	b.n	8007690 <HAL_GPIO_Init+0x21c>
 8007676:	2307      	movs	r3, #7
 8007678:	e00a      	b.n	8007690 <HAL_GPIO_Init+0x21c>
 800767a:	2305      	movs	r3, #5
 800767c:	e008      	b.n	8007690 <HAL_GPIO_Init+0x21c>
 800767e:	2304      	movs	r3, #4
 8007680:	e006      	b.n	8007690 <HAL_GPIO_Init+0x21c>
 8007682:	2303      	movs	r3, #3
 8007684:	e004      	b.n	8007690 <HAL_GPIO_Init+0x21c>
 8007686:	2302      	movs	r3, #2
 8007688:	e002      	b.n	8007690 <HAL_GPIO_Init+0x21c>
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <HAL_GPIO_Init+0x21c>
 800768e:	2300      	movs	r3, #0
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	f002 0203 	and.w	r2, r2, #3
 8007696:	0092      	lsls	r2, r2, #2
 8007698:	4093      	lsls	r3, r2
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	4313      	orrs	r3, r2
 800769e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076a0:	4935      	ldr	r1, [pc, #212]	; (8007778 <HAL_GPIO_Init+0x304>)
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	089b      	lsrs	r3, r3, #2
 80076a6:	3302      	adds	r3, #2
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80076ae:	4b3a      	ldr	r3, [pc, #232]	; (8007798 <HAL_GPIO_Init+0x324>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	43db      	mvns	r3, r3
 80076b8:	69ba      	ldr	r2, [r7, #24]
 80076ba:	4013      	ands	r3, r2
 80076bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80076d2:	4a31      	ldr	r2, [pc, #196]	; (8007798 <HAL_GPIO_Init+0x324>)
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80076d8:	4b2f      	ldr	r3, [pc, #188]	; (8007798 <HAL_GPIO_Init+0x324>)
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	43db      	mvns	r3, r3
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	4013      	ands	r3, r2
 80076e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80076fc:	4a26      	ldr	r2, [pc, #152]	; (8007798 <HAL_GPIO_Init+0x324>)
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007702:	4b25      	ldr	r3, [pc, #148]	; (8007798 <HAL_GPIO_Init+0x324>)
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	43db      	mvns	r3, r3
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	4013      	ands	r3, r2
 8007710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	4313      	orrs	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007726:	4a1c      	ldr	r2, [pc, #112]	; (8007798 <HAL_GPIO_Init+0x324>)
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800772c:	4b1a      	ldr	r3, [pc, #104]	; (8007798 <HAL_GPIO_Init+0x324>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	43db      	mvns	r3, r3
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	4013      	ands	r3, r2
 800773a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	4313      	orrs	r3, r2
 800774e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007750:	4a11      	ldr	r2, [pc, #68]	; (8007798 <HAL_GPIO_Init+0x324>)
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	3301      	adds	r3, #1
 800775a:	61fb      	str	r3, [r7, #28]
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	2b0f      	cmp	r3, #15
 8007760:	f67f ae96 	bls.w	8007490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	3724      	adds	r7, #36	; 0x24
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40023800 	.word	0x40023800
 8007778:	40013800 	.word	0x40013800
 800777c:	40020000 	.word	0x40020000
 8007780:	40020400 	.word	0x40020400
 8007784:	40020800 	.word	0x40020800
 8007788:	40020c00 	.word	0x40020c00
 800778c:	40021000 	.word	0x40021000
 8007790:	40021400 	.word	0x40021400
 8007794:	40021800 	.word	0x40021800
 8007798:	40013c00 	.word	0x40013c00

0800779c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077b2:	2300      	movs	r3, #0
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	e0c7      	b.n	8007948 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80077b8:	2201      	movs	r2, #1
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	fa02 f303 	lsl.w	r3, r2, r3
 80077c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	4013      	ands	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	f040 80b7 	bne.w	8007942 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80077d4:	4a62      	ldr	r2, [pc, #392]	; (8007960 <HAL_GPIO_DeInit+0x1c4>)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	089b      	lsrs	r3, r3, #2
 80077da:	3302      	adds	r3, #2
 80077dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077e0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	220f      	movs	r2, #15
 80077ec:	fa02 f303 	lsl.w	r3, r2, r3
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	4013      	ands	r3, r2
 80077f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a5a      	ldr	r2, [pc, #360]	; (8007964 <HAL_GPIO_DeInit+0x1c8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d025      	beq.n	800784a <HAL_GPIO_DeInit+0xae>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a59      	ldr	r2, [pc, #356]	; (8007968 <HAL_GPIO_DeInit+0x1cc>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d01f      	beq.n	8007846 <HAL_GPIO_DeInit+0xaa>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a58      	ldr	r2, [pc, #352]	; (800796c <HAL_GPIO_DeInit+0x1d0>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d019      	beq.n	8007842 <HAL_GPIO_DeInit+0xa6>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a57      	ldr	r2, [pc, #348]	; (8007970 <HAL_GPIO_DeInit+0x1d4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d013      	beq.n	800783e <HAL_GPIO_DeInit+0xa2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a56      	ldr	r2, [pc, #344]	; (8007974 <HAL_GPIO_DeInit+0x1d8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00d      	beq.n	800783a <HAL_GPIO_DeInit+0x9e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a55      	ldr	r2, [pc, #340]	; (8007978 <HAL_GPIO_DeInit+0x1dc>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d007      	beq.n	8007836 <HAL_GPIO_DeInit+0x9a>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a54      	ldr	r2, [pc, #336]	; (800797c <HAL_GPIO_DeInit+0x1e0>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d101      	bne.n	8007832 <HAL_GPIO_DeInit+0x96>
 800782e:	2306      	movs	r3, #6
 8007830:	e00c      	b.n	800784c <HAL_GPIO_DeInit+0xb0>
 8007832:	2307      	movs	r3, #7
 8007834:	e00a      	b.n	800784c <HAL_GPIO_DeInit+0xb0>
 8007836:	2305      	movs	r3, #5
 8007838:	e008      	b.n	800784c <HAL_GPIO_DeInit+0xb0>
 800783a:	2304      	movs	r3, #4
 800783c:	e006      	b.n	800784c <HAL_GPIO_DeInit+0xb0>
 800783e:	2303      	movs	r3, #3
 8007840:	e004      	b.n	800784c <HAL_GPIO_DeInit+0xb0>
 8007842:	2302      	movs	r3, #2
 8007844:	e002      	b.n	800784c <HAL_GPIO_DeInit+0xb0>
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <HAL_GPIO_DeInit+0xb0>
 800784a:	2300      	movs	r3, #0
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	f002 0203 	and.w	r2, r2, #3
 8007852:	0092      	lsls	r2, r2, #2
 8007854:	4093      	lsls	r3, r2
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	429a      	cmp	r2, r3
 800785a:	d132      	bne.n	80078c2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800785c:	4b48      	ldr	r3, [pc, #288]	; (8007980 <HAL_GPIO_DeInit+0x1e4>)
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	43db      	mvns	r3, r3
 8007864:	4946      	ldr	r1, [pc, #280]	; (8007980 <HAL_GPIO_DeInit+0x1e4>)
 8007866:	4013      	ands	r3, r2
 8007868:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800786a:	4b45      	ldr	r3, [pc, #276]	; (8007980 <HAL_GPIO_DeInit+0x1e4>)
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	43db      	mvns	r3, r3
 8007872:	4943      	ldr	r1, [pc, #268]	; (8007980 <HAL_GPIO_DeInit+0x1e4>)
 8007874:	4013      	ands	r3, r2
 8007876:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007878:	4b41      	ldr	r3, [pc, #260]	; (8007980 <HAL_GPIO_DeInit+0x1e4>)
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	43db      	mvns	r3, r3
 8007880:	493f      	ldr	r1, [pc, #252]	; (8007980 <HAL_GPIO_DeInit+0x1e4>)
 8007882:	4013      	ands	r3, r2
 8007884:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007886:	4b3e      	ldr	r3, [pc, #248]	; (8007980 <HAL_GPIO_DeInit+0x1e4>)
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	43db      	mvns	r3, r3
 800788e:	493c      	ldr	r1, [pc, #240]	; (8007980 <HAL_GPIO_DeInit+0x1e4>)
 8007890:	4013      	ands	r3, r2
 8007892:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	220f      	movs	r2, #15
 800789e:	fa02 f303 	lsl.w	r3, r2, r3
 80078a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80078a4:	4a2e      	ldr	r2, [pc, #184]	; (8007960 <HAL_GPIO_DeInit+0x1c4>)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	089b      	lsrs	r3, r3, #2
 80078aa:	3302      	adds	r3, #2
 80078ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	43da      	mvns	r2, r3
 80078b4:	482a      	ldr	r0, [pc, #168]	; (8007960 <HAL_GPIO_DeInit+0x1c4>)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	089b      	lsrs	r3, r3, #2
 80078ba:	400a      	ands	r2, r1
 80078bc:	3302      	adds	r3, #2
 80078be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	2103      	movs	r1, #3
 80078cc:	fa01 f303 	lsl.w	r3, r1, r3
 80078d0:	43db      	mvns	r3, r3
 80078d2:	401a      	ands	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	08da      	lsrs	r2, r3, #3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	3208      	adds	r2, #8
 80078e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	220f      	movs	r2, #15
 80078ee:	fa02 f303 	lsl.w	r3, r2, r3
 80078f2:	43db      	mvns	r3, r3
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	08d2      	lsrs	r2, r2, #3
 80078f8:	4019      	ands	r1, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3208      	adds	r2, #8
 80078fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	2103      	movs	r1, #3
 800790c:	fa01 f303 	lsl.w	r3, r1, r3
 8007910:	43db      	mvns	r3, r3
 8007912:	401a      	ands	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	2101      	movs	r1, #1
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	fa01 f303 	lsl.w	r3, r1, r3
 8007924:	43db      	mvns	r3, r3
 8007926:	401a      	ands	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	2103      	movs	r1, #3
 8007936:	fa01 f303 	lsl.w	r3, r1, r3
 800793a:	43db      	mvns	r3, r3
 800793c:	401a      	ands	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	3301      	adds	r3, #1
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2b0f      	cmp	r3, #15
 800794c:	f67f af34 	bls.w	80077b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007950:	bf00      	nop
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40013800 	.word	0x40013800
 8007964:	40020000 	.word	0x40020000
 8007968:	40020400 	.word	0x40020400
 800796c:	40020800 	.word	0x40020800
 8007970:	40020c00 	.word	0x40020c00
 8007974:	40021000 	.word	0x40021000
 8007978:	40021400 	.word	0x40021400
 800797c:	40021800 	.word	0x40021800
 8007980:	40013c00 	.word	0x40013c00

08007984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691a      	ldr	r2, [r3, #16]
 8007994:	887b      	ldrh	r3, [r7, #2]
 8007996:	4013      	ands	r3, r2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800799c:	2301      	movs	r3, #1
 800799e:	73fb      	strb	r3, [r7, #15]
 80079a0:	e001      	b.n	80079a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
 80079c0:	4613      	mov	r3, r2
 80079c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80079c4:	787b      	ldrb	r3, [r7, #1]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079ca:	887a      	ldrh	r2, [r7, #2]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80079d0:	e003      	b.n	80079da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80079d2:	887b      	ldrh	r3, [r7, #2]
 80079d4:	041a      	lsls	r2, r3, #16
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	619a      	str	r2, [r3, #24]
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e0cc      	b.n	8007b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079fc:	4b68      	ldr	r3, [pc, #416]	; (8007ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 030f 	and.w	r3, r3, #15
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d90c      	bls.n	8007a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a0a:	4b65      	ldr	r3, [pc, #404]	; (8007ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	b2d2      	uxtb	r2, r2
 8007a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a12:	4b63      	ldr	r3, [pc, #396]	; (8007ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d001      	beq.n	8007a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e0b8      	b.n	8007b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d020      	beq.n	8007a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a3c:	4b59      	ldr	r3, [pc, #356]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	4a58      	ldr	r2, [pc, #352]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0308 	and.w	r3, r3, #8
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a54:	4b53      	ldr	r3, [pc, #332]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	4a52      	ldr	r2, [pc, #328]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a60:	4b50      	ldr	r3, [pc, #320]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	494d      	ldr	r1, [pc, #308]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d044      	beq.n	8007b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d107      	bne.n	8007a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a86:	4b47      	ldr	r3, [pc, #284]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d119      	bne.n	8007ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e07f      	b.n	8007b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d003      	beq.n	8007aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d107      	bne.n	8007ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aa6:	4b3f      	ldr	r3, [pc, #252]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d109      	bne.n	8007ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e06f      	b.n	8007b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ab6:	4b3b      	ldr	r3, [pc, #236]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e067      	b.n	8007b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ac6:	4b37      	ldr	r3, [pc, #220]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f023 0203 	bic.w	r2, r3, #3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	4934      	ldr	r1, [pc, #208]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ad8:	f7fe ff02 	bl	80068e0 <HAL_GetTick>
 8007adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ade:	e00a      	b.n	8007af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ae0:	f7fe fefe 	bl	80068e0 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e04f      	b.n	8007b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007af6:	4b2b      	ldr	r3, [pc, #172]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 020c 	and.w	r2, r3, #12
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d1eb      	bne.n	8007ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b08:	4b25      	ldr	r3, [pc, #148]	; (8007ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 030f 	and.w	r3, r3, #15
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d20c      	bcs.n	8007b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b16:	4b22      	ldr	r3, [pc, #136]	; (8007ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b1e:	4b20      	ldr	r3, [pc, #128]	; (8007ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d001      	beq.n	8007b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e032      	b.n	8007b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0304 	and.w	r3, r3, #4
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d008      	beq.n	8007b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b3c:	4b19      	ldr	r3, [pc, #100]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	4916      	ldr	r1, [pc, #88]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0308 	and.w	r3, r3, #8
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d009      	beq.n	8007b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b5a:	4b12      	ldr	r3, [pc, #72]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	490e      	ldr	r1, [pc, #56]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b6e:	f000 f855 	bl	8007c1c <HAL_RCC_GetSysClockFreq>
 8007b72:	4602      	mov	r2, r0
 8007b74:	4b0b      	ldr	r3, [pc, #44]	; (8007ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	091b      	lsrs	r3, r3, #4
 8007b7a:	f003 030f 	and.w	r3, r3, #15
 8007b7e:	490a      	ldr	r1, [pc, #40]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b80:	5ccb      	ldrb	r3, [r1, r3]
 8007b82:	fa22 f303 	lsr.w	r3, r2, r3
 8007b86:	4a09      	ldr	r2, [pc, #36]	; (8007bac <HAL_RCC_ClockConfig+0x1c4>)
 8007b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b8a:	4b09      	ldr	r3, [pc, #36]	; (8007bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe fe62 	bl	8006858 <HAL_InitTick>

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	40023c00 	.word	0x40023c00
 8007ba4:	40023800 	.word	0x40023800
 8007ba8:	0800b64c 	.word	0x0800b64c
 8007bac:	20000070 	.word	0x20000070
 8007bb0:	20000074 	.word	0x20000074

08007bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bb8:	4b03      	ldr	r3, [pc, #12]	; (8007bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007bba:	681b      	ldr	r3, [r3, #0]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	20000070 	.word	0x20000070

08007bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bd0:	f7ff fff0 	bl	8007bb4 <HAL_RCC_GetHCLKFreq>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	0a9b      	lsrs	r3, r3, #10
 8007bdc:	f003 0307 	and.w	r3, r3, #7
 8007be0:	4903      	ldr	r1, [pc, #12]	; (8007bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007be2:	5ccb      	ldrb	r3, [r1, r3]
 8007be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	40023800 	.word	0x40023800
 8007bf0:	0800b65c 	.word	0x0800b65c

08007bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007bf8:	f7ff ffdc 	bl	8007bb4 <HAL_RCC_GetHCLKFreq>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	4b05      	ldr	r3, [pc, #20]	; (8007c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	0b5b      	lsrs	r3, r3, #13
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	4903      	ldr	r1, [pc, #12]	; (8007c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c0a:	5ccb      	ldrb	r3, [r1, r3]
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	40023800 	.word	0x40023800
 8007c18:	0800b65c 	.word	0x0800b65c

08007c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c20:	b0ae      	sub	sp, #184	; 0xb8
 8007c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c42:	4bcb      	ldr	r3, [pc, #812]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 030c 	and.w	r3, r3, #12
 8007c4a:	2b0c      	cmp	r3, #12
 8007c4c:	f200 8206 	bhi.w	800805c <HAL_RCC_GetSysClockFreq+0x440>
 8007c50:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c56:	bf00      	nop
 8007c58:	08007c8d 	.word	0x08007c8d
 8007c5c:	0800805d 	.word	0x0800805d
 8007c60:	0800805d 	.word	0x0800805d
 8007c64:	0800805d 	.word	0x0800805d
 8007c68:	08007c95 	.word	0x08007c95
 8007c6c:	0800805d 	.word	0x0800805d
 8007c70:	0800805d 	.word	0x0800805d
 8007c74:	0800805d 	.word	0x0800805d
 8007c78:	08007c9d 	.word	0x08007c9d
 8007c7c:	0800805d 	.word	0x0800805d
 8007c80:	0800805d 	.word	0x0800805d
 8007c84:	0800805d 	.word	0x0800805d
 8007c88:	08007e8d 	.word	0x08007e8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c8c:	4bb9      	ldr	r3, [pc, #740]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x358>)
 8007c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007c92:	e1e7      	b.n	8008064 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c94:	4bb8      	ldr	r3, [pc, #736]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007c9a:	e1e3      	b.n	8008064 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c9c:	4bb4      	ldr	r3, [pc, #720]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ca8:	4bb1      	ldr	r3, [pc, #708]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d071      	beq.n	8007d98 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cb4:	4bae      	ldr	r3, [pc, #696]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	099b      	lsrs	r3, r3, #6
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007cc0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ccc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007cda:	4622      	mov	r2, r4
 8007cdc:	462b      	mov	r3, r5
 8007cde:	f04f 0000 	mov.w	r0, #0
 8007ce2:	f04f 0100 	mov.w	r1, #0
 8007ce6:	0159      	lsls	r1, r3, #5
 8007ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cec:	0150      	lsls	r0, r2, #5
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	1a51      	subs	r1, r2, r1
 8007cf6:	6439      	str	r1, [r7, #64]	; 0x40
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8007cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8007d00:	f04f 0200 	mov.w	r2, #0
 8007d04:	f04f 0300 	mov.w	r3, #0
 8007d08:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	018b      	lsls	r3, r1, #6
 8007d10:	4641      	mov	r1, r8
 8007d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d16:	4641      	mov	r1, r8
 8007d18:	018a      	lsls	r2, r1, #6
 8007d1a:	4641      	mov	r1, r8
 8007d1c:	1a51      	subs	r1, r2, r1
 8007d1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d20:	4649      	mov	r1, r9
 8007d22:	eb63 0301 	sbc.w	r3, r3, r1
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d28:	f04f 0200 	mov.w	r2, #0
 8007d2c:	f04f 0300 	mov.w	r3, #0
 8007d30:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007d34:	4649      	mov	r1, r9
 8007d36:	00cb      	lsls	r3, r1, #3
 8007d38:	4641      	mov	r1, r8
 8007d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d3e:	4641      	mov	r1, r8
 8007d40:	00ca      	lsls	r2, r1, #3
 8007d42:	4610      	mov	r0, r2
 8007d44:	4619      	mov	r1, r3
 8007d46:	4603      	mov	r3, r0
 8007d48:	4622      	mov	r2, r4
 8007d4a:	189b      	adds	r3, r3, r2
 8007d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8007d4e:	462b      	mov	r3, r5
 8007d50:	460a      	mov	r2, r1
 8007d52:	eb42 0303 	adc.w	r3, r2, r3
 8007d56:	637b      	str	r3, [r7, #52]	; 0x34
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	f04f 0300 	mov.w	r3, #0
 8007d60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007d64:	4629      	mov	r1, r5
 8007d66:	024b      	lsls	r3, r1, #9
 8007d68:	4621      	mov	r1, r4
 8007d6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007d6e:	4621      	mov	r1, r4
 8007d70:	024a      	lsls	r2, r1, #9
 8007d72:	4610      	mov	r0, r2
 8007d74:	4619      	mov	r1, r3
 8007d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007d88:	f7f8 febc 	bl	8000b04 <__aeabi_uldivmod>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4613      	mov	r3, r2
 8007d92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d96:	e067      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d98:	4b75      	ldr	r3, [pc, #468]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	099b      	lsrs	r3, r3, #6
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007da4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007db2:	2300      	movs	r3, #0
 8007db4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007db6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007dba:	4622      	mov	r2, r4
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	f04f 0000 	mov.w	r0, #0
 8007dc2:	f04f 0100 	mov.w	r1, #0
 8007dc6:	0159      	lsls	r1, r3, #5
 8007dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dcc:	0150      	lsls	r0, r2, #5
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	1a51      	subs	r1, r2, r1
 8007dd6:	62b9      	str	r1, [r7, #40]	; 0x28
 8007dd8:	4629      	mov	r1, r5
 8007dda:	eb63 0301 	sbc.w	r3, r3, r1
 8007dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007dec:	4649      	mov	r1, r9
 8007dee:	018b      	lsls	r3, r1, #6
 8007df0:	4641      	mov	r1, r8
 8007df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007df6:	4641      	mov	r1, r8
 8007df8:	018a      	lsls	r2, r1, #6
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e00:	4649      	mov	r1, r9
 8007e02:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e06:	f04f 0200 	mov.w	r2, #0
 8007e0a:	f04f 0300 	mov.w	r3, #0
 8007e0e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e12:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e1a:	4692      	mov	sl, r2
 8007e1c:	469b      	mov	fp, r3
 8007e1e:	4623      	mov	r3, r4
 8007e20:	eb1a 0303 	adds.w	r3, sl, r3
 8007e24:	623b      	str	r3, [r7, #32]
 8007e26:	462b      	mov	r3, r5
 8007e28:	eb4b 0303 	adc.w	r3, fp, r3
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	f04f 0300 	mov.w	r3, #0
 8007e36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	028b      	lsls	r3, r1, #10
 8007e3e:	4621      	mov	r1, r4
 8007e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e44:	4621      	mov	r1, r4
 8007e46:	028a      	lsls	r2, r1, #10
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e50:	2200      	movs	r2, #0
 8007e52:	673b      	str	r3, [r7, #112]	; 0x70
 8007e54:	677a      	str	r2, [r7, #116]	; 0x74
 8007e56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007e5a:	f7f8 fe53 	bl	8000b04 <__aeabi_uldivmod>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	4613      	mov	r3, r2
 8007e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e68:	4b41      	ldr	r3, [pc, #260]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	0c1b      	lsrs	r3, r3, #16
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	3301      	adds	r3, #1
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007e8a:	e0eb      	b.n	8008064 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e8c:	4b38      	ldr	r3, [pc, #224]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e98:	4b35      	ldr	r3, [pc, #212]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d06b      	beq.n	8007f7c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ea4:	4b32      	ldr	r3, [pc, #200]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	099b      	lsrs	r3, r3, #6
 8007eaa:	2200      	movs	r2, #0
 8007eac:	66bb      	str	r3, [r7, #104]	; 0x68
 8007eae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb6:	663b      	str	r3, [r7, #96]	; 0x60
 8007eb8:	2300      	movs	r3, #0
 8007eba:	667b      	str	r3, [r7, #100]	; 0x64
 8007ebc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	f04f 0000 	mov.w	r0, #0
 8007ec8:	f04f 0100 	mov.w	r1, #0
 8007ecc:	0159      	lsls	r1, r3, #5
 8007ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ed2:	0150      	lsls	r0, r2, #5
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4621      	mov	r1, r4
 8007eda:	1a51      	subs	r1, r2, r1
 8007edc:	61b9      	str	r1, [r7, #24]
 8007ede:	4629      	mov	r1, r5
 8007ee0:	eb63 0301 	sbc.w	r3, r3, r1
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	f04f 0300 	mov.w	r3, #0
 8007eee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007ef2:	4659      	mov	r1, fp
 8007ef4:	018b      	lsls	r3, r1, #6
 8007ef6:	4651      	mov	r1, sl
 8007ef8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007efc:	4651      	mov	r1, sl
 8007efe:	018a      	lsls	r2, r1, #6
 8007f00:	4651      	mov	r1, sl
 8007f02:	ebb2 0801 	subs.w	r8, r2, r1
 8007f06:	4659      	mov	r1, fp
 8007f08:	eb63 0901 	sbc.w	r9, r3, r1
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	f04f 0300 	mov.w	r3, #0
 8007f14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f20:	4690      	mov	r8, r2
 8007f22:	4699      	mov	r9, r3
 8007f24:	4623      	mov	r3, r4
 8007f26:	eb18 0303 	adds.w	r3, r8, r3
 8007f2a:	613b      	str	r3, [r7, #16]
 8007f2c:	462b      	mov	r3, r5
 8007f2e:	eb49 0303 	adc.w	r3, r9, r3
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	f04f 0200 	mov.w	r2, #0
 8007f38:	f04f 0300 	mov.w	r3, #0
 8007f3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007f40:	4629      	mov	r1, r5
 8007f42:	024b      	lsls	r3, r1, #9
 8007f44:	4621      	mov	r1, r4
 8007f46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	024a      	lsls	r2, r1, #9
 8007f4e:	4610      	mov	r0, r2
 8007f50:	4619      	mov	r1, r3
 8007f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f56:	2200      	movs	r2, #0
 8007f58:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f5a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007f5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f60:	f7f8 fdd0 	bl	8000b04 <__aeabi_uldivmod>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4613      	mov	r3, r2
 8007f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f6e:	e065      	b.n	800803c <HAL_RCC_GetSysClockFreq+0x420>
 8007f70:	40023800 	.word	0x40023800
 8007f74:	00f42400 	.word	0x00f42400
 8007f78:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f7c:	4b3d      	ldr	r3, [pc, #244]	; (8008074 <HAL_RCC_GetSysClockFreq+0x458>)
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	099b      	lsrs	r3, r3, #6
 8007f82:	2200      	movs	r2, #0
 8007f84:	4618      	mov	r0, r3
 8007f86:	4611      	mov	r1, r2
 8007f88:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8007f8e:	2300      	movs	r3, #0
 8007f90:	657b      	str	r3, [r7, #84]	; 0x54
 8007f92:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007f96:	4642      	mov	r2, r8
 8007f98:	464b      	mov	r3, r9
 8007f9a:	f04f 0000 	mov.w	r0, #0
 8007f9e:	f04f 0100 	mov.w	r1, #0
 8007fa2:	0159      	lsls	r1, r3, #5
 8007fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fa8:	0150      	lsls	r0, r2, #5
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4641      	mov	r1, r8
 8007fb0:	1a51      	subs	r1, r2, r1
 8007fb2:	60b9      	str	r1, [r7, #8]
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007fc8:	4659      	mov	r1, fp
 8007fca:	018b      	lsls	r3, r1, #6
 8007fcc:	4651      	mov	r1, sl
 8007fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fd2:	4651      	mov	r1, sl
 8007fd4:	018a      	lsls	r2, r1, #6
 8007fd6:	4651      	mov	r1, sl
 8007fd8:	1a54      	subs	r4, r2, r1
 8007fda:	4659      	mov	r1, fp
 8007fdc:	eb63 0501 	sbc.w	r5, r3, r1
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	00eb      	lsls	r3, r5, #3
 8007fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fee:	00e2      	lsls	r2, r4, #3
 8007ff0:	4614      	mov	r4, r2
 8007ff2:	461d      	mov	r5, r3
 8007ff4:	4643      	mov	r3, r8
 8007ff6:	18e3      	adds	r3, r4, r3
 8007ff8:	603b      	str	r3, [r7, #0]
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	eb45 0303 	adc.w	r3, r5, r3
 8008000:	607b      	str	r3, [r7, #4]
 8008002:	f04f 0200 	mov.w	r2, #0
 8008006:	f04f 0300 	mov.w	r3, #0
 800800a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800800e:	4629      	mov	r1, r5
 8008010:	028b      	lsls	r3, r1, #10
 8008012:	4621      	mov	r1, r4
 8008014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008018:	4621      	mov	r1, r4
 800801a:	028a      	lsls	r2, r1, #10
 800801c:	4610      	mov	r0, r2
 800801e:	4619      	mov	r1, r3
 8008020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008024:	2200      	movs	r2, #0
 8008026:	64bb      	str	r3, [r7, #72]	; 0x48
 8008028:	64fa      	str	r2, [r7, #76]	; 0x4c
 800802a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800802e:	f7f8 fd69 	bl	8000b04 <__aeabi_uldivmod>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4613      	mov	r3, r2
 8008038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800803c:	4b0d      	ldr	r3, [pc, #52]	; (8008074 <HAL_RCC_GetSysClockFreq+0x458>)
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	0f1b      	lsrs	r3, r3, #28
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800804a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800804e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008052:	fbb2 f3f3 	udiv	r3, r2, r3
 8008056:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800805a:	e003      	b.n	8008064 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800805c:	4b06      	ldr	r3, [pc, #24]	; (8008078 <HAL_RCC_GetSysClockFreq+0x45c>)
 800805e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008062:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008064:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008068:	4618      	mov	r0, r3
 800806a:	37b8      	adds	r7, #184	; 0xb8
 800806c:	46bd      	mov	sp, r7
 800806e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008072:	bf00      	nop
 8008074:	40023800 	.word	0x40023800
 8008078:	00f42400 	.word	0x00f42400

0800807c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e28d      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 8083 	beq.w	80081a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800809c:	4b94      	ldr	r3, [pc, #592]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f003 030c 	and.w	r3, r3, #12
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	d019      	beq.n	80080dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80080a8:	4b91      	ldr	r3, [pc, #580]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d106      	bne.n	80080c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80080b4:	4b8e      	ldr	r3, [pc, #568]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080c0:	d00c      	beq.n	80080dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080c2:	4b8b      	ldr	r3, [pc, #556]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80080ca:	2b0c      	cmp	r3, #12
 80080cc:	d112      	bne.n	80080f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080ce:	4b88      	ldr	r3, [pc, #544]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080da:	d10b      	bne.n	80080f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080dc:	4b84      	ldr	r3, [pc, #528]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d05b      	beq.n	80081a0 <HAL_RCC_OscConfig+0x124>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d157      	bne.n	80081a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e25a      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080fc:	d106      	bne.n	800810c <HAL_RCC_OscConfig+0x90>
 80080fe:	4b7c      	ldr	r3, [pc, #496]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a7b      	ldr	r2, [pc, #492]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	e01d      	b.n	8008148 <HAL_RCC_OscConfig+0xcc>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008114:	d10c      	bne.n	8008130 <HAL_RCC_OscConfig+0xb4>
 8008116:	4b76      	ldr	r3, [pc, #472]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a75      	ldr	r2, [pc, #468]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 800811c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	4b73      	ldr	r3, [pc, #460]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a72      	ldr	r2, [pc, #456]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	e00b      	b.n	8008148 <HAL_RCC_OscConfig+0xcc>
 8008130:	4b6f      	ldr	r3, [pc, #444]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a6e      	ldr	r2, [pc, #440]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	4b6c      	ldr	r3, [pc, #432]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a6b      	ldr	r2, [pc, #428]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d013      	beq.n	8008178 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008150:	f7fe fbc6 	bl	80068e0 <HAL_GetTick>
 8008154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008156:	e008      	b.n	800816a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008158:	f7fe fbc2 	bl	80068e0 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b64      	cmp	r3, #100	; 0x64
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e21f      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800816a:	4b61      	ldr	r3, [pc, #388]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0f0      	beq.n	8008158 <HAL_RCC_OscConfig+0xdc>
 8008176:	e014      	b.n	80081a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008178:	f7fe fbb2 	bl	80068e0 <HAL_GetTick>
 800817c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800817e:	e008      	b.n	8008192 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008180:	f7fe fbae 	bl	80068e0 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	2b64      	cmp	r3, #100	; 0x64
 800818c:	d901      	bls.n	8008192 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e20b      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008192:	4b57      	ldr	r3, [pc, #348]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1f0      	bne.n	8008180 <HAL_RCC_OscConfig+0x104>
 800819e:	e000      	b.n	80081a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d06f      	beq.n	800828e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80081ae:	4b50      	ldr	r3, [pc, #320]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 030c 	and.w	r3, r3, #12
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d017      	beq.n	80081ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80081ba:	4b4d      	ldr	r3, [pc, #308]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80081c2:	2b08      	cmp	r3, #8
 80081c4:	d105      	bne.n	80081d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80081c6:	4b4a      	ldr	r3, [pc, #296]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00b      	beq.n	80081ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081d2:	4b47      	ldr	r3, [pc, #284]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80081da:	2b0c      	cmp	r3, #12
 80081dc:	d11c      	bne.n	8008218 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081de:	4b44      	ldr	r3, [pc, #272]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d116      	bne.n	8008218 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081ea:	4b41      	ldr	r3, [pc, #260]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <HAL_RCC_OscConfig+0x186>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d001      	beq.n	8008202 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e1d3      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008202:	4b3b      	ldr	r3, [pc, #236]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	4937      	ldr	r1, [pc, #220]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008212:	4313      	orrs	r3, r2
 8008214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008216:	e03a      	b.n	800828e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d020      	beq.n	8008262 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008220:	4b34      	ldr	r3, [pc, #208]	; (80082f4 <HAL_RCC_OscConfig+0x278>)
 8008222:	2201      	movs	r2, #1
 8008224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008226:	f7fe fb5b 	bl	80068e0 <HAL_GetTick>
 800822a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800822c:	e008      	b.n	8008240 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800822e:	f7fe fb57 	bl	80068e0 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e1b4      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008240:	4b2b      	ldr	r3, [pc, #172]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0f0      	beq.n	800822e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800824c:	4b28      	ldr	r3, [pc, #160]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	4925      	ldr	r1, [pc, #148]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 800825c:	4313      	orrs	r3, r2
 800825e:	600b      	str	r3, [r1, #0]
 8008260:	e015      	b.n	800828e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008262:	4b24      	ldr	r3, [pc, #144]	; (80082f4 <HAL_RCC_OscConfig+0x278>)
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008268:	f7fe fb3a 	bl	80068e0 <HAL_GetTick>
 800826c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800826e:	e008      	b.n	8008282 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008270:	f7fe fb36 	bl	80068e0 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	2b02      	cmp	r3, #2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e193      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008282:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1f0      	bne.n	8008270 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0308 	and.w	r3, r3, #8
 8008296:	2b00      	cmp	r3, #0
 8008298:	d036      	beq.n	8008308 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d016      	beq.n	80082d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082a2:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <HAL_RCC_OscConfig+0x27c>)
 80082a4:	2201      	movs	r2, #1
 80082a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a8:	f7fe fb1a 	bl	80068e0 <HAL_GetTick>
 80082ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082ae:	e008      	b.n	80082c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082b0:	f7fe fb16 	bl	80068e0 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e173      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082c2:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <HAL_RCC_OscConfig+0x274>)
 80082c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0f0      	beq.n	80082b0 <HAL_RCC_OscConfig+0x234>
 80082ce:	e01b      	b.n	8008308 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082d0:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <HAL_RCC_OscConfig+0x27c>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d6:	f7fe fb03 	bl	80068e0 <HAL_GetTick>
 80082da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082dc:	e00e      	b.n	80082fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082de:	f7fe faff 	bl	80068e0 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d907      	bls.n	80082fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e15c      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
 80082f0:	40023800 	.word	0x40023800
 80082f4:	42470000 	.word	0x42470000
 80082f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082fc:	4b8a      	ldr	r3, [pc, #552]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 80082fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1ea      	bne.n	80082de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 8097 	beq.w	8008444 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008316:	2300      	movs	r3, #0
 8008318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800831a:	4b83      	ldr	r3, [pc, #524]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10f      	bne.n	8008346 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008326:	2300      	movs	r3, #0
 8008328:	60bb      	str	r3, [r7, #8]
 800832a:	4b7f      	ldr	r3, [pc, #508]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 800832c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832e:	4a7e      	ldr	r2, [pc, #504]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 8008330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008334:	6413      	str	r3, [r2, #64]	; 0x40
 8008336:	4b7c      	ldr	r3, [pc, #496]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800833e:	60bb      	str	r3, [r7, #8]
 8008340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008342:	2301      	movs	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008346:	4b79      	ldr	r3, [pc, #484]	; (800852c <HAL_RCC_OscConfig+0x4b0>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834e:	2b00      	cmp	r3, #0
 8008350:	d118      	bne.n	8008384 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008352:	4b76      	ldr	r3, [pc, #472]	; (800852c <HAL_RCC_OscConfig+0x4b0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a75      	ldr	r2, [pc, #468]	; (800852c <HAL_RCC_OscConfig+0x4b0>)
 8008358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800835c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800835e:	f7fe fabf 	bl	80068e0 <HAL_GetTick>
 8008362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008364:	e008      	b.n	8008378 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008366:	f7fe fabb 	bl	80068e0 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	2b02      	cmp	r3, #2
 8008372:	d901      	bls.n	8008378 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e118      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008378:	4b6c      	ldr	r3, [pc, #432]	; (800852c <HAL_RCC_OscConfig+0x4b0>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0f0      	beq.n	8008366 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d106      	bne.n	800839a <HAL_RCC_OscConfig+0x31e>
 800838c:	4b66      	ldr	r3, [pc, #408]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 800838e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008390:	4a65      	ldr	r2, [pc, #404]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 8008392:	f043 0301 	orr.w	r3, r3, #1
 8008396:	6713      	str	r3, [r2, #112]	; 0x70
 8008398:	e01c      	b.n	80083d4 <HAL_RCC_OscConfig+0x358>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b05      	cmp	r3, #5
 80083a0:	d10c      	bne.n	80083bc <HAL_RCC_OscConfig+0x340>
 80083a2:	4b61      	ldr	r3, [pc, #388]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 80083a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a6:	4a60      	ldr	r2, [pc, #384]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 80083a8:	f043 0304 	orr.w	r3, r3, #4
 80083ac:	6713      	str	r3, [r2, #112]	; 0x70
 80083ae:	4b5e      	ldr	r3, [pc, #376]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 80083b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b2:	4a5d      	ldr	r2, [pc, #372]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 80083b4:	f043 0301 	orr.w	r3, r3, #1
 80083b8:	6713      	str	r3, [r2, #112]	; 0x70
 80083ba:	e00b      	b.n	80083d4 <HAL_RCC_OscConfig+0x358>
 80083bc:	4b5a      	ldr	r3, [pc, #360]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 80083be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c0:	4a59      	ldr	r2, [pc, #356]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 80083c2:	f023 0301 	bic.w	r3, r3, #1
 80083c6:	6713      	str	r3, [r2, #112]	; 0x70
 80083c8:	4b57      	ldr	r3, [pc, #348]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 80083ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083cc:	4a56      	ldr	r2, [pc, #344]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 80083ce:	f023 0304 	bic.w	r3, r3, #4
 80083d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d015      	beq.n	8008408 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083dc:	f7fe fa80 	bl	80068e0 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083e2:	e00a      	b.n	80083fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083e4:	f7fe fa7c 	bl	80068e0 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e0d7      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083fa:	4b4b      	ldr	r3, [pc, #300]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0ee      	beq.n	80083e4 <HAL_RCC_OscConfig+0x368>
 8008406:	e014      	b.n	8008432 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008408:	f7fe fa6a 	bl	80068e0 <HAL_GetTick>
 800840c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800840e:	e00a      	b.n	8008426 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008410:	f7fe fa66 	bl	80068e0 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	f241 3288 	movw	r2, #5000	; 0x1388
 800841e:	4293      	cmp	r3, r2
 8008420:	d901      	bls.n	8008426 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e0c1      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008426:	4b40      	ldr	r3, [pc, #256]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 8008428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1ee      	bne.n	8008410 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d105      	bne.n	8008444 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008438:	4b3b      	ldr	r3, [pc, #236]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	4a3a      	ldr	r2, [pc, #232]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 800843e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 80ad 	beq.w	80085a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800844e:	4b36      	ldr	r3, [pc, #216]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 030c 	and.w	r3, r3, #12
 8008456:	2b08      	cmp	r3, #8
 8008458:	d060      	beq.n	800851c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d145      	bne.n	80084ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008462:	4b33      	ldr	r3, [pc, #204]	; (8008530 <HAL_RCC_OscConfig+0x4b4>)
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008468:	f7fe fa3a 	bl	80068e0 <HAL_GetTick>
 800846c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800846e:	e008      	b.n	8008482 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008470:	f7fe fa36 	bl	80068e0 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b02      	cmp	r3, #2
 800847c:	d901      	bls.n	8008482 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e093      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008482:	4b29      	ldr	r3, [pc, #164]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f0      	bne.n	8008470 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	69da      	ldr	r2, [r3, #28]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	431a      	orrs	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	019b      	lsls	r3, r3, #6
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a4:	085b      	lsrs	r3, r3, #1
 80084a6:	3b01      	subs	r3, #1
 80084a8:	041b      	lsls	r3, r3, #16
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	061b      	lsls	r3, r3, #24
 80084b2:	431a      	orrs	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b8:	071b      	lsls	r3, r3, #28
 80084ba:	491b      	ldr	r1, [pc, #108]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084c0:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <HAL_RCC_OscConfig+0x4b4>)
 80084c2:	2201      	movs	r2, #1
 80084c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c6:	f7fe fa0b 	bl	80068e0 <HAL_GetTick>
 80084ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084cc:	e008      	b.n	80084e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084ce:	f7fe fa07 	bl	80068e0 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d901      	bls.n	80084e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e064      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084e0:	4b11      	ldr	r3, [pc, #68]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0f0      	beq.n	80084ce <HAL_RCC_OscConfig+0x452>
 80084ec:	e05c      	b.n	80085a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084ee:	4b10      	ldr	r3, [pc, #64]	; (8008530 <HAL_RCC_OscConfig+0x4b4>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f4:	f7fe f9f4 	bl	80068e0 <HAL_GetTick>
 80084f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084fa:	e008      	b.n	800850e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084fc:	f7fe f9f0 	bl	80068e0 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b02      	cmp	r3, #2
 8008508:	d901      	bls.n	800850e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e04d      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800850e:	4b06      	ldr	r3, [pc, #24]	; (8008528 <HAL_RCC_OscConfig+0x4ac>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1f0      	bne.n	80084fc <HAL_RCC_OscConfig+0x480>
 800851a:	e045      	b.n	80085a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d107      	bne.n	8008534 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e040      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
 8008528:	40023800 	.word	0x40023800
 800852c:	40007000 	.word	0x40007000
 8008530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008534:	4b1f      	ldr	r3, [pc, #124]	; (80085b4 <HAL_RCC_OscConfig+0x538>)
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d030      	beq.n	80085a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800854c:	429a      	cmp	r2, r3
 800854e:	d129      	bne.n	80085a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800855a:	429a      	cmp	r2, r3
 800855c:	d122      	bne.n	80085a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008564:	4013      	ands	r3, r2
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800856a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800856c:	4293      	cmp	r3, r2
 800856e:	d119      	bne.n	80085a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857a:	085b      	lsrs	r3, r3, #1
 800857c:	3b01      	subs	r3, #1
 800857e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008580:	429a      	cmp	r2, r3
 8008582:	d10f      	bne.n	80085a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008590:	429a      	cmp	r2, r3
 8008592:	d107      	bne.n	80085a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d001      	beq.n	80085a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	40023800 	.word	0x40023800

080085b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e041      	b.n	800864e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7fd fe02 	bl	80061e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3304      	adds	r3, #4
 80085f4:	4619      	mov	r1, r3
 80085f6:	4610      	mov	r0, r2
 80085f8:	f000 fda4 	bl	8009144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b01      	cmp	r3, #1
 800866a:	d001      	beq.n	8008670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e04e      	b.n	800870e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0201 	orr.w	r2, r2, #1
 8008686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a23      	ldr	r2, [pc, #140]	; (800871c <HAL_TIM_Base_Start_IT+0xc4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d022      	beq.n	80086d8 <HAL_TIM_Base_Start_IT+0x80>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869a:	d01d      	beq.n	80086d8 <HAL_TIM_Base_Start_IT+0x80>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a1f      	ldr	r2, [pc, #124]	; (8008720 <HAL_TIM_Base_Start_IT+0xc8>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d018      	beq.n	80086d8 <HAL_TIM_Base_Start_IT+0x80>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a1e      	ldr	r2, [pc, #120]	; (8008724 <HAL_TIM_Base_Start_IT+0xcc>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d013      	beq.n	80086d8 <HAL_TIM_Base_Start_IT+0x80>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a1c      	ldr	r2, [pc, #112]	; (8008728 <HAL_TIM_Base_Start_IT+0xd0>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d00e      	beq.n	80086d8 <HAL_TIM_Base_Start_IT+0x80>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a1b      	ldr	r2, [pc, #108]	; (800872c <HAL_TIM_Base_Start_IT+0xd4>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d009      	beq.n	80086d8 <HAL_TIM_Base_Start_IT+0x80>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a19      	ldr	r2, [pc, #100]	; (8008730 <HAL_TIM_Base_Start_IT+0xd8>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d004      	beq.n	80086d8 <HAL_TIM_Base_Start_IT+0x80>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a18      	ldr	r2, [pc, #96]	; (8008734 <HAL_TIM_Base_Start_IT+0xdc>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d111      	bne.n	80086fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f003 0307 	and.w	r3, r3, #7
 80086e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b06      	cmp	r3, #6
 80086e8:	d010      	beq.n	800870c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f042 0201 	orr.w	r2, r2, #1
 80086f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086fa:	e007      	b.n	800870c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f042 0201 	orr.w	r2, r2, #1
 800870a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	40010000 	.word	0x40010000
 8008720:	40000400 	.word	0x40000400
 8008724:	40000800 	.word	0x40000800
 8008728:	40000c00 	.word	0x40000c00
 800872c:	40010400 	.word	0x40010400
 8008730:	40014000 	.word	0x40014000
 8008734:	40001800 	.word	0x40001800

08008738 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e041      	b.n	80087ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d106      	bne.n	8008764 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7fd fce6 	bl	8006130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3304      	adds	r3, #4
 8008774:	4619      	mov	r1, r3
 8008776:	4610      	mov	r0, r2
 8008778:	f000 fce4 	bl	8009144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d109      	bne.n	80087fc <HAL_TIM_PWM_Start+0x24>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	bf14      	ite	ne
 80087f4:	2301      	movne	r3, #1
 80087f6:	2300      	moveq	r3, #0
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	e022      	b.n	8008842 <HAL_TIM_PWM_Start+0x6a>
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d109      	bne.n	8008816 <HAL_TIM_PWM_Start+0x3e>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b01      	cmp	r3, #1
 800880c:	bf14      	ite	ne
 800880e:	2301      	movne	r3, #1
 8008810:	2300      	moveq	r3, #0
 8008812:	b2db      	uxtb	r3, r3
 8008814:	e015      	b.n	8008842 <HAL_TIM_PWM_Start+0x6a>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b08      	cmp	r3, #8
 800881a:	d109      	bne.n	8008830 <HAL_TIM_PWM_Start+0x58>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b01      	cmp	r3, #1
 8008826:	bf14      	ite	ne
 8008828:	2301      	movne	r3, #1
 800882a:	2300      	moveq	r3, #0
 800882c:	b2db      	uxtb	r3, r3
 800882e:	e008      	b.n	8008842 <HAL_TIM_PWM_Start+0x6a>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b01      	cmp	r3, #1
 800883a:	bf14      	ite	ne
 800883c:	2301      	movne	r3, #1
 800883e:	2300      	moveq	r3, #0
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e07c      	b.n	8008944 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d104      	bne.n	800885a <HAL_TIM_PWM_Start+0x82>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008858:	e013      	b.n	8008882 <HAL_TIM_PWM_Start+0xaa>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b04      	cmp	r3, #4
 800885e:	d104      	bne.n	800886a <HAL_TIM_PWM_Start+0x92>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008868:	e00b      	b.n	8008882 <HAL_TIM_PWM_Start+0xaa>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b08      	cmp	r3, #8
 800886e:	d104      	bne.n	800887a <HAL_TIM_PWM_Start+0xa2>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008878:	e003      	b.n	8008882 <HAL_TIM_PWM_Start+0xaa>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2202      	movs	r2, #2
 800887e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2201      	movs	r2, #1
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	4618      	mov	r0, r3
 800888c:	f000 ff44 	bl	8009718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a2d      	ldr	r2, [pc, #180]	; (800894c <HAL_TIM_PWM_Start+0x174>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d004      	beq.n	80088a4 <HAL_TIM_PWM_Start+0xcc>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a2c      	ldr	r2, [pc, #176]	; (8008950 <HAL_TIM_PWM_Start+0x178>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d101      	bne.n	80088a8 <HAL_TIM_PWM_Start+0xd0>
 80088a4:	2301      	movs	r3, #1
 80088a6:	e000      	b.n	80088aa <HAL_TIM_PWM_Start+0xd2>
 80088a8:	2300      	movs	r3, #0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d007      	beq.n	80088be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a22      	ldr	r2, [pc, #136]	; (800894c <HAL_TIM_PWM_Start+0x174>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d022      	beq.n	800890e <HAL_TIM_PWM_Start+0x136>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d0:	d01d      	beq.n	800890e <HAL_TIM_PWM_Start+0x136>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1f      	ldr	r2, [pc, #124]	; (8008954 <HAL_TIM_PWM_Start+0x17c>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d018      	beq.n	800890e <HAL_TIM_PWM_Start+0x136>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1d      	ldr	r2, [pc, #116]	; (8008958 <HAL_TIM_PWM_Start+0x180>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d013      	beq.n	800890e <HAL_TIM_PWM_Start+0x136>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a1c      	ldr	r2, [pc, #112]	; (800895c <HAL_TIM_PWM_Start+0x184>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00e      	beq.n	800890e <HAL_TIM_PWM_Start+0x136>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a16      	ldr	r2, [pc, #88]	; (8008950 <HAL_TIM_PWM_Start+0x178>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d009      	beq.n	800890e <HAL_TIM_PWM_Start+0x136>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a18      	ldr	r2, [pc, #96]	; (8008960 <HAL_TIM_PWM_Start+0x188>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d004      	beq.n	800890e <HAL_TIM_PWM_Start+0x136>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a16      	ldr	r2, [pc, #88]	; (8008964 <HAL_TIM_PWM_Start+0x18c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d111      	bne.n	8008932 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f003 0307 	and.w	r3, r3, #7
 8008918:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b06      	cmp	r3, #6
 800891e:	d010      	beq.n	8008942 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0201 	orr.w	r2, r2, #1
 800892e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008930:	e007      	b.n	8008942 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f042 0201 	orr.w	r2, r2, #1
 8008940:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	40010000 	.word	0x40010000
 8008950:	40010400 	.word	0x40010400
 8008954:	40000400 	.word	0x40000400
 8008958:	40000800 	.word	0x40000800
 800895c:	40000c00 	.word	0x40000c00
 8008960:	40014000 	.word	0x40014000
 8008964:	40001800 	.word	0x40001800

08008968 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e097      	b.n	8008aac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b00      	cmp	r3, #0
 8008986:	d106      	bne.n	8008996 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f7fd fb17 	bl	8005fc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	6812      	ldr	r2, [r2, #0]
 80089a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089ac:	f023 0307 	bic.w	r3, r3, #7
 80089b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3304      	adds	r3, #4
 80089ba:	4619      	mov	r1, r3
 80089bc:	4610      	mov	r0, r2
 80089be:	f000 fbc1 	bl	8009144 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6a1b      	ldr	r3, [r3, #32]
 80089d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ea:	f023 0303 	bic.w	r3, r3, #3
 80089ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	4313      	orrs	r3, r2
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008a08:	f023 030c 	bic.w	r3, r3, #12
 8008a0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	021b      	lsls	r3, r3, #8
 8008a24:	4313      	orrs	r3, r2
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	011a      	lsls	r2, r3, #4
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	031b      	lsls	r3, r3, #12
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008a46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008a4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	011b      	lsls	r3, r3, #4
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ac4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008acc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ad4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008adc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d110      	bne.n	8008b06 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d102      	bne.n	8008af0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008aea:	7b7b      	ldrb	r3, [r7, #13]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d001      	beq.n	8008af4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e069      	b.n	8008bc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b04:	e031      	b.n	8008b6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d110      	bne.n	8008b2e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d102      	bne.n	8008b18 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b12:	7b3b      	ldrb	r3, [r7, #12]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d001      	beq.n	8008b1c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e055      	b.n	8008bc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b2c:	e01d      	b.n	8008b6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d108      	bne.n	8008b46 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d105      	bne.n	8008b46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b3a:	7b7b      	ldrb	r3, [r7, #13]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d102      	bne.n	8008b46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b40:	7b3b      	ldrb	r3, [r7, #12]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d001      	beq.n	8008b4a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e03e      	b.n	8008bc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2202      	movs	r2, #2
 8008b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2202      	movs	r2, #2
 8008b56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2202      	movs	r2, #2
 8008b66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d003      	beq.n	8008b78 <HAL_TIM_Encoder_Start+0xc4>
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d008      	beq.n	8008b88 <HAL_TIM_Encoder_Start+0xd4>
 8008b76:	e00f      	b.n	8008b98 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fdc9 	bl	8009718 <TIM_CCxChannelCmd>
      break;
 8008b86:	e016      	b.n	8008bb6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	2104      	movs	r1, #4
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fdc1 	bl	8009718 <TIM_CCxChannelCmd>
      break;
 8008b96:	e00e      	b.n	8008bb6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 fdb9 	bl	8009718 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2201      	movs	r2, #1
 8008bac:	2104      	movs	r1, #4
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fdb2 	bl	8009718 <TIM_CCxChannelCmd>
      break;
 8008bb4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f042 0201 	orr.w	r2, r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d122      	bne.n	8008c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d11b      	bne.n	8008c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f06f 0202 	mvn.w	r2, #2
 8008bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d003      	beq.n	8008c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fa77 	bl	8009106 <HAL_TIM_IC_CaptureCallback>
 8008c18:	e005      	b.n	8008c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa69 	bl	80090f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fa7a 	bl	800911a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	f003 0304 	and.w	r3, r3, #4
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d122      	bne.n	8008c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f003 0304 	and.w	r3, r3, #4
 8008c44:	2b04      	cmp	r3, #4
 8008c46:	d11b      	bne.n	8008c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f06f 0204 	mvn.w	r2, #4
 8008c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2202      	movs	r2, #2
 8008c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fa4d 	bl	8009106 <HAL_TIM_IC_CaptureCallback>
 8008c6c:	e005      	b.n	8008c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa3f 	bl	80090f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fa50 	bl	800911a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	f003 0308 	and.w	r3, r3, #8
 8008c8a:	2b08      	cmp	r3, #8
 8008c8c:	d122      	bne.n	8008cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f003 0308 	and.w	r3, r3, #8
 8008c98:	2b08      	cmp	r3, #8
 8008c9a:	d11b      	bne.n	8008cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f06f 0208 	mvn.w	r2, #8
 8008ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2204      	movs	r2, #4
 8008caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	f003 0303 	and.w	r3, r3, #3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fa23 	bl	8009106 <HAL_TIM_IC_CaptureCallback>
 8008cc0:	e005      	b.n	8008cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fa15 	bl	80090f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fa26 	bl	800911a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	f003 0310 	and.w	r3, r3, #16
 8008cde:	2b10      	cmp	r3, #16
 8008ce0:	d122      	bne.n	8008d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f003 0310 	and.w	r3, r3, #16
 8008cec:	2b10      	cmp	r3, #16
 8008cee:	d11b      	bne.n	8008d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f06f 0210 	mvn.w	r2, #16
 8008cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f9f9 	bl	8009106 <HAL_TIM_IC_CaptureCallback>
 8008d14:	e005      	b.n	8008d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f9eb 	bl	80090f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f9fc 	bl	800911a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d10e      	bne.n	8008d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d107      	bne.n	8008d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f06f 0201 	mvn.w	r2, #1
 8008d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7f8 f886 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5e:	2b80      	cmp	r3, #128	; 0x80
 8008d60:	d10e      	bne.n	8008d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d6c:	2b80      	cmp	r3, #128	; 0x80
 8008d6e:	d107      	bne.n	8008d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fdca 	bl	8009914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8a:	2b40      	cmp	r3, #64	; 0x40
 8008d8c:	d10e      	bne.n	8008dac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d98:	2b40      	cmp	r3, #64	; 0x40
 8008d9a:	d107      	bne.n	8008dac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f9c1 	bl	800912e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	f003 0320 	and.w	r3, r3, #32
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	d10e      	bne.n	8008dd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f003 0320 	and.w	r3, r3, #32
 8008dc4:	2b20      	cmp	r3, #32
 8008dc6:	d107      	bne.n	8008dd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f06f 0220 	mvn.w	r2, #32
 8008dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fd94 	bl	8009900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d101      	bne.n	8008dfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	e0ae      	b.n	8008f5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b0c      	cmp	r3, #12
 8008e0a:	f200 809f 	bhi.w	8008f4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008e0e:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e14:	08008e49 	.word	0x08008e49
 8008e18:	08008f4d 	.word	0x08008f4d
 8008e1c:	08008f4d 	.word	0x08008f4d
 8008e20:	08008f4d 	.word	0x08008f4d
 8008e24:	08008e89 	.word	0x08008e89
 8008e28:	08008f4d 	.word	0x08008f4d
 8008e2c:	08008f4d 	.word	0x08008f4d
 8008e30:	08008f4d 	.word	0x08008f4d
 8008e34:	08008ecb 	.word	0x08008ecb
 8008e38:	08008f4d 	.word	0x08008f4d
 8008e3c:	08008f4d 	.word	0x08008f4d
 8008e40:	08008f4d 	.word	0x08008f4d
 8008e44:	08008f0b 	.word	0x08008f0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68b9      	ldr	r1, [r7, #8]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fa18 	bl	8009284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699a      	ldr	r2, [r3, #24]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0208 	orr.w	r2, r2, #8
 8008e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	699a      	ldr	r2, [r3, #24]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0204 	bic.w	r2, r2, #4
 8008e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6999      	ldr	r1, [r3, #24]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	691a      	ldr	r2, [r3, #16]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	619a      	str	r2, [r3, #24]
      break;
 8008e86:	e064      	b.n	8008f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 fa68 	bl	8009364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	699a      	ldr	r2, [r3, #24]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	699a      	ldr	r2, [r3, #24]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6999      	ldr	r1, [r3, #24]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	021a      	lsls	r2, r3, #8
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	430a      	orrs	r2, r1
 8008ec6:	619a      	str	r2, [r3, #24]
      break;
 8008ec8:	e043      	b.n	8008f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 fabd 	bl	8009450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69da      	ldr	r2, [r3, #28]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f042 0208 	orr.w	r2, r2, #8
 8008ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69da      	ldr	r2, [r3, #28]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f022 0204 	bic.w	r2, r2, #4
 8008ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	69d9      	ldr	r1, [r3, #28]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	691a      	ldr	r2, [r3, #16]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	61da      	str	r2, [r3, #28]
      break;
 8008f08:	e023      	b.n	8008f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68b9      	ldr	r1, [r7, #8]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 fb11 	bl	8009538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69da      	ldr	r2, [r3, #28]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	69da      	ldr	r2, [r3, #28]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	69d9      	ldr	r1, [r3, #28]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	021a      	lsls	r2, r3, #8
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	61da      	str	r2, [r3, #28]
      break;
 8008f4a:	e002      	b.n	8008f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d101      	bne.n	8008f80 <HAL_TIM_ConfigClockSource+0x1c>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e0b4      	b.n	80090ea <HAL_TIM_ConfigClockSource+0x186>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fb8:	d03e      	beq.n	8009038 <HAL_TIM_ConfigClockSource+0xd4>
 8008fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fbe:	f200 8087 	bhi.w	80090d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc6:	f000 8086 	beq.w	80090d6 <HAL_TIM_ConfigClockSource+0x172>
 8008fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fce:	d87f      	bhi.n	80090d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fd0:	2b70      	cmp	r3, #112	; 0x70
 8008fd2:	d01a      	beq.n	800900a <HAL_TIM_ConfigClockSource+0xa6>
 8008fd4:	2b70      	cmp	r3, #112	; 0x70
 8008fd6:	d87b      	bhi.n	80090d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fd8:	2b60      	cmp	r3, #96	; 0x60
 8008fda:	d050      	beq.n	800907e <HAL_TIM_ConfigClockSource+0x11a>
 8008fdc:	2b60      	cmp	r3, #96	; 0x60
 8008fde:	d877      	bhi.n	80090d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fe0:	2b50      	cmp	r3, #80	; 0x50
 8008fe2:	d03c      	beq.n	800905e <HAL_TIM_ConfigClockSource+0xfa>
 8008fe4:	2b50      	cmp	r3, #80	; 0x50
 8008fe6:	d873      	bhi.n	80090d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fe8:	2b40      	cmp	r3, #64	; 0x40
 8008fea:	d058      	beq.n	800909e <HAL_TIM_ConfigClockSource+0x13a>
 8008fec:	2b40      	cmp	r3, #64	; 0x40
 8008fee:	d86f      	bhi.n	80090d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ff0:	2b30      	cmp	r3, #48	; 0x30
 8008ff2:	d064      	beq.n	80090be <HAL_TIM_ConfigClockSource+0x15a>
 8008ff4:	2b30      	cmp	r3, #48	; 0x30
 8008ff6:	d86b      	bhi.n	80090d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ff8:	2b20      	cmp	r3, #32
 8008ffa:	d060      	beq.n	80090be <HAL_TIM_ConfigClockSource+0x15a>
 8008ffc:	2b20      	cmp	r3, #32
 8008ffe:	d867      	bhi.n	80090d0 <HAL_TIM_ConfigClockSource+0x16c>
 8009000:	2b00      	cmp	r3, #0
 8009002:	d05c      	beq.n	80090be <HAL_TIM_ConfigClockSource+0x15a>
 8009004:	2b10      	cmp	r3, #16
 8009006:	d05a      	beq.n	80090be <HAL_TIM_ConfigClockSource+0x15a>
 8009008:	e062      	b.n	80090d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6818      	ldr	r0, [r3, #0]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	6899      	ldr	r1, [r3, #8]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	f000 fb5d 	bl	80096d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800902c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	609a      	str	r2, [r3, #8]
      break;
 8009036:	e04f      	b.n	80090d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6818      	ldr	r0, [r3, #0]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	6899      	ldr	r1, [r3, #8]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f000 fb46 	bl	80096d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800905a:	609a      	str	r2, [r3, #8]
      break;
 800905c:	e03c      	b.n	80090d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	6859      	ldr	r1, [r3, #4]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	461a      	mov	r2, r3
 800906c:	f000 faba 	bl	80095e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2150      	movs	r1, #80	; 0x50
 8009076:	4618      	mov	r0, r3
 8009078:	f000 fb13 	bl	80096a2 <TIM_ITRx_SetConfig>
      break;
 800907c:	e02c      	b.n	80090d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	6859      	ldr	r1, [r3, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	461a      	mov	r2, r3
 800908c:	f000 fad9 	bl	8009642 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2160      	movs	r1, #96	; 0x60
 8009096:	4618      	mov	r0, r3
 8009098:	f000 fb03 	bl	80096a2 <TIM_ITRx_SetConfig>
      break;
 800909c:	e01c      	b.n	80090d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6818      	ldr	r0, [r3, #0]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	6859      	ldr	r1, [r3, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	461a      	mov	r2, r3
 80090ac:	f000 fa9a 	bl	80095e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2140      	movs	r1, #64	; 0x40
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 faf3 	bl	80096a2 <TIM_ITRx_SetConfig>
      break;
 80090bc:	e00c      	b.n	80090d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4619      	mov	r1, r3
 80090c8:	4610      	mov	r0, r2
 80090ca:	f000 faea 	bl	80096a2 <TIM_ITRx_SetConfig>
      break;
 80090ce:	e003      	b.n	80090d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	73fb      	strb	r3, [r7, #15]
      break;
 80090d4:	e000      	b.n	80090d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80090d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b083      	sub	sp, #12
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090fa:	bf00      	nop
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009106:	b480      	push	{r7}
 8009108:	b083      	sub	sp, #12
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800910e:	bf00      	nop
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800911a:	b480      	push	{r7}
 800911c:	b083      	sub	sp, #12
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009122:	bf00      	nop
 8009124:	370c      	adds	r7, #12
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800912e:	b480      	push	{r7}
 8009130:	b083      	sub	sp, #12
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
	...

08009144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a40      	ldr	r2, [pc, #256]	; (8009258 <TIM_Base_SetConfig+0x114>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d013      	beq.n	8009184 <TIM_Base_SetConfig+0x40>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009162:	d00f      	beq.n	8009184 <TIM_Base_SetConfig+0x40>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a3d      	ldr	r2, [pc, #244]	; (800925c <TIM_Base_SetConfig+0x118>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d00b      	beq.n	8009184 <TIM_Base_SetConfig+0x40>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a3c      	ldr	r2, [pc, #240]	; (8009260 <TIM_Base_SetConfig+0x11c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d007      	beq.n	8009184 <TIM_Base_SetConfig+0x40>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a3b      	ldr	r2, [pc, #236]	; (8009264 <TIM_Base_SetConfig+0x120>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d003      	beq.n	8009184 <TIM_Base_SetConfig+0x40>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a3a      	ldr	r2, [pc, #232]	; (8009268 <TIM_Base_SetConfig+0x124>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d108      	bne.n	8009196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800918a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	4313      	orrs	r3, r2
 8009194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a2f      	ldr	r2, [pc, #188]	; (8009258 <TIM_Base_SetConfig+0x114>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d02b      	beq.n	80091f6 <TIM_Base_SetConfig+0xb2>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091a4:	d027      	beq.n	80091f6 <TIM_Base_SetConfig+0xb2>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a2c      	ldr	r2, [pc, #176]	; (800925c <TIM_Base_SetConfig+0x118>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d023      	beq.n	80091f6 <TIM_Base_SetConfig+0xb2>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a2b      	ldr	r2, [pc, #172]	; (8009260 <TIM_Base_SetConfig+0x11c>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d01f      	beq.n	80091f6 <TIM_Base_SetConfig+0xb2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a2a      	ldr	r2, [pc, #168]	; (8009264 <TIM_Base_SetConfig+0x120>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d01b      	beq.n	80091f6 <TIM_Base_SetConfig+0xb2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a29      	ldr	r2, [pc, #164]	; (8009268 <TIM_Base_SetConfig+0x124>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d017      	beq.n	80091f6 <TIM_Base_SetConfig+0xb2>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a28      	ldr	r2, [pc, #160]	; (800926c <TIM_Base_SetConfig+0x128>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d013      	beq.n	80091f6 <TIM_Base_SetConfig+0xb2>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a27      	ldr	r2, [pc, #156]	; (8009270 <TIM_Base_SetConfig+0x12c>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d00f      	beq.n	80091f6 <TIM_Base_SetConfig+0xb2>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a26      	ldr	r2, [pc, #152]	; (8009274 <TIM_Base_SetConfig+0x130>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d00b      	beq.n	80091f6 <TIM_Base_SetConfig+0xb2>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a25      	ldr	r2, [pc, #148]	; (8009278 <TIM_Base_SetConfig+0x134>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d007      	beq.n	80091f6 <TIM_Base_SetConfig+0xb2>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a24      	ldr	r2, [pc, #144]	; (800927c <TIM_Base_SetConfig+0x138>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d003      	beq.n	80091f6 <TIM_Base_SetConfig+0xb2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a23      	ldr	r2, [pc, #140]	; (8009280 <TIM_Base_SetConfig+0x13c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d108      	bne.n	8009208 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4313      	orrs	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	4313      	orrs	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a0a      	ldr	r2, [pc, #40]	; (8009258 <TIM_Base_SetConfig+0x114>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d003      	beq.n	800923c <TIM_Base_SetConfig+0xf8>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a0c      	ldr	r2, [pc, #48]	; (8009268 <TIM_Base_SetConfig+0x124>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d103      	bne.n	8009244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	691a      	ldr	r2, [r3, #16]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	615a      	str	r2, [r3, #20]
}
 800924a:	bf00      	nop
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	40010000 	.word	0x40010000
 800925c:	40000400 	.word	0x40000400
 8009260:	40000800 	.word	0x40000800
 8009264:	40000c00 	.word	0x40000c00
 8009268:	40010400 	.word	0x40010400
 800926c:	40014000 	.word	0x40014000
 8009270:	40014400 	.word	0x40014400
 8009274:	40014800 	.word	0x40014800
 8009278:	40001800 	.word	0x40001800
 800927c:	40001c00 	.word	0x40001c00
 8009280:	40002000 	.word	0x40002000

08009284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	f023 0201 	bic.w	r2, r3, #1
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f023 0303 	bic.w	r3, r3, #3
 80092ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f023 0302 	bic.w	r3, r3, #2
 80092cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a20      	ldr	r2, [pc, #128]	; (800935c <TIM_OC1_SetConfig+0xd8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d003      	beq.n	80092e8 <TIM_OC1_SetConfig+0x64>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a1f      	ldr	r2, [pc, #124]	; (8009360 <TIM_OC1_SetConfig+0xdc>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d10c      	bne.n	8009302 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f023 0308 	bic.w	r3, r3, #8
 80092ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f023 0304 	bic.w	r3, r3, #4
 8009300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a15      	ldr	r2, [pc, #84]	; (800935c <TIM_OC1_SetConfig+0xd8>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d003      	beq.n	8009312 <TIM_OC1_SetConfig+0x8e>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a14      	ldr	r2, [pc, #80]	; (8009360 <TIM_OC1_SetConfig+0xdc>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d111      	bne.n	8009336 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	4313      	orrs	r3, r2
 800932a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	4313      	orrs	r3, r2
 8009334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	621a      	str	r2, [r3, #32]
}
 8009350:	bf00      	nop
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	40010000 	.word	0x40010000
 8009360:	40010400 	.word	0x40010400

08009364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	f023 0210 	bic.w	r2, r3, #16
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800939a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	021b      	lsls	r3, r3, #8
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f023 0320 	bic.w	r3, r3, #32
 80093ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	011b      	lsls	r3, r3, #4
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a22      	ldr	r2, [pc, #136]	; (8009448 <TIM_OC2_SetConfig+0xe4>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d003      	beq.n	80093cc <TIM_OC2_SetConfig+0x68>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a21      	ldr	r2, [pc, #132]	; (800944c <TIM_OC2_SetConfig+0xe8>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d10d      	bne.n	80093e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	011b      	lsls	r3, r3, #4
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	4313      	orrs	r3, r2
 80093de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a17      	ldr	r2, [pc, #92]	; (8009448 <TIM_OC2_SetConfig+0xe4>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d003      	beq.n	80093f8 <TIM_OC2_SetConfig+0x94>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a16      	ldr	r2, [pc, #88]	; (800944c <TIM_OC2_SetConfig+0xe8>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d113      	bne.n	8009420 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	695b      	ldr	r3, [r3, #20]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	4313      	orrs	r3, r2
 8009412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	4313      	orrs	r3, r2
 800941e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	621a      	str	r2, [r3, #32]
}
 800943a:	bf00      	nop
 800943c:	371c      	adds	r7, #28
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	40010000 	.word	0x40010000
 800944c:	40010400 	.word	0x40010400

08009450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800947e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0303 	bic.w	r3, r3, #3
 8009486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4313      	orrs	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	021b      	lsls	r3, r3, #8
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a21      	ldr	r2, [pc, #132]	; (8009530 <TIM_OC3_SetConfig+0xe0>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d003      	beq.n	80094b6 <TIM_OC3_SetConfig+0x66>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a20      	ldr	r2, [pc, #128]	; (8009534 <TIM_OC3_SetConfig+0xe4>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d10d      	bne.n	80094d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	021b      	lsls	r3, r3, #8
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a16      	ldr	r2, [pc, #88]	; (8009530 <TIM_OC3_SetConfig+0xe0>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d003      	beq.n	80094e2 <TIM_OC3_SetConfig+0x92>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a15      	ldr	r2, [pc, #84]	; (8009534 <TIM_OC3_SetConfig+0xe4>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d113      	bne.n	800950a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	011b      	lsls	r3, r3, #4
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	4313      	orrs	r3, r2
 8009508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	621a      	str	r2, [r3, #32]
}
 8009524:	bf00      	nop
 8009526:	371c      	adds	r7, #28
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	40010000 	.word	0x40010000
 8009534:	40010400 	.word	0x40010400

08009538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800956e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	021b      	lsls	r3, r3, #8
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	4313      	orrs	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	031b      	lsls	r3, r3, #12
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	4313      	orrs	r3, r2
 800958e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a12      	ldr	r2, [pc, #72]	; (80095dc <TIM_OC4_SetConfig+0xa4>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d003      	beq.n	80095a0 <TIM_OC4_SetConfig+0x68>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a11      	ldr	r2, [pc, #68]	; (80095e0 <TIM_OC4_SetConfig+0xa8>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d109      	bne.n	80095b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	019b      	lsls	r3, r3, #6
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	621a      	str	r2, [r3, #32]
}
 80095ce:	bf00      	nop
 80095d0:	371c      	adds	r7, #28
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	40010000 	.word	0x40010000
 80095e0:	40010400 	.word	0x40010400

080095e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b087      	sub	sp, #28
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6a1b      	ldr	r3, [r3, #32]
 80095f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	f023 0201 	bic.w	r2, r3, #1
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800960e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	011b      	lsls	r3, r3, #4
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	4313      	orrs	r3, r2
 8009618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f023 030a 	bic.w	r3, r3, #10
 8009620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	4313      	orrs	r3, r2
 8009628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	621a      	str	r2, [r3, #32]
}
 8009636:	bf00      	nop
 8009638:	371c      	adds	r7, #28
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009642:	b480      	push	{r7}
 8009644:	b087      	sub	sp, #28
 8009646:	af00      	add	r7, sp, #0
 8009648:	60f8      	str	r0, [r7, #12]
 800964a:	60b9      	str	r1, [r7, #8]
 800964c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	f023 0210 	bic.w	r2, r3, #16
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6a1b      	ldr	r3, [r3, #32]
 8009664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800966c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	031b      	lsls	r3, r3, #12
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	4313      	orrs	r3, r2
 8009676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800967e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	011b      	lsls	r3, r3, #4
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	4313      	orrs	r3, r2
 8009688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	621a      	str	r2, [r3, #32]
}
 8009696:	bf00      	nop
 8009698:	371c      	adds	r7, #28
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b085      	sub	sp, #20
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096ba:	683a      	ldr	r2, [r7, #0]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4313      	orrs	r3, r2
 80096c0:	f043 0307 	orr.w	r3, r3, #7
 80096c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	609a      	str	r2, [r3, #8]
}
 80096cc:	bf00      	nop
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096d8:	b480      	push	{r7}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
 80096e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	021a      	lsls	r2, r3, #8
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	431a      	orrs	r2, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	4313      	orrs	r3, r2
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	4313      	orrs	r3, r2
 8009704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	609a      	str	r2, [r3, #8]
}
 800970c:	bf00      	nop
 800970e:	371c      	adds	r7, #28
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f003 031f 	and.w	r3, r3, #31
 800972a:	2201      	movs	r2, #1
 800972c:	fa02 f303 	lsl.w	r3, r2, r3
 8009730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6a1a      	ldr	r2, [r3, #32]
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	43db      	mvns	r3, r3
 800973a:	401a      	ands	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6a1a      	ldr	r2, [r3, #32]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f003 031f 	and.w	r3, r3, #31
 800974a:	6879      	ldr	r1, [r7, #4]
 800974c:	fa01 f303 	lsl.w	r3, r1, r3
 8009750:	431a      	orrs	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	621a      	str	r2, [r3, #32]
}
 8009756:	bf00      	nop
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
	...

08009764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009774:	2b01      	cmp	r3, #1
 8009776:	d101      	bne.n	800977c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009778:	2302      	movs	r3, #2
 800977a:	e05a      	b.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a21      	ldr	r2, [pc, #132]	; (8009840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d022      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c8:	d01d      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a1d      	ldr	r2, [pc, #116]	; (8009844 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d018      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d013      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a1a      	ldr	r2, [pc, #104]	; (800984c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00e      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a18      	ldr	r2, [pc, #96]	; (8009850 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d009      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a17      	ldr	r2, [pc, #92]	; (8009854 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d004      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a15      	ldr	r2, [pc, #84]	; (8009858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d10c      	bne.n	8009820 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800980c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	4313      	orrs	r3, r2
 8009816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	40010000 	.word	0x40010000
 8009844:	40000400 	.word	0x40000400
 8009848:	40000800 	.word	0x40000800
 800984c:	40000c00 	.word	0x40000c00
 8009850:	40010400 	.word	0x40010400
 8009854:	40014000 	.word	0x40014000
 8009858:	40001800 	.word	0x40001800

0800985c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009866:	2300      	movs	r3, #0
 8009868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009870:	2b01      	cmp	r3, #1
 8009872:	d101      	bne.n	8009878 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009874:	2302      	movs	r3, #2
 8009876:	e03d      	b.n	80098f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	4313      	orrs	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	4313      	orrs	r3, r2
 800989a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	695b      	ldr	r3, [r3, #20]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	4313      	orrs	r3, r2
 80098e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3714      	adds	r7, #20
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e03f      	b.n	80099ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b00      	cmp	r3, #0
 8009944:	d106      	bne.n	8009954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7fc fcfa 	bl	8006348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2224      	movs	r2, #36	; 0x24
 8009958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68da      	ldr	r2, [r3, #12]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800996a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 f871 	bl	800aa54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	691a      	ldr	r2, [r3, #16]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	695a      	ldr	r2, [r3, #20]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2220      	movs	r2, #32
 80099ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e021      	b.n	8009a18 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2224      	movs	r2, #36	; 0x24
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68da      	ldr	r2, [r3, #12]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099ea:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7fc fdc1 	bl	8006574 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b08a      	sub	sp, #40	; 0x28
 8009a24:	af02      	add	r7, sp, #8
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a30:	2300      	movs	r3, #0
 8009a32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b20      	cmp	r3, #32
 8009a3e:	d17c      	bne.n	8009b3a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d002      	beq.n	8009a4c <HAL_UART_Transmit+0x2c>
 8009a46:	88fb      	ldrh	r3, [r7, #6]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d101      	bne.n	8009a50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e075      	b.n	8009b3c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d101      	bne.n	8009a5e <HAL_UART_Transmit+0x3e>
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	e06e      	b.n	8009b3c <HAL_UART_Transmit+0x11c>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2221      	movs	r2, #33	; 0x21
 8009a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a74:	f7fc ff34 	bl	80068e0 <HAL_GetTick>
 8009a78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	88fa      	ldrh	r2, [r7, #6]
 8009a7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	88fa      	ldrh	r2, [r7, #6]
 8009a84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a8e:	d108      	bne.n	8009aa2 <HAL_UART_Transmit+0x82>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d104      	bne.n	8009aa2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	61bb      	str	r3, [r7, #24]
 8009aa0:	e003      	b.n	8009aaa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009ab2:	e02a      	b.n	8009b0a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	2200      	movs	r2, #0
 8009abc:	2180      	movs	r1, #128	; 0x80
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fcf9 	bl	800a4b6 <UART_WaitOnFlagUntilTimeout>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e036      	b.n	8009b3c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10b      	bne.n	8009aec <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ae2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	3302      	adds	r3, #2
 8009ae8:	61bb      	str	r3, [r7, #24]
 8009aea:	e007      	b.n	8009afc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	781a      	ldrb	r2, [r3, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	3301      	adds	r3, #1
 8009afa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3b01      	subs	r3, #1
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1cf      	bne.n	8009ab4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	2140      	movs	r1, #64	; 0x40
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 fcc9 	bl	800a4b6 <UART_WaitOnFlagUntilTimeout>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e006      	b.n	8009b3c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2220      	movs	r2, #32
 8009b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	e000      	b.n	8009b3c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009b3a:	2302      	movs	r3, #2
  }
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3720      	adds	r7, #32
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b08c      	sub	sp, #48	; 0x30
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b20      	cmp	r3, #32
 8009b5c:	d165      	bne.n	8009c2a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d002      	beq.n	8009b6a <HAL_UART_Transmit_DMA+0x26>
 8009b64:	88fb      	ldrh	r3, [r7, #6]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e05e      	b.n	8009c2c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d101      	bne.n	8009b7c <HAL_UART_Transmit_DMA+0x38>
 8009b78:	2302      	movs	r3, #2
 8009b7a:	e057      	b.n	8009c2c <HAL_UART_Transmit_DMA+0xe8>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	88fa      	ldrh	r2, [r7, #6]
 8009b8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	88fa      	ldrh	r2, [r7, #6]
 8009b94:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2221      	movs	r2, #33	; 0x21
 8009ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ba8:	4a22      	ldr	r2, [pc, #136]	; (8009c34 <HAL_UART_Transmit_DMA+0xf0>)
 8009baa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb0:	4a21      	ldr	r2, [pc, #132]	; (8009c38 <HAL_UART_Transmit_DMA+0xf4>)
 8009bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb8:	4a20      	ldr	r2, [pc, #128]	; (8009c3c <HAL_UART_Transmit_DMA+0xf8>)
 8009bba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009bc4:	f107 0308 	add.w	r3, r7, #8
 8009bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	6819      	ldr	r1, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	461a      	mov	r2, r3
 8009bda:	88fb      	ldrh	r3, [r7, #6]
 8009bdc:	f7fd f8f6 	bl	8006dcc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009be8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3314      	adds	r3, #20
 8009bf8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	e853 3f00 	ldrex	r3, [r3]
 8009c00:	617b      	str	r3, [r7, #20]
   return(result);
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3314      	adds	r3, #20
 8009c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c12:	627a      	str	r2, [r7, #36]	; 0x24
 8009c14:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c16:	6a39      	ldr	r1, [r7, #32]
 8009c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1a:	e841 2300 	strex	r3, r2, [r1]
 8009c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1e5      	bne.n	8009bf2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	e000      	b.n	8009c2c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009c2a:	2302      	movs	r3, #2
  }
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3730      	adds	r7, #48	; 0x30
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	0800a211 	.word	0x0800a211
 8009c38:	0800a2ab 	.word	0x0800a2ab
 8009c3c:	0800a423 	.word	0x0800a423

08009c40 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b20      	cmp	r3, #32
 8009c58:	d11d      	bne.n	8009c96 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <HAL_UART_Receive_DMA+0x26>
 8009c60:	88fb      	ldrh	r3, [r7, #6]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e016      	b.n	8009c98 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d101      	bne.n	8009c78 <HAL_UART_Receive_DMA+0x38>
 8009c74:	2302      	movs	r3, #2
 8009c76:	e00f      	b.n	8009c98 <HAL_UART_Receive_DMA+0x58>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009c86:	88fb      	ldrh	r3, [r7, #6]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 fc81 	bl	800a594 <UART_Start_Receive_DMA>
 8009c92:	4603      	mov	r3, r0
 8009c94:	e000      	b.n	8009c98 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009c96:	2302      	movs	r3, #2
  }
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b0ba      	sub	sp, #232	; 0xe8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd6:	f003 030f 	and.w	r3, r3, #15
 8009cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10f      	bne.n	8009d06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cea:	f003 0320 	and.w	r3, r3, #32
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d009      	beq.n	8009d06 <HAL_UART_IRQHandler+0x66>
 8009cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cf6:	f003 0320 	and.w	r3, r3, #32
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fded 	bl	800a8de <UART_Receive_IT>
      return;
 8009d04:	e256      	b.n	800a1b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 80de 	beq.w	8009ecc <HAL_UART_IRQHandler+0x22c>
 8009d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d106      	bne.n	8009d2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 80d1 	beq.w	8009ecc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00b      	beq.n	8009d4e <HAL_UART_IRQHandler+0xae>
 8009d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	f043 0201 	orr.w	r2, r3, #1
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d52:	f003 0304 	and.w	r3, r3, #4
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00b      	beq.n	8009d72 <HAL_UART_IRQHandler+0xd2>
 8009d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d005      	beq.n	8009d72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6a:	f043 0202 	orr.w	r2, r3, #2
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00b      	beq.n	8009d96 <HAL_UART_IRQHandler+0xf6>
 8009d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d005      	beq.n	8009d96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	f043 0204 	orr.w	r2, r3, #4
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9a:	f003 0308 	and.w	r3, r3, #8
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d011      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x126>
 8009da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009da6:	f003 0320 	and.w	r3, r3, #32
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d105      	bne.n	8009dba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	f043 0208 	orr.w	r2, r3, #8
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 81ed 	beq.w	800a1aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dd4:	f003 0320 	and.w	r3, r3, #32
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d008      	beq.n	8009dee <HAL_UART_IRQHandler+0x14e>
 8009ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009de0:	f003 0320 	and.w	r3, r3, #32
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fd78 	bl	800a8de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df8:	2b40      	cmp	r3, #64	; 0x40
 8009dfa:	bf0c      	ite	eq
 8009dfc:	2301      	moveq	r3, #1
 8009dfe:	2300      	movne	r3, #0
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0a:	f003 0308 	and.w	r3, r3, #8
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d103      	bne.n	8009e1a <HAL_UART_IRQHandler+0x17a>
 8009e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d04f      	beq.n	8009eba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fc80 	bl	800a720 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	695b      	ldr	r3, [r3, #20]
 8009e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2a:	2b40      	cmp	r3, #64	; 0x40
 8009e2c:	d141      	bne.n	8009eb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3314      	adds	r3, #20
 8009e34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3314      	adds	r3, #20
 8009e56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e6a:	e841 2300 	strex	r3, r2, [r1]
 8009e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1d9      	bne.n	8009e2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d013      	beq.n	8009eaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e86:	4a7d      	ldr	r2, [pc, #500]	; (800a07c <HAL_UART_IRQHandler+0x3dc>)
 8009e88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fd f864 	bl	8006f5c <HAL_DMA_Abort_IT>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d016      	beq.n	8009ec8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea8:	e00e      	b.n	8009ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7fa f80e 	bl	8003ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb0:	e00a      	b.n	8009ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7fa f80a 	bl	8003ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb8:	e006      	b.n	8009ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7fa f806 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009ec6:	e170      	b.n	800a1aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec8:	bf00      	nop
    return;
 8009eca:	e16e      	b.n	800a1aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	f040 814a 	bne.w	800a16a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eda:	f003 0310 	and.w	r3, r3, #16
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f000 8143 	beq.w	800a16a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ee8:	f003 0310 	and.w	r3, r3, #16
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 813c 	beq.w	800a16a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60bb      	str	r3, [r7, #8]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	60bb      	str	r3, [r7, #8]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	60bb      	str	r3, [r7, #8]
 8009f06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f12:	2b40      	cmp	r3, #64	; 0x40
 8009f14:	f040 80b4 	bne.w	800a080 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 8140 	beq.w	800a1ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f36:	429a      	cmp	r2, r3
 8009f38:	f080 8139 	bcs.w	800a1ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f4e:	f000 8088 	beq.w	800a062 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	330c      	adds	r3, #12
 8009f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f60:	e853 3f00 	ldrex	r3, [r3]
 8009f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	330c      	adds	r3, #12
 8009f7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009f8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1d9      	bne.n	8009f52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	3314      	adds	r3, #20
 8009fa4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fb0:	f023 0301 	bic.w	r3, r3, #1
 8009fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3314      	adds	r3, #20
 8009fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009fc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009fca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e1      	bne.n	8009f9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	3314      	adds	r3, #20
 8009fe0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	3314      	adds	r3, #20
 8009ffa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ffe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a000:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a002:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a004:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a006:	e841 2300 	strex	r3, r2, [r1]
 800a00a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a00c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e3      	bne.n	8009fda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	330c      	adds	r3, #12
 800a026:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a02a:	e853 3f00 	ldrex	r3, [r3]
 800a02e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a032:	f023 0310 	bic.w	r3, r3, #16
 800a036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	330c      	adds	r3, #12
 800a040:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a044:	65ba      	str	r2, [r7, #88]	; 0x58
 800a046:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a048:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a04a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a04c:	e841 2300 	strex	r3, r2, [r1]
 800a050:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e3      	bne.n	800a020 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fc ff0d 	bl	8006e7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	b29b      	uxth	r3, r3
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f8c0 	bl	800a1f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a078:	e099      	b.n	800a1ae <HAL_UART_IRQHandler+0x50e>
 800a07a:	bf00      	nop
 800a07c:	0800a7e7 	.word	0x0800a7e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a088:	b29b      	uxth	r3, r3
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a094:	b29b      	uxth	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 808b 	beq.w	800a1b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a09c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 8086 	beq.w	800a1b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	330c      	adds	r3, #12
 800a0ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b0:	e853 3f00 	ldrex	r3, [r3]
 800a0b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	330c      	adds	r3, #12
 800a0c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a0ca:	647a      	str	r2, [r7, #68]	; 0x44
 800a0cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0d2:	e841 2300 	strex	r3, r2, [r1]
 800a0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1e3      	bne.n	800a0a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3314      	adds	r3, #20
 800a0e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	e853 3f00 	ldrex	r3, [r3]
 800a0ec:	623b      	str	r3, [r7, #32]
   return(result);
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	f023 0301 	bic.w	r3, r3, #1
 800a0f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3314      	adds	r3, #20
 800a0fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a102:	633a      	str	r2, [r7, #48]	; 0x30
 800a104:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a10a:	e841 2300 	strex	r3, r2, [r1]
 800a10e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e3      	bne.n	800a0de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2220      	movs	r2, #32
 800a11a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	330c      	adds	r3, #12
 800a12a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	e853 3f00 	ldrex	r3, [r3]
 800a132:	60fb      	str	r3, [r7, #12]
   return(result);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f023 0310 	bic.w	r3, r3, #16
 800a13a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	330c      	adds	r3, #12
 800a144:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a148:	61fa      	str	r2, [r7, #28]
 800a14a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14c:	69b9      	ldr	r1, [r7, #24]
 800a14e:	69fa      	ldr	r2, [r7, #28]
 800a150:	e841 2300 	strex	r3, r2, [r1]
 800a154:	617b      	str	r3, [r7, #20]
   return(result);
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e3      	bne.n	800a124 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a15c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f848 	bl	800a1f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a168:	e023      	b.n	800a1b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a16a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a172:	2b00      	cmp	r3, #0
 800a174:	d009      	beq.n	800a18a <HAL_UART_IRQHandler+0x4ea>
 800a176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fb43 	bl	800a80e <UART_Transmit_IT>
    return;
 800a188:	e014      	b.n	800a1b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00e      	beq.n	800a1b4 <HAL_UART_IRQHandler+0x514>
 800a196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d008      	beq.n	800a1b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fb83 	bl	800a8ae <UART_EndTransmit_IT>
    return;
 800a1a8:	e004      	b.n	800a1b4 <HAL_UART_IRQHandler+0x514>
    return;
 800a1aa:	bf00      	nop
 800a1ac:	e002      	b.n	800a1b4 <HAL_UART_IRQHandler+0x514>
      return;
 800a1ae:	bf00      	nop
 800a1b0:	e000      	b.n	800a1b4 <HAL_UART_IRQHandler+0x514>
      return;
 800a1b2:	bf00      	nop
  }
}
 800a1b4:	37e8      	adds	r7, #232	; 0xe8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop

0800a1bc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	460b      	mov	r3, r1
 800a202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b090      	sub	sp, #64	; 0x40
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d137      	bne.n	800a29c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22e:	2200      	movs	r2, #0
 800a230:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3314      	adds	r3, #20
 800a238:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	e853 3f00 	ldrex	r3, [r3]
 800a240:	623b      	str	r3, [r7, #32]
   return(result);
 800a242:	6a3b      	ldr	r3, [r7, #32]
 800a244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a248:	63bb      	str	r3, [r7, #56]	; 0x38
 800a24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3314      	adds	r3, #20
 800a250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a252:	633a      	str	r2, [r7, #48]	; 0x30
 800a254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e5      	bne.n	800a232 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	330c      	adds	r3, #12
 800a26c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	e853 3f00 	ldrex	r3, [r3]
 800a274:	60fb      	str	r3, [r7, #12]
   return(result);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a27c:	637b      	str	r3, [r7, #52]	; 0x34
 800a27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	330c      	adds	r3, #12
 800a284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a286:	61fa      	str	r2, [r7, #28]
 800a288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	69b9      	ldr	r1, [r7, #24]
 800a28c:	69fa      	ldr	r2, [r7, #28]
 800a28e:	e841 2300 	strex	r3, r2, [r1]
 800a292:	617b      	str	r3, [r7, #20]
   return(result);
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e5      	bne.n	800a266 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a29a:	e002      	b.n	800a2a2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a29c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a29e:	f7f9 fe31 	bl	8003f04 <HAL_UART_TxCpltCallback>
}
 800a2a2:	bf00      	nop
 800a2a4:	3740      	adds	r7, #64	; 0x40
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f7ff ff7f 	bl	800a1bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2be:	bf00      	nop
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b09c      	sub	sp, #112	; 0x70
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d172      	bne.n	800a3c8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a2e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	330c      	adds	r3, #12
 800a2ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800a300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	330c      	adds	r3, #12
 800a306:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a308:	65ba      	str	r2, [r7, #88]	; 0x58
 800a30a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a30e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e5      	bne.n	800a2e8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a31c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3314      	adds	r3, #20
 800a322:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a32e:	f023 0301 	bic.w	r3, r3, #1
 800a332:	667b      	str	r3, [r7, #100]	; 0x64
 800a334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3314      	adds	r3, #20
 800a33a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a33c:	647a      	str	r2, [r7, #68]	; 0x44
 800a33e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e5      	bne.n	800a31c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3314      	adds	r3, #20
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	623b      	str	r3, [r7, #32]
   return(result);
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a366:	663b      	str	r3, [r7, #96]	; 0x60
 800a368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3314      	adds	r3, #20
 800a36e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a370:	633a      	str	r2, [r7, #48]	; 0x30
 800a372:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a374:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a378:	e841 2300 	strex	r3, r2, [r1]
 800a37c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e5      	bne.n	800a350 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a386:	2220      	movs	r2, #32
 800a388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a38c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a390:	2b01      	cmp	r3, #1
 800a392:	d119      	bne.n	800a3c8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	330c      	adds	r3, #12
 800a39a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	e853 3f00 	ldrex	r3, [r3]
 800a3a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f023 0310 	bic.w	r3, r3, #16
 800a3aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	330c      	adds	r3, #12
 800a3b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3b4:	61fa      	str	r2, [r7, #28]
 800a3b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	69b9      	ldr	r1, [r7, #24]
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	e841 2300 	strex	r3, r2, [r1]
 800a3c0:	617b      	str	r3, [r7, #20]
   return(result);
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e5      	bne.n	800a394 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d106      	bne.n	800a3de <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3d8:	f7ff ff0e 	bl	800a1f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3dc:	e002      	b.n	800a3e4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a3de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3e0:	f7ff fef6 	bl	800a1d0 <HAL_UART_RxCpltCallback>
}
 800a3e4:	bf00      	nop
 800a3e6:	3770      	adds	r7, #112	; 0x70
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d108      	bne.n	800a414 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a406:	085b      	lsrs	r3, r3, #1
 800a408:	b29b      	uxth	r3, r3
 800a40a:	4619      	mov	r1, r3
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7ff fef3 	bl	800a1f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a412:	e002      	b.n	800a41a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f7ff fee5 	bl	800a1e4 <HAL_UART_RxHalfCpltCallback>
}
 800a41a:	bf00      	nop
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a432:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43e:	2b80      	cmp	r3, #128	; 0x80
 800a440:	bf0c      	ite	eq
 800a442:	2301      	moveq	r3, #1
 800a444:	2300      	movne	r3, #0
 800a446:	b2db      	uxtb	r3, r3
 800a448:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b21      	cmp	r3, #33	; 0x21
 800a454:	d108      	bne.n	800a468 <UART_DMAError+0x46>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d005      	beq.n	800a468 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2200      	movs	r2, #0
 800a460:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a462:	68b8      	ldr	r0, [r7, #8]
 800a464:	f000 f934 	bl	800a6d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a472:	2b40      	cmp	r3, #64	; 0x40
 800a474:	bf0c      	ite	eq
 800a476:	2301      	moveq	r3, #1
 800a478:	2300      	movne	r3, #0
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b22      	cmp	r3, #34	; 0x22
 800a488:	d108      	bne.n	800a49c <UART_DMAError+0x7a>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d005      	beq.n	800a49c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2200      	movs	r2, #0
 800a494:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a496:	68b8      	ldr	r0, [r7, #8]
 800a498:	f000 f942 	bl	800a720 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a0:	f043 0210 	orr.w	r2, r3, #16
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4a8:	68b8      	ldr	r0, [r7, #8]
 800a4aa:	f7f9 fd0f 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ae:	bf00      	nop
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b090      	sub	sp, #64	; 0x40
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	603b      	str	r3, [r7, #0]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4c6:	e050      	b.n	800a56a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ce:	d04c      	beq.n	800a56a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d007      	beq.n	800a4e6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4d6:	f7fc fa03 	bl	80068e0 <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d241      	bcs.n	800a56a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	330c      	adds	r3, #12
 800a4ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	330c      	adds	r3, #12
 800a504:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a506:	637a      	str	r2, [r7, #52]	; 0x34
 800a508:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a50c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a50e:	e841 2300 	strex	r3, r2, [r1]
 800a512:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1e5      	bne.n	800a4e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3314      	adds	r3, #20
 800a520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	e853 3f00 	ldrex	r3, [r3]
 800a528:	613b      	str	r3, [r7, #16]
   return(result);
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f023 0301 	bic.w	r3, r3, #1
 800a530:	63bb      	str	r3, [r7, #56]	; 0x38
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	3314      	adds	r3, #20
 800a538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a53a:	623a      	str	r2, [r7, #32]
 800a53c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53e:	69f9      	ldr	r1, [r7, #28]
 800a540:	6a3a      	ldr	r2, [r7, #32]
 800a542:	e841 2300 	strex	r3, r2, [r1]
 800a546:	61bb      	str	r3, [r7, #24]
   return(result);
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1e5      	bne.n	800a51a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2220      	movs	r2, #32
 800a552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2220      	movs	r2, #32
 800a55a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	e00f      	b.n	800a58a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	4013      	ands	r3, r2
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	429a      	cmp	r2, r3
 800a578:	bf0c      	ite	eq
 800a57a:	2301      	moveq	r3, #1
 800a57c:	2300      	movne	r3, #0
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	461a      	mov	r2, r3
 800a582:	79fb      	ldrb	r3, [r7, #7]
 800a584:	429a      	cmp	r2, r3
 800a586:	d09f      	beq.n	800a4c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3740      	adds	r7, #64	; 0x40
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
	...

0800a594 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b098      	sub	sp, #96	; 0x60
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	88fa      	ldrh	r2, [r7, #6]
 800a5ac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2222      	movs	r2, #34	; 0x22
 800a5b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c0:	4a40      	ldr	r2, [pc, #256]	; (800a6c4 <UART_Start_Receive_DMA+0x130>)
 800a5c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c8:	4a3f      	ldr	r2, [pc, #252]	; (800a6c8 <UART_Start_Receive_DMA+0x134>)
 800a5ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d0:	4a3e      	ldr	r2, [pc, #248]	; (800a6cc <UART_Start_Receive_DMA+0x138>)
 800a5d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d8:	2200      	movs	r2, #0
 800a5da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a5dc:	f107 0308 	add.w	r3, r7, #8
 800a5e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	88fb      	ldrh	r3, [r7, #6]
 800a5f4:	f7fc fbea 	bl	8006dcc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	613b      	str	r3, [r7, #16]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	613b      	str	r3, [r7, #16]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	613b      	str	r3, [r7, #16]
 800a60c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d019      	beq.n	800a652 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	330c      	adds	r3, #12
 800a624:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a628:	e853 3f00 	ldrex	r3, [r3]
 800a62c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a634:	65bb      	str	r3, [r7, #88]	; 0x58
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	330c      	adds	r3, #12
 800a63c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a63e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a640:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a642:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a646:	e841 2300 	strex	r3, r2, [r1]
 800a64a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a64c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1e5      	bne.n	800a61e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	3314      	adds	r3, #20
 800a658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	e853 3f00 	ldrex	r3, [r3]
 800a660:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a664:	f043 0301 	orr.w	r3, r3, #1
 800a668:	657b      	str	r3, [r7, #84]	; 0x54
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3314      	adds	r3, #20
 800a670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a672:	63ba      	str	r2, [r7, #56]	; 0x38
 800a674:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a676:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a67a:	e841 2300 	strex	r3, r2, [r1]
 800a67e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1e5      	bne.n	800a652 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3314      	adds	r3, #20
 800a68c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	e853 3f00 	ldrex	r3, [r3]
 800a694:	617b      	str	r3, [r7, #20]
   return(result);
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a69c:	653b      	str	r3, [r7, #80]	; 0x50
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3314      	adds	r3, #20
 800a6a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6a6:	627a      	str	r2, [r7, #36]	; 0x24
 800a6a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6aa:	6a39      	ldr	r1, [r7, #32]
 800a6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ae:	e841 2300 	strex	r3, r2, [r1]
 800a6b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1e5      	bne.n	800a686 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3760      	adds	r7, #96	; 0x60
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	0800a2c7 	.word	0x0800a2c7
 800a6c8:	0800a3ed 	.word	0x0800a3ed
 800a6cc:	0800a423 	.word	0x0800a423

0800a6d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b089      	sub	sp, #36	; 0x24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	330c      	adds	r3, #12
 800a6de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	e853 3f00 	ldrex	r3, [r3]
 800a6e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a6ee:	61fb      	str	r3, [r7, #28]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	330c      	adds	r3, #12
 800a6f6:	69fa      	ldr	r2, [r7, #28]
 800a6f8:	61ba      	str	r2, [r7, #24]
 800a6fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fc:	6979      	ldr	r1, [r7, #20]
 800a6fe:	69ba      	ldr	r2, [r7, #24]
 800a700:	e841 2300 	strex	r3, r2, [r1]
 800a704:	613b      	str	r3, [r7, #16]
   return(result);
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1e5      	bne.n	800a6d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2220      	movs	r2, #32
 800a710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a714:	bf00      	nop
 800a716:	3724      	adds	r7, #36	; 0x24
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a720:	b480      	push	{r7}
 800a722:	b095      	sub	sp, #84	; 0x54
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	330c      	adds	r3, #12
 800a72e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a732:	e853 3f00 	ldrex	r3, [r3]
 800a736:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a73e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	330c      	adds	r3, #12
 800a746:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a748:	643a      	str	r2, [r7, #64]	; 0x40
 800a74a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a74e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a750:	e841 2300 	strex	r3, r2, [r1]
 800a754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1e5      	bne.n	800a728 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3314      	adds	r3, #20
 800a762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a764:	6a3b      	ldr	r3, [r7, #32]
 800a766:	e853 3f00 	ldrex	r3, [r3]
 800a76a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	f023 0301 	bic.w	r3, r3, #1
 800a772:	64bb      	str	r3, [r7, #72]	; 0x48
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3314      	adds	r3, #20
 800a77a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a77c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a77e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e5      	bne.n	800a75c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a794:	2b01      	cmp	r3, #1
 800a796:	d119      	bne.n	800a7cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	330c      	adds	r3, #12
 800a79e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	e853 3f00 	ldrex	r3, [r3]
 800a7a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	f023 0310 	bic.w	r3, r3, #16
 800a7ae:	647b      	str	r3, [r7, #68]	; 0x44
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	330c      	adds	r3, #12
 800a7b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7b8:	61ba      	str	r2, [r7, #24]
 800a7ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7bc:	6979      	ldr	r1, [r7, #20]
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	e841 2300 	strex	r3, r2, [r1]
 800a7c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1e5      	bne.n	800a798 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a7da:	bf00      	nop
 800a7dc:	3754      	adds	r7, #84	; 0x54
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b084      	sub	sp, #16
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f7f9 fb63 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a806:	bf00      	nop
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a80e:	b480      	push	{r7}
 800a810:	b085      	sub	sp, #20
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b21      	cmp	r3, #33	; 0x21
 800a820:	d13e      	bne.n	800a8a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a82a:	d114      	bne.n	800a856 <UART_Transmit_IT+0x48>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d110      	bne.n	800a856 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	461a      	mov	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a848:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	1c9a      	adds	r2, r3, #2
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	621a      	str	r2, [r3, #32]
 800a854:	e008      	b.n	800a868 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a1b      	ldr	r3, [r3, #32]
 800a85a:	1c59      	adds	r1, r3, #1
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	6211      	str	r1, [r2, #32]
 800a860:	781a      	ldrb	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	3b01      	subs	r3, #1
 800a870:	b29b      	uxth	r3, r3
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	4619      	mov	r1, r3
 800a876:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10f      	bne.n	800a89c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68da      	ldr	r2, [r3, #12]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a88a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a89a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	e000      	b.n	800a8a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a8a0:	2302      	movs	r3, #2
  }
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b082      	sub	sp, #8
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68da      	ldr	r2, [r3, #12]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2220      	movs	r2, #32
 800a8ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7f9 fb18 	bl	8003f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b08c      	sub	sp, #48	; 0x30
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	2b22      	cmp	r3, #34	; 0x22
 800a8f0:	f040 80ab 	bne.w	800aa4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8fc:	d117      	bne.n	800a92e <UART_Receive_IT+0x50>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d113      	bne.n	800a92e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a906:	2300      	movs	r3, #0
 800a908:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a90e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	b29b      	uxth	r3, r3
 800a918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a926:	1c9a      	adds	r2, r3, #2
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	629a      	str	r2, [r3, #40]	; 0x28
 800a92c:	e026      	b.n	800a97c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a932:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a934:	2300      	movs	r3, #0
 800a936:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a940:	d007      	beq.n	800a952 <UART_Receive_IT+0x74>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10a      	bne.n	800a960 <UART_Receive_IT+0x82>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d106      	bne.n	800a960 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95c:	701a      	strb	r2, [r3, #0]
 800a95e:	e008      	b.n	800a972 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	b2db      	uxtb	r3, r3
 800a968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a976:	1c5a      	adds	r2, r3, #1
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a980:	b29b      	uxth	r3, r3
 800a982:	3b01      	subs	r3, #1
 800a984:	b29b      	uxth	r3, r3
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	4619      	mov	r1, r3
 800a98a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d15a      	bne.n	800aa46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68da      	ldr	r2, [r3, #12]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f022 0220 	bic.w	r2, r2, #32
 800a99e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68da      	ldr	r2, [r3, #12]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a9ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	695a      	ldr	r2, [r3, #20]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f022 0201 	bic.w	r2, r2, #1
 800a9be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d135      	bne.n	800aa3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	330c      	adds	r3, #12
 800a9dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	e853 3f00 	ldrex	r3, [r3]
 800a9e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	f023 0310 	bic.w	r3, r3, #16
 800a9ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	330c      	adds	r3, #12
 800a9f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9f6:	623a      	str	r2, [r7, #32]
 800a9f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fa:	69f9      	ldr	r1, [r7, #28]
 800a9fc:	6a3a      	ldr	r2, [r7, #32]
 800a9fe:	e841 2300 	strex	r3, r2, [r1]
 800aa02:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1e5      	bne.n	800a9d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 0310 	and.w	r3, r3, #16
 800aa14:	2b10      	cmp	r3, #16
 800aa16:	d10a      	bne.n	800aa2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff fbdf 	bl	800a1f8 <HAL_UARTEx_RxEventCallback>
 800aa3a:	e002      	b.n	800aa42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7ff fbc7 	bl	800a1d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	e002      	b.n	800aa4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	e000      	b.n	800aa4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800aa4a:	2302      	movs	r3, #2
  }
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3730      	adds	r7, #48	; 0x30
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa58:	b0c0      	sub	sp, #256	; 0x100
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aa6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa70:	68d9      	ldr	r1, [r3, #12]
 800aa72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	ea40 0301 	orr.w	r3, r0, r1
 800aa7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa82:	689a      	ldr	r2, [r3, #8]
 800aa84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	431a      	orrs	r2, r3
 800aa94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aaa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aaac:	f021 010c 	bic.w	r1, r1, #12
 800aab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aaba:	430b      	orrs	r3, r1
 800aabc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aabe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	695b      	ldr	r3, [r3, #20]
 800aac6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aaca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aace:	6999      	ldr	r1, [r3, #24]
 800aad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	ea40 0301 	orr.w	r3, r0, r1
 800aada:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aadc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	4b8f      	ldr	r3, [pc, #572]	; (800ad20 <UART_SetConfig+0x2cc>)
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d005      	beq.n	800aaf4 <UART_SetConfig+0xa0>
 800aae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	4b8d      	ldr	r3, [pc, #564]	; (800ad24 <UART_SetConfig+0x2d0>)
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d104      	bne.n	800aafe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aaf4:	f7fd f87e 	bl	8007bf4 <HAL_RCC_GetPCLK2Freq>
 800aaf8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aafc:	e003      	b.n	800ab06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aafe:	f7fd f865 	bl	8007bcc <HAL_RCC_GetPCLK1Freq>
 800ab02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab0a:	69db      	ldr	r3, [r3, #28]
 800ab0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab10:	f040 810c 	bne.w	800ad2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ab22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ab26:	4622      	mov	r2, r4
 800ab28:	462b      	mov	r3, r5
 800ab2a:	1891      	adds	r1, r2, r2
 800ab2c:	65b9      	str	r1, [r7, #88]	; 0x58
 800ab2e:	415b      	adcs	r3, r3
 800ab30:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ab36:	4621      	mov	r1, r4
 800ab38:	eb12 0801 	adds.w	r8, r2, r1
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	eb43 0901 	adc.w	r9, r3, r1
 800ab42:	f04f 0200 	mov.w	r2, #0
 800ab46:	f04f 0300 	mov.w	r3, #0
 800ab4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab56:	4690      	mov	r8, r2
 800ab58:	4699      	mov	r9, r3
 800ab5a:	4623      	mov	r3, r4
 800ab5c:	eb18 0303 	adds.w	r3, r8, r3
 800ab60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab64:	462b      	mov	r3, r5
 800ab66:	eb49 0303 	adc.w	r3, r9, r3
 800ab6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ab7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ab7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ab82:	460b      	mov	r3, r1
 800ab84:	18db      	adds	r3, r3, r3
 800ab86:	653b      	str	r3, [r7, #80]	; 0x50
 800ab88:	4613      	mov	r3, r2
 800ab8a:	eb42 0303 	adc.w	r3, r2, r3
 800ab8e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ab94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ab98:	f7f5 ffb4 	bl	8000b04 <__aeabi_uldivmod>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4b61      	ldr	r3, [pc, #388]	; (800ad28 <UART_SetConfig+0x2d4>)
 800aba2:	fba3 2302 	umull	r2, r3, r3, r2
 800aba6:	095b      	lsrs	r3, r3, #5
 800aba8:	011c      	lsls	r4, r3, #4
 800abaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abae:	2200      	movs	r2, #0
 800abb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800abb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800abbc:	4642      	mov	r2, r8
 800abbe:	464b      	mov	r3, r9
 800abc0:	1891      	adds	r1, r2, r2
 800abc2:	64b9      	str	r1, [r7, #72]	; 0x48
 800abc4:	415b      	adcs	r3, r3
 800abc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800abcc:	4641      	mov	r1, r8
 800abce:	eb12 0a01 	adds.w	sl, r2, r1
 800abd2:	4649      	mov	r1, r9
 800abd4:	eb43 0b01 	adc.w	fp, r3, r1
 800abd8:	f04f 0200 	mov.w	r2, #0
 800abdc:	f04f 0300 	mov.w	r3, #0
 800abe0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800abe4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800abe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abec:	4692      	mov	sl, r2
 800abee:	469b      	mov	fp, r3
 800abf0:	4643      	mov	r3, r8
 800abf2:	eb1a 0303 	adds.w	r3, sl, r3
 800abf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800abfa:	464b      	mov	r3, r9
 800abfc:	eb4b 0303 	adc.w	r3, fp, r3
 800ac00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ac14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ac18:	460b      	mov	r3, r1
 800ac1a:	18db      	adds	r3, r3, r3
 800ac1c:	643b      	str	r3, [r7, #64]	; 0x40
 800ac1e:	4613      	mov	r3, r2
 800ac20:	eb42 0303 	adc.w	r3, r2, r3
 800ac24:	647b      	str	r3, [r7, #68]	; 0x44
 800ac26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ac2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ac2e:	f7f5 ff69 	bl	8000b04 <__aeabi_uldivmod>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4611      	mov	r1, r2
 800ac38:	4b3b      	ldr	r3, [pc, #236]	; (800ad28 <UART_SetConfig+0x2d4>)
 800ac3a:	fba3 2301 	umull	r2, r3, r3, r1
 800ac3e:	095b      	lsrs	r3, r3, #5
 800ac40:	2264      	movs	r2, #100	; 0x64
 800ac42:	fb02 f303 	mul.w	r3, r2, r3
 800ac46:	1acb      	subs	r3, r1, r3
 800ac48:	00db      	lsls	r3, r3, #3
 800ac4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ac4e:	4b36      	ldr	r3, [pc, #216]	; (800ad28 <UART_SetConfig+0x2d4>)
 800ac50:	fba3 2302 	umull	r2, r3, r3, r2
 800ac54:	095b      	lsrs	r3, r3, #5
 800ac56:	005b      	lsls	r3, r3, #1
 800ac58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ac5c:	441c      	add	r4, r3
 800ac5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ac6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ac70:	4642      	mov	r2, r8
 800ac72:	464b      	mov	r3, r9
 800ac74:	1891      	adds	r1, r2, r2
 800ac76:	63b9      	str	r1, [r7, #56]	; 0x38
 800ac78:	415b      	adcs	r3, r3
 800ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ac80:	4641      	mov	r1, r8
 800ac82:	1851      	adds	r1, r2, r1
 800ac84:	6339      	str	r1, [r7, #48]	; 0x30
 800ac86:	4649      	mov	r1, r9
 800ac88:	414b      	adcs	r3, r1
 800ac8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac8c:	f04f 0200 	mov.w	r2, #0
 800ac90:	f04f 0300 	mov.w	r3, #0
 800ac94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ac98:	4659      	mov	r1, fp
 800ac9a:	00cb      	lsls	r3, r1, #3
 800ac9c:	4651      	mov	r1, sl
 800ac9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aca2:	4651      	mov	r1, sl
 800aca4:	00ca      	lsls	r2, r1, #3
 800aca6:	4610      	mov	r0, r2
 800aca8:	4619      	mov	r1, r3
 800acaa:	4603      	mov	r3, r0
 800acac:	4642      	mov	r2, r8
 800acae:	189b      	adds	r3, r3, r2
 800acb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800acb4:	464b      	mov	r3, r9
 800acb6:	460a      	mov	r2, r1
 800acb8:	eb42 0303 	adc.w	r3, r2, r3
 800acbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800acc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800accc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800acd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800acd4:	460b      	mov	r3, r1
 800acd6:	18db      	adds	r3, r3, r3
 800acd8:	62bb      	str	r3, [r7, #40]	; 0x28
 800acda:	4613      	mov	r3, r2
 800acdc:	eb42 0303 	adc.w	r3, r2, r3
 800ace0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ace2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ace6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800acea:	f7f5 ff0b 	bl	8000b04 <__aeabi_uldivmod>
 800acee:	4602      	mov	r2, r0
 800acf0:	460b      	mov	r3, r1
 800acf2:	4b0d      	ldr	r3, [pc, #52]	; (800ad28 <UART_SetConfig+0x2d4>)
 800acf4:	fba3 1302 	umull	r1, r3, r3, r2
 800acf8:	095b      	lsrs	r3, r3, #5
 800acfa:	2164      	movs	r1, #100	; 0x64
 800acfc:	fb01 f303 	mul.w	r3, r1, r3
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	3332      	adds	r3, #50	; 0x32
 800ad06:	4a08      	ldr	r2, [pc, #32]	; (800ad28 <UART_SetConfig+0x2d4>)
 800ad08:	fba2 2303 	umull	r2, r3, r2, r3
 800ad0c:	095b      	lsrs	r3, r3, #5
 800ad0e:	f003 0207 	and.w	r2, r3, #7
 800ad12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4422      	add	r2, r4
 800ad1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad1c:	e105      	b.n	800af2a <UART_SetConfig+0x4d6>
 800ad1e:	bf00      	nop
 800ad20:	40011000 	.word	0x40011000
 800ad24:	40011400 	.word	0x40011400
 800ad28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad30:	2200      	movs	r2, #0
 800ad32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ad3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ad3e:	4642      	mov	r2, r8
 800ad40:	464b      	mov	r3, r9
 800ad42:	1891      	adds	r1, r2, r2
 800ad44:	6239      	str	r1, [r7, #32]
 800ad46:	415b      	adcs	r3, r3
 800ad48:	627b      	str	r3, [r7, #36]	; 0x24
 800ad4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad4e:	4641      	mov	r1, r8
 800ad50:	1854      	adds	r4, r2, r1
 800ad52:	4649      	mov	r1, r9
 800ad54:	eb43 0501 	adc.w	r5, r3, r1
 800ad58:	f04f 0200 	mov.w	r2, #0
 800ad5c:	f04f 0300 	mov.w	r3, #0
 800ad60:	00eb      	lsls	r3, r5, #3
 800ad62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad66:	00e2      	lsls	r2, r4, #3
 800ad68:	4614      	mov	r4, r2
 800ad6a:	461d      	mov	r5, r3
 800ad6c:	4643      	mov	r3, r8
 800ad6e:	18e3      	adds	r3, r4, r3
 800ad70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ad74:	464b      	mov	r3, r9
 800ad76:	eb45 0303 	adc.w	r3, r5, r3
 800ad7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ad8e:	f04f 0200 	mov.w	r2, #0
 800ad92:	f04f 0300 	mov.w	r3, #0
 800ad96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	008b      	lsls	r3, r1, #2
 800ad9e:	4621      	mov	r1, r4
 800ada0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ada4:	4621      	mov	r1, r4
 800ada6:	008a      	lsls	r2, r1, #2
 800ada8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800adac:	f7f5 feaa 	bl	8000b04 <__aeabi_uldivmod>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4b60      	ldr	r3, [pc, #384]	; (800af38 <UART_SetConfig+0x4e4>)
 800adb6:	fba3 2302 	umull	r2, r3, r3, r2
 800adba:	095b      	lsrs	r3, r3, #5
 800adbc:	011c      	lsls	r4, r3, #4
 800adbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adc2:	2200      	movs	r2, #0
 800adc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800adc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800adcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800add0:	4642      	mov	r2, r8
 800add2:	464b      	mov	r3, r9
 800add4:	1891      	adds	r1, r2, r2
 800add6:	61b9      	str	r1, [r7, #24]
 800add8:	415b      	adcs	r3, r3
 800adda:	61fb      	str	r3, [r7, #28]
 800addc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ade0:	4641      	mov	r1, r8
 800ade2:	1851      	adds	r1, r2, r1
 800ade4:	6139      	str	r1, [r7, #16]
 800ade6:	4649      	mov	r1, r9
 800ade8:	414b      	adcs	r3, r1
 800adea:	617b      	str	r3, [r7, #20]
 800adec:	f04f 0200 	mov.w	r2, #0
 800adf0:	f04f 0300 	mov.w	r3, #0
 800adf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800adf8:	4659      	mov	r1, fp
 800adfa:	00cb      	lsls	r3, r1, #3
 800adfc:	4651      	mov	r1, sl
 800adfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae02:	4651      	mov	r1, sl
 800ae04:	00ca      	lsls	r2, r1, #3
 800ae06:	4610      	mov	r0, r2
 800ae08:	4619      	mov	r1, r3
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	4642      	mov	r2, r8
 800ae0e:	189b      	adds	r3, r3, r2
 800ae10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae14:	464b      	mov	r3, r9
 800ae16:	460a      	mov	r2, r1
 800ae18:	eb42 0303 	adc.w	r3, r2, r3
 800ae1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ae2c:	f04f 0200 	mov.w	r2, #0
 800ae30:	f04f 0300 	mov.w	r3, #0
 800ae34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ae38:	4649      	mov	r1, r9
 800ae3a:	008b      	lsls	r3, r1, #2
 800ae3c:	4641      	mov	r1, r8
 800ae3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae42:	4641      	mov	r1, r8
 800ae44:	008a      	lsls	r2, r1, #2
 800ae46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ae4a:	f7f5 fe5b 	bl	8000b04 <__aeabi_uldivmod>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4b39      	ldr	r3, [pc, #228]	; (800af38 <UART_SetConfig+0x4e4>)
 800ae54:	fba3 1302 	umull	r1, r3, r3, r2
 800ae58:	095b      	lsrs	r3, r3, #5
 800ae5a:	2164      	movs	r1, #100	; 0x64
 800ae5c:	fb01 f303 	mul.w	r3, r1, r3
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	011b      	lsls	r3, r3, #4
 800ae64:	3332      	adds	r3, #50	; 0x32
 800ae66:	4a34      	ldr	r2, [pc, #208]	; (800af38 <UART_SetConfig+0x4e4>)
 800ae68:	fba2 2303 	umull	r2, r3, r2, r3
 800ae6c:	095b      	lsrs	r3, r3, #5
 800ae6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae72:	441c      	add	r4, r3
 800ae74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae78:	2200      	movs	r2, #0
 800ae7a:	673b      	str	r3, [r7, #112]	; 0x70
 800ae7c:	677a      	str	r2, [r7, #116]	; 0x74
 800ae7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ae82:	4642      	mov	r2, r8
 800ae84:	464b      	mov	r3, r9
 800ae86:	1891      	adds	r1, r2, r2
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	415b      	adcs	r3, r3
 800ae8c:	60fb      	str	r3, [r7, #12]
 800ae8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae92:	4641      	mov	r1, r8
 800ae94:	1851      	adds	r1, r2, r1
 800ae96:	6039      	str	r1, [r7, #0]
 800ae98:	4649      	mov	r1, r9
 800ae9a:	414b      	adcs	r3, r1
 800ae9c:	607b      	str	r3, [r7, #4]
 800ae9e:	f04f 0200 	mov.w	r2, #0
 800aea2:	f04f 0300 	mov.w	r3, #0
 800aea6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aeaa:	4659      	mov	r1, fp
 800aeac:	00cb      	lsls	r3, r1, #3
 800aeae:	4651      	mov	r1, sl
 800aeb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aeb4:	4651      	mov	r1, sl
 800aeb6:	00ca      	lsls	r2, r1, #3
 800aeb8:	4610      	mov	r0, r2
 800aeba:	4619      	mov	r1, r3
 800aebc:	4603      	mov	r3, r0
 800aebe:	4642      	mov	r2, r8
 800aec0:	189b      	adds	r3, r3, r2
 800aec2:	66bb      	str	r3, [r7, #104]	; 0x68
 800aec4:	464b      	mov	r3, r9
 800aec6:	460a      	mov	r2, r1
 800aec8:	eb42 0303 	adc.w	r3, r2, r3
 800aecc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	663b      	str	r3, [r7, #96]	; 0x60
 800aed8:	667a      	str	r2, [r7, #100]	; 0x64
 800aeda:	f04f 0200 	mov.w	r2, #0
 800aede:	f04f 0300 	mov.w	r3, #0
 800aee2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aee6:	4649      	mov	r1, r9
 800aee8:	008b      	lsls	r3, r1, #2
 800aeea:	4641      	mov	r1, r8
 800aeec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aef0:	4641      	mov	r1, r8
 800aef2:	008a      	lsls	r2, r1, #2
 800aef4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aef8:	f7f5 fe04 	bl	8000b04 <__aeabi_uldivmod>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	4b0d      	ldr	r3, [pc, #52]	; (800af38 <UART_SetConfig+0x4e4>)
 800af02:	fba3 1302 	umull	r1, r3, r3, r2
 800af06:	095b      	lsrs	r3, r3, #5
 800af08:	2164      	movs	r1, #100	; 0x64
 800af0a:	fb01 f303 	mul.w	r3, r1, r3
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	011b      	lsls	r3, r3, #4
 800af12:	3332      	adds	r3, #50	; 0x32
 800af14:	4a08      	ldr	r2, [pc, #32]	; (800af38 <UART_SetConfig+0x4e4>)
 800af16:	fba2 2303 	umull	r2, r3, r2, r3
 800af1a:	095b      	lsrs	r3, r3, #5
 800af1c:	f003 020f 	and.w	r2, r3, #15
 800af20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4422      	add	r2, r4
 800af28:	609a      	str	r2, [r3, #8]
}
 800af2a:	bf00      	nop
 800af2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800af30:	46bd      	mov	sp, r7
 800af32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af36:	bf00      	nop
 800af38:	51eb851f 	.word	0x51eb851f

0800af3c <__cxa_pure_virtual>:
 800af3c:	b508      	push	{r3, lr}
 800af3e:	f000 f80d 	bl	800af5c <_ZSt9terminatev>

0800af42 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800af42:	b508      	push	{r3, lr}
 800af44:	4780      	blx	r0
 800af46:	f000 f80e 	bl	800af66 <abort>
	...

0800af4c <_ZSt13get_terminatev>:
 800af4c:	4b02      	ldr	r3, [pc, #8]	; (800af58 <_ZSt13get_terminatev+0xc>)
 800af4e:	6818      	ldr	r0, [r3, #0]
 800af50:	f3bf 8f5b 	dmb	ish
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	2000007c 	.word	0x2000007c

0800af5c <_ZSt9terminatev>:
 800af5c:	b508      	push	{r3, lr}
 800af5e:	f7ff fff5 	bl	800af4c <_ZSt13get_terminatev>
 800af62:	f7ff ffee 	bl	800af42 <_ZN10__cxxabiv111__terminateEPFvvE>

0800af66 <abort>:
 800af66:	b508      	push	{r3, lr}
 800af68:	2006      	movs	r0, #6
 800af6a:	f000 f873 	bl	800b054 <raise>
 800af6e:	2001      	movs	r0, #1
 800af70:	f7fb fbd4 	bl	800671c <_exit>

0800af74 <__errno>:
 800af74:	4b01      	ldr	r3, [pc, #4]	; (800af7c <__errno+0x8>)
 800af76:	6818      	ldr	r0, [r3, #0]
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	20000080 	.word	0x20000080

0800af80 <__libc_init_array>:
 800af80:	b570      	push	{r4, r5, r6, lr}
 800af82:	4d0d      	ldr	r5, [pc, #52]	; (800afb8 <__libc_init_array+0x38>)
 800af84:	4c0d      	ldr	r4, [pc, #52]	; (800afbc <__libc_init_array+0x3c>)
 800af86:	1b64      	subs	r4, r4, r5
 800af88:	10a4      	asrs	r4, r4, #2
 800af8a:	2600      	movs	r6, #0
 800af8c:	42a6      	cmp	r6, r4
 800af8e:	d109      	bne.n	800afa4 <__libc_init_array+0x24>
 800af90:	4d0b      	ldr	r5, [pc, #44]	; (800afc0 <__libc_init_array+0x40>)
 800af92:	4c0c      	ldr	r4, [pc, #48]	; (800afc4 <__libc_init_array+0x44>)
 800af94:	f000 f9b0 	bl	800b2f8 <_init>
 800af98:	1b64      	subs	r4, r4, r5
 800af9a:	10a4      	asrs	r4, r4, #2
 800af9c:	2600      	movs	r6, #0
 800af9e:	42a6      	cmp	r6, r4
 800afa0:	d105      	bne.n	800afae <__libc_init_array+0x2e>
 800afa2:	bd70      	pop	{r4, r5, r6, pc}
 800afa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800afa8:	4798      	blx	r3
 800afaa:	3601      	adds	r6, #1
 800afac:	e7ee      	b.n	800af8c <__libc_init_array+0xc>
 800afae:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb2:	4798      	blx	r3
 800afb4:	3601      	adds	r6, #1
 800afb6:	e7f2      	b.n	800af9e <__libc_init_array+0x1e>
 800afb8:	0800b674 	.word	0x0800b674
 800afbc:	0800b674 	.word	0x0800b674
 800afc0:	0800b674 	.word	0x0800b674
 800afc4:	0800b67c 	.word	0x0800b67c

0800afc8 <memcpy>:
 800afc8:	440a      	add	r2, r1
 800afca:	4291      	cmp	r1, r2
 800afcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800afd0:	d100      	bne.n	800afd4 <memcpy+0xc>
 800afd2:	4770      	bx	lr
 800afd4:	b510      	push	{r4, lr}
 800afd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afde:	4291      	cmp	r1, r2
 800afe0:	d1f9      	bne.n	800afd6 <memcpy+0xe>
 800afe2:	bd10      	pop	{r4, pc}

0800afe4 <memset>:
 800afe4:	4402      	add	r2, r0
 800afe6:	4603      	mov	r3, r0
 800afe8:	4293      	cmp	r3, r2
 800afea:	d100      	bne.n	800afee <memset+0xa>
 800afec:	4770      	bx	lr
 800afee:	f803 1b01 	strb.w	r1, [r3], #1
 800aff2:	e7f9      	b.n	800afe8 <memset+0x4>

0800aff4 <realloc>:
 800aff4:	4b02      	ldr	r3, [pc, #8]	; (800b000 <realloc+0xc>)
 800aff6:	460a      	mov	r2, r1
 800aff8:	4601      	mov	r1, r0
 800affa:	6818      	ldr	r0, [r3, #0]
 800affc:	f000 b8da 	b.w	800b1b4 <_realloc_r>
 800b000:	20000080 	.word	0x20000080

0800b004 <_raise_r>:
 800b004:	291f      	cmp	r1, #31
 800b006:	b538      	push	{r3, r4, r5, lr}
 800b008:	4604      	mov	r4, r0
 800b00a:	460d      	mov	r5, r1
 800b00c:	d904      	bls.n	800b018 <_raise_r+0x14>
 800b00e:	2316      	movs	r3, #22
 800b010:	6003      	str	r3, [r0, #0]
 800b012:	f04f 30ff 	mov.w	r0, #4294967295
 800b016:	bd38      	pop	{r3, r4, r5, pc}
 800b018:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b01a:	b112      	cbz	r2, 800b022 <_raise_r+0x1e>
 800b01c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b020:	b94b      	cbnz	r3, 800b036 <_raise_r+0x32>
 800b022:	4620      	mov	r0, r4
 800b024:	f000 f830 	bl	800b088 <_getpid_r>
 800b028:	462a      	mov	r2, r5
 800b02a:	4601      	mov	r1, r0
 800b02c:	4620      	mov	r0, r4
 800b02e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b032:	f000 b817 	b.w	800b064 <_kill_r>
 800b036:	2b01      	cmp	r3, #1
 800b038:	d00a      	beq.n	800b050 <_raise_r+0x4c>
 800b03a:	1c59      	adds	r1, r3, #1
 800b03c:	d103      	bne.n	800b046 <_raise_r+0x42>
 800b03e:	2316      	movs	r3, #22
 800b040:	6003      	str	r3, [r0, #0]
 800b042:	2001      	movs	r0, #1
 800b044:	e7e7      	b.n	800b016 <_raise_r+0x12>
 800b046:	2400      	movs	r4, #0
 800b048:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b04c:	4628      	mov	r0, r5
 800b04e:	4798      	blx	r3
 800b050:	2000      	movs	r0, #0
 800b052:	e7e0      	b.n	800b016 <_raise_r+0x12>

0800b054 <raise>:
 800b054:	4b02      	ldr	r3, [pc, #8]	; (800b060 <raise+0xc>)
 800b056:	4601      	mov	r1, r0
 800b058:	6818      	ldr	r0, [r3, #0]
 800b05a:	f7ff bfd3 	b.w	800b004 <_raise_r>
 800b05e:	bf00      	nop
 800b060:	20000080 	.word	0x20000080

0800b064 <_kill_r>:
 800b064:	b538      	push	{r3, r4, r5, lr}
 800b066:	4d07      	ldr	r5, [pc, #28]	; (800b084 <_kill_r+0x20>)
 800b068:	2300      	movs	r3, #0
 800b06a:	4604      	mov	r4, r0
 800b06c:	4608      	mov	r0, r1
 800b06e:	4611      	mov	r1, r2
 800b070:	602b      	str	r3, [r5, #0]
 800b072:	f7fb fb43 	bl	80066fc <_kill>
 800b076:	1c43      	adds	r3, r0, #1
 800b078:	d102      	bne.n	800b080 <_kill_r+0x1c>
 800b07a:	682b      	ldr	r3, [r5, #0]
 800b07c:	b103      	cbz	r3, 800b080 <_kill_r+0x1c>
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	bd38      	pop	{r3, r4, r5, pc}
 800b082:	bf00      	nop
 800b084:	20001b7c 	.word	0x20001b7c

0800b088 <_getpid_r>:
 800b088:	f7fb bb30 	b.w	80066ec <_getpid>

0800b08c <sbrk_aligned>:
 800b08c:	b570      	push	{r4, r5, r6, lr}
 800b08e:	4e0e      	ldr	r6, [pc, #56]	; (800b0c8 <sbrk_aligned+0x3c>)
 800b090:	460c      	mov	r4, r1
 800b092:	6831      	ldr	r1, [r6, #0]
 800b094:	4605      	mov	r5, r0
 800b096:	b911      	cbnz	r1, 800b09e <sbrk_aligned+0x12>
 800b098:	f000 f8bc 	bl	800b214 <_sbrk_r>
 800b09c:	6030      	str	r0, [r6, #0]
 800b09e:	4621      	mov	r1, r4
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	f000 f8b7 	bl	800b214 <_sbrk_r>
 800b0a6:	1c43      	adds	r3, r0, #1
 800b0a8:	d00a      	beq.n	800b0c0 <sbrk_aligned+0x34>
 800b0aa:	1cc4      	adds	r4, r0, #3
 800b0ac:	f024 0403 	bic.w	r4, r4, #3
 800b0b0:	42a0      	cmp	r0, r4
 800b0b2:	d007      	beq.n	800b0c4 <sbrk_aligned+0x38>
 800b0b4:	1a21      	subs	r1, r4, r0
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	f000 f8ac 	bl	800b214 <_sbrk_r>
 800b0bc:	3001      	adds	r0, #1
 800b0be:	d101      	bne.n	800b0c4 <sbrk_aligned+0x38>
 800b0c0:	f04f 34ff 	mov.w	r4, #4294967295
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	bd70      	pop	{r4, r5, r6, pc}
 800b0c8:	20001b78 	.word	0x20001b78

0800b0cc <_malloc_r>:
 800b0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d0:	1ccd      	adds	r5, r1, #3
 800b0d2:	f025 0503 	bic.w	r5, r5, #3
 800b0d6:	3508      	adds	r5, #8
 800b0d8:	2d0c      	cmp	r5, #12
 800b0da:	bf38      	it	cc
 800b0dc:	250c      	movcc	r5, #12
 800b0de:	2d00      	cmp	r5, #0
 800b0e0:	4607      	mov	r7, r0
 800b0e2:	db01      	blt.n	800b0e8 <_malloc_r+0x1c>
 800b0e4:	42a9      	cmp	r1, r5
 800b0e6:	d905      	bls.n	800b0f4 <_malloc_r+0x28>
 800b0e8:	230c      	movs	r3, #12
 800b0ea:	603b      	str	r3, [r7, #0]
 800b0ec:	2600      	movs	r6, #0
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f4:	4e2e      	ldr	r6, [pc, #184]	; (800b1b0 <_malloc_r+0xe4>)
 800b0f6:	f000 f89d 	bl	800b234 <__malloc_lock>
 800b0fa:	6833      	ldr	r3, [r6, #0]
 800b0fc:	461c      	mov	r4, r3
 800b0fe:	bb34      	cbnz	r4, 800b14e <_malloc_r+0x82>
 800b100:	4629      	mov	r1, r5
 800b102:	4638      	mov	r0, r7
 800b104:	f7ff ffc2 	bl	800b08c <sbrk_aligned>
 800b108:	1c43      	adds	r3, r0, #1
 800b10a:	4604      	mov	r4, r0
 800b10c:	d14d      	bne.n	800b1aa <_malloc_r+0xde>
 800b10e:	6834      	ldr	r4, [r6, #0]
 800b110:	4626      	mov	r6, r4
 800b112:	2e00      	cmp	r6, #0
 800b114:	d140      	bne.n	800b198 <_malloc_r+0xcc>
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	4631      	mov	r1, r6
 800b11a:	4638      	mov	r0, r7
 800b11c:	eb04 0803 	add.w	r8, r4, r3
 800b120:	f000 f878 	bl	800b214 <_sbrk_r>
 800b124:	4580      	cmp	r8, r0
 800b126:	d13a      	bne.n	800b19e <_malloc_r+0xd2>
 800b128:	6821      	ldr	r1, [r4, #0]
 800b12a:	3503      	adds	r5, #3
 800b12c:	1a6d      	subs	r5, r5, r1
 800b12e:	f025 0503 	bic.w	r5, r5, #3
 800b132:	3508      	adds	r5, #8
 800b134:	2d0c      	cmp	r5, #12
 800b136:	bf38      	it	cc
 800b138:	250c      	movcc	r5, #12
 800b13a:	4629      	mov	r1, r5
 800b13c:	4638      	mov	r0, r7
 800b13e:	f7ff ffa5 	bl	800b08c <sbrk_aligned>
 800b142:	3001      	adds	r0, #1
 800b144:	d02b      	beq.n	800b19e <_malloc_r+0xd2>
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	442b      	add	r3, r5
 800b14a:	6023      	str	r3, [r4, #0]
 800b14c:	e00e      	b.n	800b16c <_malloc_r+0xa0>
 800b14e:	6822      	ldr	r2, [r4, #0]
 800b150:	1b52      	subs	r2, r2, r5
 800b152:	d41e      	bmi.n	800b192 <_malloc_r+0xc6>
 800b154:	2a0b      	cmp	r2, #11
 800b156:	d916      	bls.n	800b186 <_malloc_r+0xba>
 800b158:	1961      	adds	r1, r4, r5
 800b15a:	42a3      	cmp	r3, r4
 800b15c:	6025      	str	r5, [r4, #0]
 800b15e:	bf18      	it	ne
 800b160:	6059      	strne	r1, [r3, #4]
 800b162:	6863      	ldr	r3, [r4, #4]
 800b164:	bf08      	it	eq
 800b166:	6031      	streq	r1, [r6, #0]
 800b168:	5162      	str	r2, [r4, r5]
 800b16a:	604b      	str	r3, [r1, #4]
 800b16c:	4638      	mov	r0, r7
 800b16e:	f104 060b 	add.w	r6, r4, #11
 800b172:	f000 f865 	bl	800b240 <__malloc_unlock>
 800b176:	f026 0607 	bic.w	r6, r6, #7
 800b17a:	1d23      	adds	r3, r4, #4
 800b17c:	1af2      	subs	r2, r6, r3
 800b17e:	d0b6      	beq.n	800b0ee <_malloc_r+0x22>
 800b180:	1b9b      	subs	r3, r3, r6
 800b182:	50a3      	str	r3, [r4, r2]
 800b184:	e7b3      	b.n	800b0ee <_malloc_r+0x22>
 800b186:	6862      	ldr	r2, [r4, #4]
 800b188:	42a3      	cmp	r3, r4
 800b18a:	bf0c      	ite	eq
 800b18c:	6032      	streq	r2, [r6, #0]
 800b18e:	605a      	strne	r2, [r3, #4]
 800b190:	e7ec      	b.n	800b16c <_malloc_r+0xa0>
 800b192:	4623      	mov	r3, r4
 800b194:	6864      	ldr	r4, [r4, #4]
 800b196:	e7b2      	b.n	800b0fe <_malloc_r+0x32>
 800b198:	4634      	mov	r4, r6
 800b19a:	6876      	ldr	r6, [r6, #4]
 800b19c:	e7b9      	b.n	800b112 <_malloc_r+0x46>
 800b19e:	230c      	movs	r3, #12
 800b1a0:	603b      	str	r3, [r7, #0]
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	f000 f84c 	bl	800b240 <__malloc_unlock>
 800b1a8:	e7a1      	b.n	800b0ee <_malloc_r+0x22>
 800b1aa:	6025      	str	r5, [r4, #0]
 800b1ac:	e7de      	b.n	800b16c <_malloc_r+0xa0>
 800b1ae:	bf00      	nop
 800b1b0:	20001b74 	.word	0x20001b74

0800b1b4 <_realloc_r>:
 800b1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b8:	4680      	mov	r8, r0
 800b1ba:	4614      	mov	r4, r2
 800b1bc:	460e      	mov	r6, r1
 800b1be:	b921      	cbnz	r1, 800b1ca <_realloc_r+0x16>
 800b1c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	f7ff bf81 	b.w	800b0cc <_malloc_r>
 800b1ca:	b92a      	cbnz	r2, 800b1d8 <_realloc_r+0x24>
 800b1cc:	f000 f83e 	bl	800b24c <_free_r>
 800b1d0:	4625      	mov	r5, r4
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d8:	f000 f884 	bl	800b2e4 <_malloc_usable_size_r>
 800b1dc:	4284      	cmp	r4, r0
 800b1de:	4607      	mov	r7, r0
 800b1e0:	d802      	bhi.n	800b1e8 <_realloc_r+0x34>
 800b1e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1e6:	d812      	bhi.n	800b20e <_realloc_r+0x5a>
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	f7ff ff6e 	bl	800b0cc <_malloc_r>
 800b1f0:	4605      	mov	r5, r0
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d0ed      	beq.n	800b1d2 <_realloc_r+0x1e>
 800b1f6:	42bc      	cmp	r4, r7
 800b1f8:	4622      	mov	r2, r4
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	bf28      	it	cs
 800b1fe:	463a      	movcs	r2, r7
 800b200:	f7ff fee2 	bl	800afc8 <memcpy>
 800b204:	4631      	mov	r1, r6
 800b206:	4640      	mov	r0, r8
 800b208:	f000 f820 	bl	800b24c <_free_r>
 800b20c:	e7e1      	b.n	800b1d2 <_realloc_r+0x1e>
 800b20e:	4635      	mov	r5, r6
 800b210:	e7df      	b.n	800b1d2 <_realloc_r+0x1e>
	...

0800b214 <_sbrk_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	4d06      	ldr	r5, [pc, #24]	; (800b230 <_sbrk_r+0x1c>)
 800b218:	2300      	movs	r3, #0
 800b21a:	4604      	mov	r4, r0
 800b21c:	4608      	mov	r0, r1
 800b21e:	602b      	str	r3, [r5, #0]
 800b220:	f7fb fa86 	bl	8006730 <_sbrk>
 800b224:	1c43      	adds	r3, r0, #1
 800b226:	d102      	bne.n	800b22e <_sbrk_r+0x1a>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	b103      	cbz	r3, 800b22e <_sbrk_r+0x1a>
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	bd38      	pop	{r3, r4, r5, pc}
 800b230:	20001b7c 	.word	0x20001b7c

0800b234 <__malloc_lock>:
 800b234:	4801      	ldr	r0, [pc, #4]	; (800b23c <__malloc_lock+0x8>)
 800b236:	f000 b85d 	b.w	800b2f4 <__retarget_lock_acquire_recursive>
 800b23a:	bf00      	nop
 800b23c:	20001b80 	.word	0x20001b80

0800b240 <__malloc_unlock>:
 800b240:	4801      	ldr	r0, [pc, #4]	; (800b248 <__malloc_unlock+0x8>)
 800b242:	f000 b858 	b.w	800b2f6 <__retarget_lock_release_recursive>
 800b246:	bf00      	nop
 800b248:	20001b80 	.word	0x20001b80

0800b24c <_free_r>:
 800b24c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b24e:	2900      	cmp	r1, #0
 800b250:	d044      	beq.n	800b2dc <_free_r+0x90>
 800b252:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b256:	9001      	str	r0, [sp, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f1a1 0404 	sub.w	r4, r1, #4
 800b25e:	bfb8      	it	lt
 800b260:	18e4      	addlt	r4, r4, r3
 800b262:	f7ff ffe7 	bl	800b234 <__malloc_lock>
 800b266:	4a1e      	ldr	r2, [pc, #120]	; (800b2e0 <_free_r+0x94>)
 800b268:	9801      	ldr	r0, [sp, #4]
 800b26a:	6813      	ldr	r3, [r2, #0]
 800b26c:	b933      	cbnz	r3, 800b27c <_free_r+0x30>
 800b26e:	6063      	str	r3, [r4, #4]
 800b270:	6014      	str	r4, [r2, #0]
 800b272:	b003      	add	sp, #12
 800b274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b278:	f7ff bfe2 	b.w	800b240 <__malloc_unlock>
 800b27c:	42a3      	cmp	r3, r4
 800b27e:	d908      	bls.n	800b292 <_free_r+0x46>
 800b280:	6825      	ldr	r5, [r4, #0]
 800b282:	1961      	adds	r1, r4, r5
 800b284:	428b      	cmp	r3, r1
 800b286:	bf01      	itttt	eq
 800b288:	6819      	ldreq	r1, [r3, #0]
 800b28a:	685b      	ldreq	r3, [r3, #4]
 800b28c:	1949      	addeq	r1, r1, r5
 800b28e:	6021      	streq	r1, [r4, #0]
 800b290:	e7ed      	b.n	800b26e <_free_r+0x22>
 800b292:	461a      	mov	r2, r3
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	b10b      	cbz	r3, 800b29c <_free_r+0x50>
 800b298:	42a3      	cmp	r3, r4
 800b29a:	d9fa      	bls.n	800b292 <_free_r+0x46>
 800b29c:	6811      	ldr	r1, [r2, #0]
 800b29e:	1855      	adds	r5, r2, r1
 800b2a0:	42a5      	cmp	r5, r4
 800b2a2:	d10b      	bne.n	800b2bc <_free_r+0x70>
 800b2a4:	6824      	ldr	r4, [r4, #0]
 800b2a6:	4421      	add	r1, r4
 800b2a8:	1854      	adds	r4, r2, r1
 800b2aa:	42a3      	cmp	r3, r4
 800b2ac:	6011      	str	r1, [r2, #0]
 800b2ae:	d1e0      	bne.n	800b272 <_free_r+0x26>
 800b2b0:	681c      	ldr	r4, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	6053      	str	r3, [r2, #4]
 800b2b6:	4421      	add	r1, r4
 800b2b8:	6011      	str	r1, [r2, #0]
 800b2ba:	e7da      	b.n	800b272 <_free_r+0x26>
 800b2bc:	d902      	bls.n	800b2c4 <_free_r+0x78>
 800b2be:	230c      	movs	r3, #12
 800b2c0:	6003      	str	r3, [r0, #0]
 800b2c2:	e7d6      	b.n	800b272 <_free_r+0x26>
 800b2c4:	6825      	ldr	r5, [r4, #0]
 800b2c6:	1961      	adds	r1, r4, r5
 800b2c8:	428b      	cmp	r3, r1
 800b2ca:	bf04      	itt	eq
 800b2cc:	6819      	ldreq	r1, [r3, #0]
 800b2ce:	685b      	ldreq	r3, [r3, #4]
 800b2d0:	6063      	str	r3, [r4, #4]
 800b2d2:	bf04      	itt	eq
 800b2d4:	1949      	addeq	r1, r1, r5
 800b2d6:	6021      	streq	r1, [r4, #0]
 800b2d8:	6054      	str	r4, [r2, #4]
 800b2da:	e7ca      	b.n	800b272 <_free_r+0x26>
 800b2dc:	b003      	add	sp, #12
 800b2de:	bd30      	pop	{r4, r5, pc}
 800b2e0:	20001b74 	.word	0x20001b74

0800b2e4 <_malloc_usable_size_r>:
 800b2e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e8:	1f18      	subs	r0, r3, #4
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	bfbc      	itt	lt
 800b2ee:	580b      	ldrlt	r3, [r1, r0]
 800b2f0:	18c0      	addlt	r0, r0, r3
 800b2f2:	4770      	bx	lr

0800b2f4 <__retarget_lock_acquire_recursive>:
 800b2f4:	4770      	bx	lr

0800b2f6 <__retarget_lock_release_recursive>:
 800b2f6:	4770      	bx	lr

0800b2f8 <_init>:
 800b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fa:	bf00      	nop
 800b2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2fe:	bc08      	pop	{r3}
 800b300:	469e      	mov	lr, r3
 800b302:	4770      	bx	lr

0800b304 <_fini>:
 800b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b306:	bf00      	nop
 800b308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30a:	bc08      	pop	{r3}
 800b30c:	469e      	mov	lr, r3
 800b30e:	4770      	bx	lr
