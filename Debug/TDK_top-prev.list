
TDK_top-prev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc68  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  0800be30  0800be30  0001be30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1a4  0800c1a4  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1a4  0800c1a4  0001c1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1ac  0800c1ac  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c1ac  0800c1ac  0001c1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1b4  0800c1b4  0001c1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800c1b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b34  200000c8  0800c27c  000200c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001bfc  0800c27c  00021bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000280fc  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004741  00000000  00000000  000481f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0004c938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0004db78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260c6  00000000  00000000  0004ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2e9  00000000  00000000  00074d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9649  00000000  00000000  0008f017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168660  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005184  00000000  00000000  001686b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000c8 	.word	0x200000c8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800be18 	.word	0x0800be18

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000cc 	.word	0x200000cc
 8000204:	0800be18 	.word	0x0800be18

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b974 	b.w	8000e04 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468e      	mov	lr, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d14d      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	4694      	mov	ip, r2
 8000b46:	d969      	bls.n	8000c1c <__udivmoddi4+0xe8>
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b152      	cbz	r2, 8000b64 <__udivmoddi4+0x30>
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	f1c2 0120 	rsb	r1, r2, #32
 8000b56:	fa20 f101 	lsr.w	r1, r0, r1
 8000b5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b62:	4094      	lsls	r4, r2
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	0c21      	lsrs	r1, r4, #16
 8000b6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b6e:	fa1f f78c 	uxth.w	r7, ip
 8000b72:	fb08 e316 	mls	r3, r8, r6, lr
 8000b76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b7a:	fb06 f107 	mul.w	r1, r6, r7
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8a:	f080 811f 	bcs.w	8000dcc <__udivmoddi4+0x298>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 811c 	bls.w	8000dcc <__udivmoddi4+0x298>
 8000b94:	3e02      	subs	r6, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb00 f707 	mul.w	r7, r0, r7
 8000bac:	42a7      	cmp	r7, r4
 8000bae:	d90a      	bls.n	8000bc6 <__udivmoddi4+0x92>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb8:	f080 810a 	bcs.w	8000dd0 <__udivmoddi4+0x29c>
 8000bbc:	42a7      	cmp	r7, r4
 8000bbe:	f240 8107 	bls.w	8000dd0 <__udivmoddi4+0x29c>
 8000bc2:	4464      	add	r4, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bca:	1be4      	subs	r4, r4, r7
 8000bcc:	2600      	movs	r6, #0
 8000bce:	b11d      	cbz	r5, 8000bd8 <__udivmoddi4+0xa4>
 8000bd0:	40d4      	lsrs	r4, r2
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0xc2>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	f000 80ef 	beq.w	8000dc6 <__udivmoddi4+0x292>
 8000be8:	2600      	movs	r6, #0
 8000bea:	e9c5 0100 	strd	r0, r1, [r5]
 8000bee:	4630      	mov	r0, r6
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	fab3 f683 	clz	r6, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d14a      	bne.n	8000c94 <__udivmoddi4+0x160>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xd4>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80f9 	bhi.w	8000dfa <__udivmoddi4+0x2c6>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	469e      	mov	lr, r3
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d0e0      	beq.n	8000bd8 <__udivmoddi4+0xa4>
 8000c16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c1a:	e7dd      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000c1c:	b902      	cbnz	r2, 8000c20 <__udivmoddi4+0xec>
 8000c1e:	deff      	udf	#255	; 0xff
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	f040 8092 	bne.w	8000d4e <__udivmoddi4+0x21a>
 8000c2a:	eba1 010c 	sub.w	r1, r1, ip
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2601      	movs	r6, #1
 8000c38:	0c20      	lsrs	r0, r4, #16
 8000c3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c46:	fb0e f003 	mul.w	r0, lr, r3
 8000c4a:	4288      	cmp	r0, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x12c>
 8000c4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x12a>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2c0>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	1a09      	subs	r1, r1, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c68:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x156>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x154>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2ca>
 8000c88:	4608      	mov	r0, r1
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c92:	e79c      	b.n	8000bce <__udivmoddi4+0x9a>
 8000c94:	f1c6 0720 	rsb	r7, r6, #32
 8000c98:	40b3      	lsls	r3, r6
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ca6:	fa01 f306 	lsl.w	r3, r1, r6
 8000caa:	431c      	orrs	r4, r3
 8000cac:	40f9      	lsrs	r1, r7
 8000cae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cba:	0c20      	lsrs	r0, r4, #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000cc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b8>
 8000cd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4461      	add	r1, ip
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	458e      	cmp	lr, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1e2>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2b4>
 8000d0e:	458e      	cmp	lr, r1
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2b4>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d1e:	eba1 010e 	sub.w	r1, r1, lr
 8000d22:	42a1      	cmp	r1, r4
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46a6      	mov	lr, r4
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x212>
 8000d2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d32:	eb61 010e 	sbc.w	r1, r1, lr
 8000d36:	fa01 f707 	lsl.w	r7, r1, r7
 8000d3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d3e:	40f1      	lsrs	r1, r6
 8000d40:	431f      	orrs	r7, r3
 8000d42:	e9c5 7100 	strd	r7, r1, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	40d8      	lsrs	r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4301      	orrs	r1, r0
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d70:	0c0b      	lsrs	r3, r1, #16
 8000d72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d76:	fb00 f60e 	mul.w	r6, r0, lr
 8000d7a:	429e      	cmp	r6, r3
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x260>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b8>
 8000d8c:	429e      	cmp	r6, r3
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b8>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1b9b      	subs	r3, r3, r6
 8000d96:	b289      	uxth	r1, r1
 8000d98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb06 f30e 	mul.w	r3, r6, lr
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x28a>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000dba:	3e02      	subs	r6, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0x104>
 8000dc6:	462e      	mov	r6, r5
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e705      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	e6e3      	b.n	8000b98 <__udivmoddi4+0x64>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6f8      	b.n	8000bc6 <__udivmoddi4+0x92>
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f8>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f8>
 8000de4:	4646      	mov	r6, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x28a>
 8000de8:	4620      	mov	r0, r4
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1e2>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x260>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b8>
 8000df4:	3b02      	subs	r3, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x12c>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e709      	b.n	8000c12 <__udivmoddi4+0xde>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x156>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	0a5a      	lsrs	r2, r3, #9
 8000e18:	490f      	ldr	r1, [pc, #60]	; (8000e58 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e1a:	fba1 1202 	umull	r1, r2, r1, r2
 8000e1e:	09d2      	lsrs	r2, r2, #7
 8000e20:	490e      	ldr	r1, [pc, #56]	; (8000e5c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000e22:	fb01 f202 	mul.w	r2, r1, r2
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	0a5b      	lsrs	r3, r3, #9
 8000e30:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e32:	fba2 2303 	umull	r2, r3, r2, r3
 8000e36:	09db      	lsrs	r3, r3, #7
 8000e38:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	441a      	add	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	00044b83 	.word	0x00044b83
 8000e5c:	3b9aca00 	.word	0x3b9aca00

08000e60 <HAL_TIM_PeriodElapsedCallback>:
int x = 0;
int debounce_ev = 0;
int buttoned_ev = 0;
int button_ev = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM5){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a54      	ldr	r2, [pc, #336]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	f040 80a1 	bne.w	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x156>
		//reset sensors
		debounce_ev++;
 8000e74:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a52      	ldr	r2, [pc, #328]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e7c:	6013      	str	r3, [r2, #0]
//		hz_origin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
		button_ev = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000e7e:	2120      	movs	r1, #32
 8000e80:	4851      	ldr	r0, [pc, #324]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000e82:	f007 fa5b 	bl	800833c <HAL_GPIO_ReadPin>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b50      	ldr	r3, [pc, #320]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000e8c:	601a      	str	r2, [r3, #0]

		if(buttoned_ev != button_ev)	debounce_ev = 0;
 8000e8e:	4b50      	ldr	r3, [pc, #320]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4b4e      	ldr	r3, [pc, #312]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d002      	beq.n	8000ea0 <HAL_TIM_PeriodElapsedCallback+0x40>
 8000e9a:	4b4a      	ldr	r3, [pc, #296]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
		buttoned_ev = button_ev;
 8000ea0:	4b4a      	ldr	r3, [pc, #296]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a4a      	ldr	r2, [pc, #296]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000ea6:	6013      	str	r3, [r2, #0]

		if(debounce_ev > 500)	ev_origin = button_ev;
 8000ea8:	4b46      	ldr	r3, [pc, #280]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000eb0:	dd03      	ble.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x5a>
 8000eb2:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a47      	ldr	r2, [pc, #284]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000eb8:	6013      	str	r3, [r2, #0]

		//ball seat
		switch(seat_mode){
 8000eba:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d002      	beq.n	8000ec8 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d006      	beq.n	8000ed4 <HAL_TIM_PeriodElapsedCallback+0x74>
 8000ec6:	e00b      	b.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x80>
			case 1: //loaded
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,600+10*loaded);
 8000ec8:	4b44      	ldr	r3, [pc, #272]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8000ed0:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000ed2:	e005      	b.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x80>
			case 2:	//reload
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,600+10*reload);
 8000ed4:	4b41      	ldr	r3, [pc, #260]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000edc:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000ede:	bf00      	nop
		}

		//shooter
		if(reset == 1)	Reset();
 8000ee0:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d102      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x8e>
 8000ee8:	f005 fa32 	bl	8006350 <_Z5Resetv>
 8000eec:	e003      	b.n	8000ef6 <HAL_TIM_PeriodElapsedCallback+0x96>
		else{
			shooter_base();
 8000eee:	f004 fcab 	bl	8005848 <_Z12shooter_basev>
			base_limit();
 8000ef2:	f005 fae3 	bl	80064bc <_Z10base_limitv>
		}
		Script();
 8000ef6:	f005 fb39 	bl	800656c <_Z6Scriptv>
		shooter();
 8000efa:	f004 fb41 	bl	8005580 <_Z7shooterv>
		//laji car
		fl = HAL_GPIO_ReadPin(FLIPING_DOWN_LIMIT_PORT, FLIPING_DOWN_LIMIT_PIN);
 8000efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f02:	4838      	ldr	r0, [pc, #224]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f04:	f007 fa1a 	bl	800833c <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f0e:	601a      	str	r2, [r3, #0]
		fu = HAL_GPIO_ReadPin(FLIPING_UP_LIMIT_PORT, FLIPING_UP_LIMIT_PIN);
 8000f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f14:	4835      	ldr	r0, [pc, #212]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f16:	f007 fa11 	bl	800833c <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f20:	601a      	str	r2, [r3, #0]
		ll = HAL_GPIO_ReadPin(LIFTING_DOWN_LIMIT_PORT, LIFTING_DOWN_LIMIT_PIN);
 8000f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f26:	4831      	ldr	r0, [pc, #196]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f28:	f007 fa08 	bl	800833c <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f32:	601a      	str	r2, [r3, #0]
		lu = HAL_GPIO_ReadPin(LIFTING_UP_LIMIT_PORT, LIFTING_UP_LIMIT_PIN);
 8000f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f38:	482c      	ldr	r0, [pc, #176]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f3a:	f007 f9ff 	bl	800833c <HAL_GPIO_ReadPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f44:	601a      	str	r2, [r3, #0]
		if(laji_cmd == 1){
 8000f46:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d104      	bne.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0xf8>
			cmd = laji_cmd;
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a2b      	ldr	r2, [pc, #172]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e007      	b.n	8000f68 <HAL_TIM_PeriodElapsedCallback+0x108>
		}
		else if(laji_cmd == 2){
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d103      	bne.n	8000f68 <HAL_TIM_PeriodElapsedCallback+0x108>
			cmd = laji_cmd;
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a26      	ldr	r2, [pc, #152]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f66:	6013      	str	r3, [r2, #0]
		}
		if(laji_reset == 1){
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d102      	bne.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x116>
			laji_Reset();
 8000f70:	f000 fa08 	bl	8001384 <_Z10laji_Resetv>
 8000f74:	e001      	b.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x11a>
		}
		else{
			laji_control();
 8000f76:	f000 fa2b 	bl	80013d0 <_Z12laji_controlv>
		}
		t++;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a21      	ldr	r2, [pc, #132]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f82:	6013      	str	r3, [r2, #0]
		if(t%20 == 0){
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f86:	6819      	ldr	r1, [r3, #0]
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f8a:	fb83 2301 	smull	r2, r3, r3, r1
 8000f8e:	10da      	asrs	r2, r3, #3
 8000f90:	17cb      	asrs	r3, r1, #31
 8000f92:	1ad2      	subs	r2, r2, r3
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	1aca      	subs	r2, r1, r3
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	d109      	bne.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x156>
			t = 0;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
			x++;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a18      	ldr	r2, [pc, #96]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000fb0:	6013      	str	r3, [r2, #0]
			pub();
 8000fb2:	f003 f99b 	bl	80042ec <_Z3pubv>
		}
	}
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40000c00 	.word	0x40000c00
 8000fc4:	200000fc 	.word	0x200000fc
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	20000104 	.word	0x20000104
 8000fd0:	20000100 	.word	0x20000100
 8000fd4:	20001bc0 	.word	0x20001bc0
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	200001fc 	.word	0x200001fc
 8000fe0:	20001bb8 	.word	0x20001bb8
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	200000e8 	.word	0x200000e8
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	200000e4 	.word	0x200000e4
 8000ff4:	200000f0 	.word	0x200000f0
 8000ff8:	200000ec 	.word	0x200000ec
 8000ffc:	20000118 	.word	0x20000118
 8001000:	2000011c 	.word	0x2000011c
 8001004:	20000000 	.word	0x20000000
 8001008:	200000f4 	.word	0x200000f4
 800100c:	66666667 	.word	0x66666667
 8001010:	200000f8 	.word	0x200000f8

08001014 <_Z16script_badmintonv>:
extern TIM_HandleTypeDef htim3;

int sig = 0;
int z = 0;

void script_badminton(){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 600+10*90);//initialize push sg90
 8001018:	4b4c      	ldr	r3, [pc, #304]	; (800114c <_Z16script_badmintonv+0x138>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001020:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 600+10*90);//initialize grab sg90
 8001022:	4b4a      	ldr	r3, [pc, #296]	; (800114c <_Z16script_badmintonv+0x138>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800102a:	641a      	str	r2, [r3, #64]	; 0x40
	z++;
 800102c:	4b48      	ldr	r3, [pc, #288]	; (8001150 <_Z16script_badmintonv+0x13c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	4a47      	ldr	r2, [pc, #284]	; (8001150 <_Z16script_badmintonv+0x13c>)
 8001034:	6013      	str	r3, [r2, #0]
	HAL_Delay(500);
 8001036:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800103a:	f006 f915 	bl	8007268 <HAL_Delay>
	UART_Send_SetMotorPosition(4, 1500,300);//down
 800103e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001042:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001046:	2004      	movs	r0, #4
 8001048:	f004 fa54 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>
	HAL_Delay(500);
 800104c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001050:	f006 f90a 	bl	8007268 <HAL_Delay>
	UART_Send_SetMotorPosition(5, 900, 200);//take badminton
 8001054:	22c8      	movs	r2, #200	; 0xc8
 8001056:	f44f 7161 	mov.w	r1, #900	; 0x384
 800105a:	2005      	movs	r0, #5
 800105c:	f004 fa4a 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>
	HAL_Delay(500);
 8001060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001064:	f006 f900 	bl	8007268 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 20000 * 23);
 8001068:	4b38      	ldr	r3, [pc, #224]	; (800114c <_Z16script_badmintonv+0x138>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a39      	ldr	r2, [pc, #228]	; (8001154 <_Z16script_badmintonv+0x140>)
 800106e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(500);
 8001070:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001074:	f006 f8f8 	bl	8007268 <HAL_Delay>
	UART_Send_SetMotorPosition(4, 2000,300);
 8001078:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800107c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001080:	2004      	movs	r0, #4
 8001082:	f004 fa37 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>
	HAL_Delay(500);
 8001086:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800108a:	f006 f8ed 	bl	8007268 <HAL_Delay>
	UART_Send_SetMotorPosition(5, 2000,300);//drop badminton
 800108e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001092:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001096:	2005      	movs	r0, #5
 8001098:	f004 fa2c 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>
	HAL_Delay(500);
 800109c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a0:	f006 f8e2 	bl	8007268 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 600+10*90);
 80010a4:	4b29      	ldr	r3, [pc, #164]	; (800114c <_Z16script_badmintonv+0x138>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(500);
 80010ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b2:	f006 f8d9 	bl	8007268 <HAL_Delay>
	UART_Send_SetMotorPosition(5, 900,300);
 80010b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010ba:	f44f 7161 	mov.w	r1, #900	; 0x384
 80010be:	2005      	movs	r0, #5
 80010c0:	f004 fa18 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>
	HAL_Delay(500);
 80010c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010c8:	f006 f8ce 	bl	8007268 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);//turn on motor
 80010cc:	2201      	movs	r2, #1
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	4821      	ldr	r0, [pc, #132]	; (8001158 <_Z16script_badmintonv+0x144>)
 80010d2:	f007 f94b 	bl	800836c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010da:	f006 f8c5 	bl	8007268 <HAL_Delay>
	UART_Send_SetMotorPosition(3, 1200,500);//lift platform
 80010de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010e2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80010e6:	2003      	movs	r0, #3
 80010e8:	f004 fa04 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>
	HAL_Delay(500);
 80010ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f0:	f006 f8ba 	bl	8007268 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 600+10*20);//push
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <_Z16script_badmintonv+0x138>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80010fc:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(500);
 80010fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001102:	f006 f8b1 	bl	8007268 <HAL_Delay>
	UART_Send_SetMotorPosition(3, 1500,500);//drop platform
 8001106:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800110a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800110e:	2003      	movs	r0, #3
 8001110:	f004 f9f0 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>
	HAL_Delay(500);
 8001114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001118:	f006 f8a6 	bl	8007268 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);//turn off motor
 800111c:	2200      	movs	r2, #0
 800111e:	2180      	movs	r1, #128	; 0x80
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <_Z16script_badmintonv+0x144>)
 8001122:	f007 f923 	bl	800836c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001126:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800112a:	f006 f89d 	bl	8007268 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 600+10*90);//pull back
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_Z16script_badmintonv+0x138>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(500);
 8001138:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800113c:	f006 f894 	bl	8007268 <HAL_Delay>

	sig=2;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <_Z16script_badmintonv+0x148>)
 8001142:	2202      	movs	r2, #2
 8001144:	601a      	str	r2, [r3, #0]
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000028c 	.word	0x2000028c
 8001150:	2000010c 	.word	0x2000010c
 8001154:	000704e0 	.word	0x000704e0
 8001158:	40020800 	.word	0x40020800
 800115c:	20000108 	.word	0x20000108

08001160 <_Z13fliping_statei>:
laji fliping;
laji lifting;
int laji_reset = 1;
int laji_cmd, cmd, laji_ok = 1;

int fliping_state(int f_dir){
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af04      	add	r7, sp, #16
 8001166:	6078      	str	r0, [r7, #4]
 int ENA = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
 if(f_dir == 1){
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d127      	bne.n	80011c2 <_Z13fliping_statei+0x62>
  fliping.move(1,0, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 8001172:	2301      	movs	r3, #1
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	4b29      	ldr	r3, [pc, #164]	; (800121c <_Z13fliping_statei+0xbc>)
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2310      	movs	r3, #16
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <_Z13fliping_statei+0xc0>)
 8001180:	2200      	movs	r2, #0
 8001182:	2101      	movs	r1, #1
 8001184:	4827      	ldr	r0, [pc, #156]	; (8001224 <_Z13fliping_statei+0xc4>)
 8001186:	f000 f8b3 	bl	80012f0 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
  if(HAL_GPIO_ReadPin(FLIPING_DOWN_LIMIT_PORT, FLIPING_DOWN_LIMIT_PIN)){
 800118a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118e:	4824      	ldr	r0, [pc, #144]	; (8001220 <_Z13fliping_statei+0xc0>)
 8001190:	f007 f8d4 	bl	800833c <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf14      	ite	ne
 800119a:	2301      	movne	r3, #1
 800119c:	2300      	moveq	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d035      	beq.n	8001210 <_Z13fliping_statei+0xb0>
   fliping.move(0,0, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 80011a4:	2301      	movs	r3, #1
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <_Z13fliping_statei+0xbc>)
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	2310      	movs	r3, #16
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <_Z13fliping_statei+0xc0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	481b      	ldr	r0, [pc, #108]	; (8001224 <_Z13fliping_statei+0xc4>)
 80011b8:	f000 f89a 	bl	80012f0 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
   ENA = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	e026      	b.n	8001210 <_Z13fliping_statei+0xb0>
  }
 }
 else{ //f_dir == 0
  fliping.move(0,1, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 80011c2:	2301      	movs	r3, #1
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <_Z13fliping_statei+0xbc>)
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	2310      	movs	r3, #16
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <_Z13fliping_statei+0xc0>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	2100      	movs	r1, #0
 80011d4:	4813      	ldr	r0, [pc, #76]	; (8001224 <_Z13fliping_statei+0xc4>)
 80011d6:	f000 f88b 	bl	80012f0 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
  if(HAL_GPIO_ReadPin(FLIPING_UP_LIMIT_PORT, FLIPING_UP_LIMIT_PIN)){
 80011da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011de:	4812      	ldr	r0, [pc, #72]	; (8001228 <_Z13fliping_statei+0xc8>)
 80011e0:	f007 f8ac 	bl	800833c <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00d      	beq.n	8001210 <_Z13fliping_statei+0xb0>
   fliping.move(0,0, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 80011f4:	2301      	movs	r3, #1
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <_Z13fliping_statei+0xbc>)
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	2310      	movs	r3, #16
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <_Z13fliping_statei+0xc0>)
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <_Z13fliping_statei+0xc4>)
 8001208:	f000 f872 	bl	80012f0 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
   ENA = 1;
 800120c:	2301      	movs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
  }
 }
 return ENA;
 8001210:	68fb      	ldr	r3, [r7, #12]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020400 	.word	0x40020400
 8001220:	40020000 	.word	0x40020000
 8001224:	20000110 	.word	0x20000110
 8001228:	40020800 	.word	0x40020800

0800122c <_Z13lifting_statei>:
int lifting_state(int l_dir){
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af04      	add	r7, sp, #16
 8001232:	6078      	str	r0, [r7, #4]
 int ENB = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
 if(l_dir == 1){
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d127      	bne.n	800128e <_Z13lifting_statei+0x62>
  lifting.move(1,0, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 800123e:	2304      	movs	r3, #4
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <_Z13lifting_statei+0xbc>)
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	2308      	movs	r3, #8
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <_Z13lifting_statei+0xbc>)
 800124c:	2200      	movs	r2, #0
 800124e:	2101      	movs	r1, #1
 8001250:	4826      	ldr	r0, [pc, #152]	; (80012ec <_Z13lifting_statei+0xc0>)
 8001252:	f000 f84d 	bl	80012f0 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
  if(HAL_GPIO_ReadPin(LIFTING_DOWN_LIMIT_PORT, LIFTING_DOWN_LIMIT_PIN)){
 8001256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800125a:	4823      	ldr	r0, [pc, #140]	; (80012e8 <_Z13lifting_statei+0xbc>)
 800125c:	f007 f86e 	bl	800833c <HAL_GPIO_ReadPin>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf14      	ite	ne
 8001266:	2301      	movne	r3, #1
 8001268:	2300      	moveq	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d035      	beq.n	80012dc <_Z13lifting_statei+0xb0>
   lifting.move(0,0, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 8001270:	2304      	movs	r3, #4
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <_Z13lifting_statei+0xbc>)
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	2308      	movs	r3, #8
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <_Z13lifting_statei+0xbc>)
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	481a      	ldr	r0, [pc, #104]	; (80012ec <_Z13lifting_statei+0xc0>)
 8001284:	f000 f834 	bl	80012f0 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
   ENB = 1;
 8001288:	2301      	movs	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	e026      	b.n	80012dc <_Z13lifting_statei+0xb0>
  }
 }
 else{ //l_dir == 0
  lifting.move(0,1, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 800128e:	2304      	movs	r3, #4
 8001290:	9302      	str	r3, [sp, #8]
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_Z13lifting_statei+0xbc>)
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	2308      	movs	r3, #8
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <_Z13lifting_statei+0xbc>)
 800129c:	2201      	movs	r2, #1
 800129e:	2100      	movs	r1, #0
 80012a0:	4812      	ldr	r0, [pc, #72]	; (80012ec <_Z13lifting_statei+0xc0>)
 80012a2:	f000 f825 	bl	80012f0 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
  if(HAL_GPIO_ReadPin(LIFTING_UP_LIMIT_PORT, LIFTING_UP_LIMIT_PIN)){
 80012a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012aa:	480f      	ldr	r0, [pc, #60]	; (80012e8 <_Z13lifting_statei+0xbc>)
 80012ac:	f007 f846 	bl	800833c <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00d      	beq.n	80012dc <_Z13lifting_statei+0xb0>
   lifting.move(0,0, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 80012c0:	2304      	movs	r3, #4
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <_Z13lifting_statei+0xbc>)
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	2308      	movs	r3, #8
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <_Z13lifting_statei+0xbc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <_Z13lifting_statei+0xc0>)
 80012d4:	f000 f80c 	bl	80012f0 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
   ENB = 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
  }
 }
 return ENB;
 80012dc:	68fb      	ldr	r3, [r7, #12]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40020800 	.word	0x40020800
 80012ec:	20000114 	.word	0x20000114

080012f0 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>:
void laji::move(int INA, int INB, GPIO_TypeDef* GPIOxA,uint16_t GPIO_PinA, GPIO_TypeDef* GPIOxB,uint16_t GPIO_PinB){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	603b      	str	r3, [r7, #0]
 if( (INA == 0 && INB == 0) || (INA == 1 && INB == 1) ){
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x1a>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x26>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d10f      	bne.n	8001330 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x40>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d10c      	bne.n	8001330 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x40>
  HAL_GPIO_WritePin(GPIOxA, GPIO_PinA, GPIO_PIN_RESET);
 8001316:	8b3b      	ldrh	r3, [r7, #24]
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	6838      	ldr	r0, [r7, #0]
 800131e:	f007 f825 	bl	800836c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOxB, GPIO_PinB, GPIO_PIN_RESET);
 8001322:	8c3b      	ldrh	r3, [r7, #32]
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	69f8      	ldr	r0, [r7, #28]
 800132a:	f007 f81f 	bl	800836c <HAL_GPIO_WritePin>
 800132e:	e025      	b.n	800137c <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
 }
 else if( INA == 1 && INB == 0 ){
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10f      	bne.n	8001356 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x66>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10c      	bne.n	8001356 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x66>
  HAL_GPIO_WritePin(GPIOxA, GPIO_PinA, GPIO_PIN_SET);
 800133c:	8b3b      	ldrh	r3, [r7, #24]
 800133e:	2201      	movs	r2, #1
 8001340:	4619      	mov	r1, r3
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f007 f812 	bl	800836c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOxB, GPIO_PinB, GPIO_PIN_RESET);
 8001348:	8c3b      	ldrh	r3, [r7, #32]
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	69f8      	ldr	r0, [r7, #28]
 8001350:	f007 f80c 	bl	800836c <HAL_GPIO_WritePin>
 8001354:	e012      	b.n	800137c <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
 }
 else if( INA == 0 && INB == 1 ){
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10f      	bne.n	800137c <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d10c      	bne.n	800137c <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
  HAL_GPIO_WritePin(GPIOxA, GPIO_PinA, GPIO_PIN_RESET);
 8001362:	8b3b      	ldrh	r3, [r7, #24]
 8001364:	2200      	movs	r2, #0
 8001366:	4619      	mov	r1, r3
 8001368:	6838      	ldr	r0, [r7, #0]
 800136a:	f006 ffff 	bl	800836c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOxB, GPIO_PinB, GPIO_PIN_SET);
 800136e:	8c3b      	ldrh	r3, [r7, #32]
 8001370:	2201      	movs	r2, #1
 8001372:	4619      	mov	r1, r3
 8001374:	69f8      	ldr	r0, [r7, #28]
 8001376:	f006 fff9 	bl	800836c <HAL_GPIO_WritePin>
 }
}
 800137a:	e7ff      	b.n	800137c <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_Z10laji_Resetv>:
}

//if(msg->pin == 1){
// reset = 1;
//}
void laji_Reset(){
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
 if(laji_reset != 0){
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <_Z10laji_Resetv+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00b      	beq.n	80013a8 <_Z10laji_Resetv+0x24>
 lifting.ENA = lifting_state(0);
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff ff4b 	bl	800122c <_Z13lifting_statei>
 8001396:	4603      	mov	r3, r0
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <_Z10laji_Resetv+0x44>)
 800139a:	6013      	str	r3, [r2, #0]
 fliping.ENA = fliping_state(0);
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff fedf 	bl	8001160 <_Z13fliping_statei>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <_Z10laji_Resetv+0x48>)
 80013a6:	6013      	str	r3, [r2, #0]
 }
 if(lifting.ENA == 1 && fliping.ENA == 1){
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_Z10laji_Resetv+0x44>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d106      	bne.n	80013be <_Z10laji_Resetv+0x3a>
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <_Z10laji_Resetv+0x48>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <_Z10laji_Resetv+0x3a>
 laji_reset = 0;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <_Z10laji_Resetv+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 }
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000114 	.word	0x20000114
 80013cc:	20000110 	.word	0x20000110

080013d0 <_Z12laji_controlv>:
// cmd = 1;
//}
//if(msg->data == 2){
// cmd = 2;
//}
void laji_control(){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
 static int a = 0;
 if(cmd == 1){
 80013d4:	4b79      	ldr	r3, [pc, #484]	; (80015bc <_Z12laji_controlv+0x1ec>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d11f      	bne.n	800141c <_Z12laji_controlv+0x4c>
  laji_ok = 0;
 80013dc:	4b78      	ldr	r3, [pc, #480]	; (80015c0 <_Z12laji_controlv+0x1f0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
  fliping.ENA = fliping_state(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff febc 	bl	8001160 <_Z13fliping_statei>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a76      	ldr	r2, [pc, #472]	; (80015c4 <_Z12laji_controlv+0x1f4>)
 80013ec:	6013      	str	r3, [r2, #0]
  lifting.ENA = lifting_state(0);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff ff1c 	bl	800122c <_Z13lifting_statei>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a74      	ldr	r2, [pc, #464]	; (80015c8 <_Z12laji_controlv+0x1f8>)
 80013f8:	6013      	str	r3, [r2, #0]
  if(fliping.ENA == 1 && lifting.ENA == 1){
 80013fa:	4b72      	ldr	r3, [pc, #456]	; (80015c4 <_Z12laji_controlv+0x1f4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	f040 80d9 	bne.w	80015b6 <_Z12laji_controlv+0x1e6>
 8001404:	4b70      	ldr	r3, [pc, #448]	; (80015c8 <_Z12laji_controlv+0x1f8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	f040 80d4 	bne.w	80015b6 <_Z12laji_controlv+0x1e6>
  cmd = 0;
 800140e:	4b6b      	ldr	r3, [pc, #428]	; (80015bc <_Z12laji_controlv+0x1ec>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
  laji_ok = 1;
 8001414:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <_Z12laji_controlv+0x1f0>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]
     }
    }
  else if(cmd == -1){
   laji_stop();
  }
}
 800141a:	e0cc      	b.n	80015b6 <_Z12laji_controlv+0x1e6>
 else if(cmd == 2){
 800141c:	4b67      	ldr	r3, [pc, #412]	; (80015bc <_Z12laji_controlv+0x1ec>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d161      	bne.n	80014e8 <_Z12laji_controlv+0x118>
  laji_ok = 0;
 8001424:	4b66      	ldr	r3, [pc, #408]	; (80015c0 <_Z12laji_controlv+0x1f0>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
  if(a%3 == 0){
 800142a:	4b68      	ldr	r3, [pc, #416]	; (80015cc <_Z12laji_controlv+0x1fc>)
 800142c:	6819      	ldr	r1, [r3, #0]
 800142e:	4b68      	ldr	r3, [pc, #416]	; (80015d0 <_Z12laji_controlv+0x200>)
 8001430:	fb83 3201 	smull	r3, r2, r3, r1
 8001434:	17cb      	asrs	r3, r1, #31
 8001436:	1ad2      	subs	r2, r2, r3
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	1aca      	subs	r2, r1, r3
 8001440:	2a00      	cmp	r2, #0
 8001442:	d110      	bne.n	8001466 <_Z12laji_controlv+0x96>
   lifting.ENA = lifting_state(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fef1 	bl	800122c <_Z13lifting_statei>
 800144a:	4603      	mov	r3, r0
 800144c:	4a5e      	ldr	r2, [pc, #376]	; (80015c8 <_Z12laji_controlv+0x1f8>)
 800144e:	6013      	str	r3, [r2, #0]
   if(lifting.ENA == 1){
 8001450:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <_Z12laji_controlv+0x1f8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	f040 80ae 	bne.w	80015b6 <_Z12laji_controlv+0x1e6>
    a++;
 800145a:	4b5c      	ldr	r3, [pc, #368]	; (80015cc <_Z12laji_controlv+0x1fc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a5a      	ldr	r2, [pc, #360]	; (80015cc <_Z12laji_controlv+0x1fc>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	e0a7      	b.n	80015b6 <_Z12laji_controlv+0x1e6>
  else if(a%3 == 1){
 8001466:	4b59      	ldr	r3, [pc, #356]	; (80015cc <_Z12laji_controlv+0x1fc>)
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <_Z12laji_controlv+0x200>)
 800146c:	fb83 3201 	smull	r3, r2, r3, r1
 8001470:	17cb      	asrs	r3, r1, #31
 8001472:	1ad2      	subs	r2, r2, r3
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	1aca      	subs	r2, r1, r3
 800147c:	2a01      	cmp	r2, #1
 800147e:	d110      	bne.n	80014a2 <_Z12laji_controlv+0xd2>
   lifting.ENA = lifting_state(0);
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff fed3 	bl	800122c <_Z13lifting_statei>
 8001486:	4603      	mov	r3, r0
 8001488:	4a4f      	ldr	r2, [pc, #316]	; (80015c8 <_Z12laji_controlv+0x1f8>)
 800148a:	6013      	str	r3, [r2, #0]
   if(lifting.ENA == 1){
 800148c:	4b4e      	ldr	r3, [pc, #312]	; (80015c8 <_Z12laji_controlv+0x1f8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	f040 8090 	bne.w	80015b6 <_Z12laji_controlv+0x1e6>
    a++;
 8001496:	4b4d      	ldr	r3, [pc, #308]	; (80015cc <_Z12laji_controlv+0x1fc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <_Z12laji_controlv+0x1fc>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	e089      	b.n	80015b6 <_Z12laji_controlv+0x1e6>
  else if(a%3 == 2){
 80014a2:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <_Z12laji_controlv+0x1fc>)
 80014a4:	6819      	ldr	r1, [r3, #0]
 80014a6:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <_Z12laji_controlv+0x200>)
 80014a8:	fb83 3201 	smull	r3, r2, r3, r1
 80014ac:	17cb      	asrs	r3, r1, #31
 80014ae:	1ad2      	subs	r2, r2, r3
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	1aca      	subs	r2, r1, r3
 80014b8:	2a02      	cmp	r2, #2
 80014ba:	d17c      	bne.n	80015b6 <_Z12laji_controlv+0x1e6>
   fliping.ENA = fliping_state(0);
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fe4f 	bl	8001160 <_Z13fliping_statei>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a3f      	ldr	r2, [pc, #252]	; (80015c4 <_Z12laji_controlv+0x1f4>)
 80014c6:	6013      	str	r3, [r2, #0]
   if(fliping.ENA == 1){
 80014c8:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <_Z12laji_controlv+0x1f4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d172      	bne.n	80015b6 <_Z12laji_controlv+0x1e6>
    a++;
 80014d0:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <_Z12laji_controlv+0x1fc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	4a3d      	ldr	r2, [pc, #244]	; (80015cc <_Z12laji_controlv+0x1fc>)
 80014d8:	6013      	str	r3, [r2, #0]
    cmd = 0;
 80014da:	4b38      	ldr	r3, [pc, #224]	; (80015bc <_Z12laji_controlv+0x1ec>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
    laji_ok = 1;
 80014e0:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <_Z12laji_controlv+0x1f0>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	e066      	b.n	80015b6 <_Z12laji_controlv+0x1e6>
 else if(cmd == 3){
 80014e8:	4b34      	ldr	r3, [pc, #208]	; (80015bc <_Z12laji_controlv+0x1ec>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d113      	bne.n	8001518 <_Z12laji_controlv+0x148>
   laji_ok = 0;
 80014f0:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <_Z12laji_controlv+0x1f0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
   fliping.ENA = fliping_state(0);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff fe32 	bl	8001160 <_Z13fliping_statei>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a31      	ldr	r2, [pc, #196]	; (80015c4 <_Z12laji_controlv+0x1f4>)
 8001500:	6013      	str	r3, [r2, #0]
   if(fliping.ENA == 1){
 8001502:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <_Z12laji_controlv+0x1f4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d155      	bne.n	80015b6 <_Z12laji_controlv+0x1e6>
    cmd = 0;
 800150a:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <_Z12laji_controlv+0x1ec>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
     laji_ok = 1;
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <_Z12laji_controlv+0x1f0>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	e04e      	b.n	80015b6 <_Z12laji_controlv+0x1e6>
 else if(cmd == 4){
 8001518:	4b28      	ldr	r3, [pc, #160]	; (80015bc <_Z12laji_controlv+0x1ec>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d113      	bne.n	8001548 <_Z12laji_controlv+0x178>
    laji_ok = 0;
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <_Z12laji_controlv+0x1f0>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
    fliping.ENA = fliping_state(1);
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff fe1a 	bl	8001160 <_Z13fliping_statei>
 800152c:	4603      	mov	r3, r0
 800152e:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <_Z12laji_controlv+0x1f4>)
 8001530:	6013      	str	r3, [r2, #0]
    if(fliping.ENA == 1){
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <_Z12laji_controlv+0x1f4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d13d      	bne.n	80015b6 <_Z12laji_controlv+0x1e6>
     cmd = 0;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <_Z12laji_controlv+0x1ec>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
      laji_ok = 1;
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <_Z12laji_controlv+0x1f0>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]
}
 8001546:	e036      	b.n	80015b6 <_Z12laji_controlv+0x1e6>
  else if(cmd == 5){
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <_Z12laji_controlv+0x1ec>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b05      	cmp	r3, #5
 800154e:	d113      	bne.n	8001578 <_Z12laji_controlv+0x1a8>
   laji_ok = 0;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <_Z12laji_controlv+0x1f0>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
   lifting.ENA = lifting_state(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff fe68 	bl	800122c <_Z13lifting_statei>
 800155c:	4603      	mov	r3, r0
 800155e:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <_Z12laji_controlv+0x1f8>)
 8001560:	6013      	str	r3, [r2, #0]
   if(lifting.ENA == 1){
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <_Z12laji_controlv+0x1f8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d125      	bne.n	80015b6 <_Z12laji_controlv+0x1e6>
    cmd = 0;
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <_Z12laji_controlv+0x1ec>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
    laji_ok = 1;
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_Z12laji_controlv+0x1f0>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	e01e      	b.n	80015b6 <_Z12laji_controlv+0x1e6>
  else if(cmd == 6){
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <_Z12laji_controlv+0x1ec>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b06      	cmp	r3, #6
 800157e:	d113      	bne.n	80015a8 <_Z12laji_controlv+0x1d8>
   laji_ok = 0;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <_Z12laji_controlv+0x1f0>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
   lifting.ENA = lifting_state(0);
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff fe50 	bl	800122c <_Z13lifting_statei>
 800158c:	4603      	mov	r3, r0
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <_Z12laji_controlv+0x1f8>)
 8001590:	6013      	str	r3, [r2, #0]
   if(lifting.ENA == 1){
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <_Z12laji_controlv+0x1f8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d10d      	bne.n	80015b6 <_Z12laji_controlv+0x1e6>
    cmd = 0;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <_Z12laji_controlv+0x1ec>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
    laji_ok = 1;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_Z12laji_controlv+0x1f0>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
}
 80015a6:	e006      	b.n	80015b6 <_Z12laji_controlv+0x1e6>
  else if(cmd == -1){
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <_Z12laji_controlv+0x1ec>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d101      	bne.n	80015b6 <_Z12laji_controlv+0x1e6>
   laji_stop();
 80015b2:	f000 f80f 	bl	80015d4 <_Z9laji_stopv>
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000011c 	.word	0x2000011c
 80015c0:	20000004 	.word	0x20000004
 80015c4:	20000110 	.word	0x20000110
 80015c8:	20000114 	.word	0x20000114
 80015cc:	20000120 	.word	0x20000120
 80015d0:	55555556 	.word	0x55555556

080015d4 <_Z9laji_stopv>:

void laji_stop(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af04      	add	r7, sp, #16
 fliping.move(0,0, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 80015da:	2301      	movs	r3, #1
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <_Z9laji_stopv+0x3c>)
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	2310      	movs	r3, #16
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <_Z9laji_stopv+0x40>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	480a      	ldr	r0, [pc, #40]	; (8001618 <_Z9laji_stopv+0x44>)
 80015ee:	f7ff fe7f 	bl	80012f0 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
 lifting.move(0,0, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 80015f2:	2304      	movs	r3, #4
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <_Z9laji_stopv+0x48>)
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	2308      	movs	r3, #8
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <_Z9laji_stopv+0x48>)
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	4806      	ldr	r0, [pc, #24]	; (8001620 <_Z9laji_stopv+0x4c>)
 8001606:	f7ff fe73 	bl	80012f0 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020400 	.word	0x40020400
 8001614:	40020000 	.word	0x40020000
 8001618:	20000110 	.word	0x20000110
 800161c:	40020800 	.word	0x40020800
 8001620:	20000114 	.word	0x20000114

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001628:	f005 fdac 	bl	8007184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162c:	f000 f81a 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001630:	f000 fbb0 	bl	8001d94 <MX_GPIO_Init>
  MX_DMA_Init();
 8001634:	f000 fb86 	bl	8001d44 <MX_DMA_Init>
  MX_TIM1_Init();
 8001638:	f000 f882 	bl	8001740 <MX_TIM1_Init>
  MX_TIM2_Init();
 800163c:	f000 f8d8 	bl	80017f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001640:	f000 f92a 	bl	8001898 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001644:	f000 fa30 	bl	8001aa8 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001648:	f000 fad6 	bl	8001bf8 <MX_TIM12_Init>
  MX_TIM4_Init();
 800164c:	f000 f978 	bl	8001940 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001650:	f000 f9dc 	bl	8001a0c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001654:	f000 fb22 	bl	8001c9c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001658:	f000 fb4a 	bl	8001cf0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 800165c:	f000 fc52 	bl	8001f04 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001660:	e7fe      	b.n	8001660 <main+0x3c>
	...

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	; 0x50
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	2234      	movs	r2, #52	; 0x34
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f00a fa46 	bl	800bb04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <SystemClock_Config+0xd4>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a29      	ldr	r2, [pc, #164]	; (8001738 <SystemClock_Config+0xd4>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <SystemClock_Config+0xd4>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016a4:	2300      	movs	r3, #0
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <SystemClock_Config+0xd8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016b0:	4a22      	ldr	r2, [pc, #136]	; (800173c <SystemClock_Config+0xd8>)
 80016b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b20      	ldr	r3, [pc, #128]	; (800173c <SystemClock_Config+0xd8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ce:	2302      	movs	r3, #2
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016d8:	2304      	movs	r3, #4
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80016dc:	2340      	movs	r3, #64	; 0x40
 80016de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016e4:	2302      	movs	r3, #2
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4618      	mov	r0, r3
 80016f2:	f007 f99f 	bl	8008a34 <HAL_RCC_OscConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016fc:	f000 fbfc 	bl	8001ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001700:	230f      	movs	r3, #15
 8001702:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001704:	2302      	movs	r3, #2
 8001706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800170c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001710:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	2102      	movs	r1, #2
 800171e:	4618      	mov	r0, r3
 8001720:	f006 fe3e 	bl	80083a0 <HAL_RCC_ClockConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800172a:	f000 fbe5 	bl	8001ef8 <Error_Handler>
  }
}
 800172e:	bf00      	nop
 8001730:	3750      	adds	r7, #80	; 0x50
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000

08001740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	2224      	movs	r2, #36	; 0x24
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f00a f9d8 	bl	800bb04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800175c:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <MX_TIM1_Init+0xa8>)
 800175e:	4a23      	ldr	r2, [pc, #140]	; (80017ec <MX_TIM1_Init+0xac>)
 8001760:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <MX_TIM1_Init+0xa8>)
 8001764:	2200      	movs	r2, #0
 8001766:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MX_TIM1_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MX_TIM1_Init+0xa8>)
 8001770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001774:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_TIM1_Init+0xa8>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_TIM1_Init+0xa8>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_TIM1_Init+0xa8>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001788:	2301      	movs	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001790:	2301      	movs	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017a0:	2301      	movs	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	4619      	mov	r1, r3
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_TIM1_Init+0xa8>)
 80017b4:	f007 fe0c 	bl	80093d0 <HAL_TIM_Encoder_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80017be:	f000 fb9b 	bl	8001ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <MX_TIM1_Init+0xa8>)
 80017d0:	f008 fd58 	bl	800a284 <HAL_TIMEx_MasterConfigSynchronization>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80017da:	f000 fb8d 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	3730      	adds	r7, #48	; 0x30
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000124 	.word	0x20000124
 80017ec:	40010000 	.word	0x40010000

080017f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	2224      	movs	r2, #36	; 0x24
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f00a f980 	bl	800bb04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_TIM2_Init+0xa4>)
 800180e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001812:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_TIM2_Init+0xa4>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_TIM2_Init+0xa4>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_TIM2_Init+0xa4>)
 8001822:	f04f 32ff 	mov.w	r2, #4294967295
 8001826:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_TIM2_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_TIM2_Init+0xa4>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001834:	2301      	movs	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800183c:	2301      	movs	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800184c:	2301      	movs	r3, #1
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4619      	mov	r1, r3
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_TIM2_Init+0xa4>)
 8001860:	f007 fdb6 	bl	80093d0 <HAL_TIM_Encoder_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800186a:	f000 fb45 	bl	8001ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4619      	mov	r1, r3
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_TIM2_Init+0xa4>)
 800187c:	f008 fd02 	bl	800a284 <HAL_TIMEx_MasterConfigSynchronization>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001886:	f000 fb37 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	3730      	adds	r7, #48	; 0x30
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2000016c 	.word	0x2000016c

08001898 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	; 0x30
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	2224      	movs	r2, #36	; 0x24
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f00a f92c 	bl	800bb04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018b4:	4b20      	ldr	r3, [pc, #128]	; (8001938 <MX_TIM3_Init+0xa0>)
 80018b6:	4a21      	ldr	r2, [pc, #132]	; (800193c <MX_TIM3_Init+0xa4>)
 80018b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <MX_TIM3_Init+0xa0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <MX_TIM3_Init+0xa0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <MX_TIM3_Init+0xa0>)
 80018c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <MX_TIM3_Init+0xa0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <MX_TIM3_Init+0xa0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018da:	2301      	movs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018e2:	2301      	movs	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018f2:	2301      	movs	r3, #1
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4619      	mov	r1, r3
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <MX_TIM3_Init+0xa0>)
 8001906:	f007 fd63 	bl	80093d0 <HAL_TIM_Encoder_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001910:	f000 faf2 	bl	8001ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_TIM3_Init+0xa0>)
 8001922:	f008 fcaf 	bl	800a284 <HAL_TIMEx_MasterConfigSynchronization>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800192c:	f000 fae4 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3730      	adds	r7, #48	; 0x30
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200001b4 	.word	0x200001b4
 800193c:	40000400 	.word	0x40000400

08001940 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001946:	f107 0320 	add.w	r3, r7, #32
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <MX_TIM4_Init+0xc4>)
 8001964:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <MX_TIM4_Init+0xc8>)
 8001966:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8001968:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <MX_TIM4_Init+0xc4>)
 800196a:	223f      	movs	r2, #63	; 0x3f
 800196c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196e:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <MX_TIM4_Init+0xc4>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <MX_TIM4_Init+0xc4>)
 8001976:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800197a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <MX_TIM4_Init+0xc4>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <MX_TIM4_Init+0xc4>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001988:	481e      	ldr	r0, [pc, #120]	; (8001a04 <MX_TIM4_Init+0xc4>)
 800198a:	f007 fc0a 	bl	80091a2 <HAL_TIM_PWM_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001994:	f000 fab0 	bl	8001ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019a0:	f107 0320 	add.w	r3, r7, #32
 80019a4:	4619      	mov	r1, r3
 80019a6:	4817      	ldr	r0, [pc, #92]	; (8001a04 <MX_TIM4_Init+0xc4>)
 80019a8:	f008 fc6c 	bl	800a284 <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80019b2:	f000 faa1 	bl	8001ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b6:	2360      	movs	r3, #96	; 0x60
 80019b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 600;
 80019ba:	f44f 7316 	mov.w	r3, #600	; 0x258
 80019be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_TIM4_Init+0xc4>)
 80019d0:	f007 ff96 	bl	8009900 <HAL_TIM_PWM_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80019da:	f000 fa8d 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2204      	movs	r2, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM4_Init+0xc4>)
 80019e6:	f007 ff8b 	bl	8009900 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80019f0:	f000 fa82 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM4_Init+0xc4>)
 80019f6:	f005 f8d5 	bl	8006ba4 <HAL_TIM_MspPostInit>

}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	; 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200001fc 	.word	0x200001fc
 8001a08:	40000800 	.word	0x40000800

08001a0c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <MX_TIM5_Init+0x94>)
 8001a2a:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <MX_TIM5_Init+0x98>)
 8001a2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <MX_TIM5_Init+0x94>)
 8001a30:	223f      	movs	r2, #63	; 0x3f
 8001a32:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <MX_TIM5_Init+0x94>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <MX_TIM5_Init+0x94>)
 8001a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_TIM5_Init+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_TIM5_Init+0x94>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a4e:	4814      	ldr	r0, [pc, #80]	; (8001aa0 <MX_TIM5_Init+0x94>)
 8001a50:	f007 fa8e 	bl	8008f70 <HAL_TIM_Base_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001a5a:	f000 fa4d 	bl	8001ef8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <MX_TIM5_Init+0x94>)
 8001a6c:	f008 f80a 	bl	8009a84 <HAL_TIM_ConfigClockSource>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001a76:	f000 fa3f 	bl	8001ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a82:	463b      	mov	r3, r7
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <MX_TIM5_Init+0x94>)
 8001a88:	f008 fbfc 	bl	800a284 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001a92:	f000 fa31 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000244 	.word	0x20000244
 8001aa4:	40000c00 	.word	0x40000c00

08001aa8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b092      	sub	sp, #72	; 0x48
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	615a      	str	r2, [r3, #20]
 8001aca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2220      	movs	r2, #32
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f00a f816 	bl	800bb04 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ad8:	4b45      	ldr	r3, [pc, #276]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001ada:	4a46      	ldr	r2, [pc, #280]	; (8001bf4 <MX_TIM8_Init+0x14c>)
 8001adc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8001ade:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001ae0:	223f      	movs	r2, #63	; 0x3f
 8001ae2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae4:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001aec:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001af0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af2:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001af8:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afe:	4b3c      	ldr	r3, [pc, #240]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b04:	483a      	ldr	r0, [pc, #232]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001b06:	f007 fb4c 	bl	80091a2 <HAL_TIM_PWM_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001b10:	f000 f9f2 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001b14:	4836      	ldr	r0, [pc, #216]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001b16:	f007 faeb 	bl	80090f0 <HAL_TIM_OC_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001b20:	f000 f9ea 	bl	8001ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b30:	4619      	mov	r1, r3
 8001b32:	482f      	ldr	r0, [pc, #188]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001b34:	f008 fba6 	bl	800a284 <HAL_TIMEx_MasterConfigSynchronization>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001b3e:	f000 f9db 	bl	8001ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b42:	2360      	movs	r3, #96	; 0x60
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 600;
 8001b46:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b50:	2300      	movs	r3, #0
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b64:	2200      	movs	r2, #0
 8001b66:	4619      	mov	r1, r3
 8001b68:	4821      	ldr	r0, [pc, #132]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001b6a:	f007 fec9 	bl	8009900 <HAL_TIM_PWM_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8001b74:	f000 f9c0 	bl	8001ef8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b80:	2208      	movs	r2, #8
 8001b82:	4619      	mov	r1, r3
 8001b84:	481a      	ldr	r0, [pc, #104]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001b86:	f007 febb 	bl	8009900 <HAL_TIM_PWM_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8001b90:	f000 f9b2 	bl	8001ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	220c      	movs	r2, #12
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4813      	ldr	r0, [pc, #76]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001ba2:	f007 fe51 	bl	8009848 <HAL_TIM_OC_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001bac:	f000 f9a4 	bl	8001ef8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4807      	ldr	r0, [pc, #28]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001bd4:	f008 fbd2 	bl	800a37c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM8_Init+0x13a>
  {
    Error_Handler();
 8001bde:	f000 f98b 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001be2:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <MX_TIM8_Init+0x148>)
 8001be4:	f004 ffde 	bl	8006ba4 <HAL_TIM_MspPostInit>

}
 8001be8:	bf00      	nop
 8001bea:	3748      	adds	r7, #72	; 0x48
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	2000028c 	.word	0x2000028c
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
 8001c0c:	615a      	str	r2, [r3, #20]
 8001c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001c10:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <MX_TIM12_Init+0x9c>)
 8001c12:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <MX_TIM12_Init+0xa0>)
 8001c14:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 63;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_TIM12_Init+0x9c>)
 8001c18:	223f      	movs	r2, #63	; 0x3f
 8001c1a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_TIM12_Init+0x9c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19999;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_TIM12_Init+0x9c>)
 8001c24:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c28:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_TIM12_Init+0x9c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_TIM12_Init+0x9c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001c36:	4817      	ldr	r0, [pc, #92]	; (8001c94 <MX_TIM12_Init+0x9c>)
 8001c38:	f007 fab3 	bl	80091a2 <HAL_TIM_PWM_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001c42:	f000 f959 	bl	8001ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c46:	2360      	movs	r3, #96	; 0x60
 8001c48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8001c4a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480d      	ldr	r0, [pc, #52]	; (8001c94 <MX_TIM12_Init+0x9c>)
 8001c60:	f007 fe4e 	bl	8009900 <HAL_TIM_PWM_ConfigChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8001c6a:	f000 f945 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2204      	movs	r2, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <MX_TIM12_Init+0x9c>)
 8001c76:	f007 fe43 	bl	8009900 <HAL_TIM_PWM_ConfigChannel>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001c80:	f000 f93a 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001c84:	4803      	ldr	r0, [pc, #12]	; (8001c94 <MX_TIM12_Init+0x9c>)
 8001c86:	f004 ff8d 	bl	8006ba4 <HAL_TIM_MspPostInit>

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200002d4 	.word	0x200002d4
 8001c98:	40001800 	.word	0x40001800

08001c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <MX_USART2_UART_Init+0x50>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001ca8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cd4:	f008 fbb8 	bl	800a448 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cde:	f000 f90b 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000031c 	.word	0x2000031c
 8001cec:	40004400 	.word	0x40004400

08001cf0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cf4:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_USART3_UART_Init+0x48>)
 8001cf6:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <MX_USART3_UART_Init+0x4c>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_USART3_UART_Init+0x48>)
 8001cfc:	4a10      	ldr	r2, [pc, #64]	; (8001d40 <MX_USART3_UART_Init+0x50>)
 8001cfe:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <MX_USART3_UART_Init+0x48>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_USART3_UART_Init+0x48>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <MX_USART3_UART_Init+0x48>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_USART3_UART_Init+0x48>)
 8001d14:	220c      	movs	r2, #12
 8001d16:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <MX_USART3_UART_Init+0x48>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_USART3_UART_Init+0x48>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <MX_USART3_UART_Init+0x48>)
 8001d26:	f008 fb8f 	bl	800a448 <HAL_UART_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001d30:	f000 f8e2 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000360 	.word	0x20000360
 8001d3c:	40004800 	.word	0x40004800
 8001d40:	0007a120 	.word	0x0007a120

08001d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_DMA_Init+0x4c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <MX_DMA_Init+0x4c>)
 8001d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <MX_DMA_Init+0x4c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2010      	movs	r0, #16
 8001d6c:	f005 fbb5 	bl	80074da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d70:	2010      	movs	r0, #16
 8001d72:	f005 fbce 	bl	8007512 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2011      	movs	r0, #17
 8001d7c:	f005 fbad 	bl	80074da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001d80:	2011      	movs	r0, #17
 8001d82:	f005 fbc6 	bl	8007512 <HAL_NVIC_EnableIRQ>

}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800

08001d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b4e      	ldr	r3, [pc, #312]	; (8001ee8 <MX_GPIO_Init+0x154>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a4d      	ldr	r2, [pc, #308]	; (8001ee8 <MX_GPIO_Init+0x154>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <MX_GPIO_Init+0x154>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <MX_GPIO_Init+0x154>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a46      	ldr	r2, [pc, #280]	; (8001ee8 <MX_GPIO_Init+0x154>)
 8001dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <MX_GPIO_Init+0x154>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <MX_GPIO_Init+0x154>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a3f      	ldr	r2, [pc, #252]	; (8001ee8 <MX_GPIO_Init+0x154>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <MX_GPIO_Init+0x154>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <MX_GPIO_Init+0x154>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a38      	ldr	r2, [pc, #224]	; (8001ee8 <MX_GPIO_Init+0x154>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <MX_GPIO_Init+0x154>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f640 018f 	movw	r1, #2191	; 0x88f
 8001e20:	4832      	ldr	r0, [pc, #200]	; (8001eec <MX_GPIO_Init+0x158>)
 8001e22:	f006 faa3 	bl	800836c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2110      	movs	r1, #16
 8001e2a:	4831      	ldr	r0, [pc, #196]	; (8001ef0 <MX_GPIO_Init+0x15c>)
 8001e2c:	f006 fa9e 	bl	800836c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001e30:	2200      	movs	r2, #0
 8001e32:	f240 3101 	movw	r1, #769	; 0x301
 8001e36:	482f      	ldr	r0, [pc, #188]	; (8001ef4 <MX_GPIO_Init+0x160>)
 8001e38:	f006 fa98 	bl	800836c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_12;
 8001e3c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4826      	ldr	r0, [pc, #152]	; (8001eec <MX_GPIO_Init+0x158>)
 8001e52:	f005 ffeb 	bl	8007e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC7 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e56:	f640 038f 	movw	r3, #2191	; 0x88f
 8001e5a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	481f      	ldr	r0, [pc, #124]	; (8001eec <MX_GPIO_Init+0x158>)
 8001e70:	f005 ffdc 	bl	8007e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e74:	2310      	movs	r3, #16
 8001e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4819      	ldr	r0, [pc, #100]	; (8001ef0 <MX_GPIO_Init+0x15c>)
 8001e8c:	f005 ffce 	bl	8007e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8001e90:	f240 3301 	movw	r3, #769	; 0x301
 8001e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4812      	ldr	r0, [pc, #72]	; (8001ef4 <MX_GPIO_Init+0x160>)
 8001eaa:	f005 ffbf 	bl	8007e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <MX_GPIO_Init+0x15c>)
 8001ec4:	f005 ffb2 	bl	8007e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ec8:	2330      	movs	r3, #48	; 0x30
 8001eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <MX_GPIO_Init+0x160>)
 8001edc:	f005 ffa6 	bl	8007e2c <HAL_GPIO_Init>

}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40020400 	.word	0x40020400

08001ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001efc:	b672      	cpsid	i
}
 8001efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <Error_Handler+0x8>
	...

08001f04 <main_function>:
int r = 0;
int script_badminton_ENA = 0;
int dised = 0;
int g = 0;

void main_function(){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	ros_setup();
 8001f08:	f002 f9a6 	bl	8004258 <_Z9ros_setupv>
	stm_setup();
 8001f0c:	f000 f850 	bl	8001fb0 <stm_setup>
//	UART_Send_SetMotorPosition(1, 1400, 200);
	UART_Send_SetMotorPosition(3, 1500, 200);
 8001f10:	22c8      	movs	r2, #200	; 0xc8
 8001f12:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001f16:	2003      	movs	r0, #3
 8001f18:	f003 faec 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>
	__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,600+10*80);
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <main_function+0x90>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001f24:	635a      	str	r2, [r3, #52]	; 0x34
	while(1){
		//software	reset
		if(r==1){
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <main_function+0x94>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d104      	bne.n	8001f38 <main_function+0x34>
		  HAL_NVIC_SystemReset();
 8001f2e:	f005 fb0c 	bl	800754a <HAL_NVIC_SystemReset>
		  r = 0;
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <main_function+0x94>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
//		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,600+10*angle);
//		UART_Send_SetMotorPosition(1, 1500, 300); //800 - 2200
//		HAL_Delay(500);
//		UART_Send_SetMotorPosition(3, 2000, 200);
//		HAL_Delay(500);
		g++;
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <main_function+0x98>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <main_function+0x98>)
 8001f40:	6013      	str	r3, [r2, #0]
		//VL53 distance detect
		debounce_dis++;
 8001f42:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <main_function+0x9c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <main_function+0x9c>)
 8001f4a:	6013      	str	r3, [r2, #0]
		if(dis != dised)	debounce_dis = 0;
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <main_function+0xa0>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <main_function+0xa4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d002      	beq.n	8001f5e <main_function+0x5a>
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <main_function+0x9c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
		if(dis == 1 && debounce_dis > 5){
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <main_function+0xa0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d106      	bne.n	8001f74 <main_function+0x70>
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <main_function+0x9c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	dd02      	ble.n	8001f74 <main_function+0x70>
			script_badminton_ENA = 1;
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <main_function+0xa8>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
		}
		if(script_badminton_ENA ){
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <main_function+0xa8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <main_function+0x82>
			script_badminton();
 8001f7c:	f7ff f84a 	bl	8001014 <_Z16script_badmintonv>
			script_badminton_ENA = 0;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <main_function+0xa8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
		}
		dised = dis;
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <main_function+0xa0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <main_function+0xa4>)
 8001f8c:	6013      	str	r3, [r2, #0]

		//ros
		ros_loop();
 8001f8e:	f002 f9a3 	bl	80042d8 <_Z8ros_loopv>
		if(r==1){
 8001f92:	e7c8      	b.n	8001f26 <main_function+0x22>
 8001f94:	2000028c 	.word	0x2000028c
 8001f98:	20000468 	.word	0x20000468
 8001f9c:	20000474 	.word	0x20000474
 8001fa0:	20000464 	.word	0x20000464
 8001fa4:	200004c0 	.word	0x200004c0
 8001fa8:	20000470 	.word	0x20000470
 8001fac:	2000046c 	.word	0x2000046c

08001fb0 <stm_setup>:
	}
}

void stm_setup(void){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	  //PWM
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);	//PB6 -> attach servo
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	481c      	ldr	r0, [pc, #112]	; (8002028 <stm_setup+0x78>)
 8001fb8:	f007 f942 	bl	8009240 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);	//PB7 -> ball_seat servo
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	481a      	ldr	r0, [pc, #104]	; (8002028 <stm_setup+0x78>)
 8001fc0:	f007 f93e 	bl	8009240 <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);	//PC6 -> rail servo
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4819      	ldr	r0, [pc, #100]	; (800202c <stm_setup+0x7c>)
 8001fc8:	f007 f93a 	bl	8009240 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);	//PC8 -> badminton
 8001fcc:	2108      	movs	r1, #8
 8001fce:	4817      	ldr	r0, [pc, #92]	; (800202c <stm_setup+0x7c>)
 8001fd0:	f007 f936 	bl	8009240 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);	//PC9 -> badminton
 8001fd4:	210c      	movs	r1, #12
 8001fd6:	4815      	ldr	r0, [pc, #84]	; (800202c <stm_setup+0x7c>)
 8001fd8:	f007 f932 	bl	8009240 <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);	//PB14 -> horizontal_angle speed
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4814      	ldr	r0, [pc, #80]	; (8002030 <stm_setup+0x80>)
 8001fe0:	f007 f92e 	bl	8009240 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);	//PB15 -> elevation_angle speed
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	4812      	ldr	r0, [pc, #72]	; (8002030 <stm_setup+0x80>)
 8001fe8:	f007 f92a 	bl	8009240 <HAL_TIM_PWM_Start>

	  //Encoder
	  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_1);	//Shooter Encoder tl1
 8001fec:	2100      	movs	r1, #0
 8001fee:	4811      	ldr	r0, [pc, #68]	; (8002034 <stm_setup+0x84>)
 8001ff0:	f007 fa94 	bl	800951c <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_2);	//Shooter Encoder tl2
 8001ff4:	2104      	movs	r1, #4
 8001ff6:	480f      	ldr	r0, [pc, #60]	; (8002034 <stm_setup+0x84>)
 8001ff8:	f007 fa90 	bl	800951c <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);	//horizontal_angle Encoder tl1
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	480e      	ldr	r0, [pc, #56]	; (8002038 <stm_setup+0x88>)
 8002000:	f007 fa8c 	bl	800951c <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_2);	//horizontal_angle Encoder tl2
 8002004:	2104      	movs	r1, #4
 8002006:	480c      	ldr	r0, [pc, #48]	; (8002038 <stm_setup+0x88>)
 8002008:	f007 fa88 	bl	800951c <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);	//elevation_angle Encoder tl1
 800200c:	2100      	movs	r1, #0
 800200e:	480b      	ldr	r0, [pc, #44]	; (800203c <stm_setup+0x8c>)
 8002010:	f007 fa84 	bl	800951c <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);	//elevation_angle Encoder tl2
 8002014:	2104      	movs	r1, #4
 8002016:	4809      	ldr	r0, [pc, #36]	; (800203c <stm_setup+0x8c>)
 8002018:	f007 fa80 	bl	800951c <HAL_TIM_Encoder_Start>
	  //Timer Interupt
	  HAL_TIM_Base_Start_IT(&htim5); //PSC 63 , ARR 999 -> 1kHz
 800201c:	4808      	ldr	r0, [pc, #32]	; (8002040 <stm_setup+0x90>)
 800201e:	f006 fff7 	bl	8009010 <HAL_TIM_Base_Start_IT>
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200001fc 	.word	0x200001fc
 800202c:	2000028c 	.word	0x2000028c
 8002030:	200002d4 	.word	0x200002d4
 8002034:	20000124 	.word	0x20000124
 8002038:	2000016c 	.word	0x2000016c
 800203c:	200001b4 	.word	0x200001b4
 8002040:	20000244 	.word	0x20000244

08002044 <_Z15reset_conditionv>:
int gone,aa,bb,cc,dd;
int B1,B2,B3,B4,B5;
int debounce[5] = {0,0,0,0,0};
int status = 0;

int reset_condition(){
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	debounce[0]++;
 8002048:	4b8d      	ldr	r3, [pc, #564]	; (8002280 <_Z15reset_conditionv+0x23c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	4a8c      	ldr	r2, [pc, #560]	; (8002280 <_Z15reset_conditionv+0x23c>)
 8002050:	6013      	str	r3, [r2, #0]
	debounce[1]++;
 8002052:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <_Z15reset_conditionv+0x23c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	3301      	adds	r3, #1
 8002058:	4a89      	ldr	r2, [pc, #548]	; (8002280 <_Z15reset_conditionv+0x23c>)
 800205a:	6053      	str	r3, [r2, #4]
	debounce[2]++;
 800205c:	4b88      	ldr	r3, [pc, #544]	; (8002280 <_Z15reset_conditionv+0x23c>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	3301      	adds	r3, #1
 8002062:	4a87      	ldr	r2, [pc, #540]	; (8002280 <_Z15reset_conditionv+0x23c>)
 8002064:	6093      	str	r3, [r2, #8]
	debounce[3]++;
 8002066:	4b86      	ldr	r3, [pc, #536]	; (8002280 <_Z15reset_conditionv+0x23c>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	3301      	adds	r3, #1
 800206c:	4a84      	ldr	r2, [pc, #528]	; (8002280 <_Z15reset_conditionv+0x23c>)
 800206e:	60d3      	str	r3, [r2, #12]
	debounce[4]++;
 8002070:	4b83      	ldr	r3, [pc, #524]	; (8002280 <_Z15reset_conditionv+0x23c>)
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	3301      	adds	r3, #1
 8002076:	4a82      	ldr	r2, [pc, #520]	; (8002280 <_Z15reset_conditionv+0x23c>)
 8002078:	6113      	str	r3, [r2, #16]
	go = HAL_GPIO_ReadPin(MAIN_RESET_PORT, MAIN_RESET_PIN);
 800207a:	2120      	movs	r1, #32
 800207c:	4881      	ldr	r0, [pc, #516]	; (8002284 <_Z15reset_conditionv+0x240>)
 800207e:	f006 f95d 	bl	800833c <HAL_GPIO_ReadPin>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	4b80      	ldr	r3, [pc, #512]	; (8002288 <_Z15reset_conditionv+0x244>)
 8002088:	601a      	str	r2, [r3, #0]
	if(go != gone)	debounce[0] = 0;
 800208a:	4b7f      	ldr	r3, [pc, #508]	; (8002288 <_Z15reset_conditionv+0x244>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b7f      	ldr	r3, [pc, #508]	; (800228c <_Z15reset_conditionv+0x248>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d002      	beq.n	800209c <_Z15reset_conditionv+0x58>
 8002096:	4b7a      	ldr	r3, [pc, #488]	; (8002280 <_Z15reset_conditionv+0x23c>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
	gone = go;
 800209c:	4b7a      	ldr	r3, [pc, #488]	; (8002288 <_Z15reset_conditionv+0x244>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a7a      	ldr	r2, [pc, #488]	; (800228c <_Z15reset_conditionv+0x248>)
 80020a2:	6013      	str	r3, [r2, #0]
	if(go && debounce[0] > 50){
 80020a4:	4b78      	ldr	r3, [pc, #480]	; (8002288 <_Z15reset_conditionv+0x244>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 815e 	beq.w	800236a <_Z15reset_conditionv+0x326>
 80020ae:	4b74      	ldr	r3, [pc, #464]	; (8002280 <_Z15reset_conditionv+0x23c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b32      	cmp	r3, #50	; 0x32
 80020b4:	f340 8159 	ble.w	800236a <_Z15reset_conditionv+0x326>
		a = HAL_GPIO_ReadPin(STAGE1_PORT, STAGE1_PIN);
 80020b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020bc:	4874      	ldr	r0, [pc, #464]	; (8002290 <_Z15reset_conditionv+0x24c>)
 80020be:	f006 f93d 	bl	800833c <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b73      	ldr	r3, [pc, #460]	; (8002294 <_Z15reset_conditionv+0x250>)
 80020c8:	601a      	str	r2, [r3, #0]
		b = HAL_GPIO_ReadPin(BOARD_PORT, BOARD_PIN);
 80020ca:	2104      	movs	r1, #4
 80020cc:	4872      	ldr	r0, [pc, #456]	; (8002298 <_Z15reset_conditionv+0x254>)
 80020ce:	f006 f935 	bl	800833c <HAL_GPIO_ReadPin>
 80020d2:	4603      	mov	r3, r0
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b71      	ldr	r3, [pc, #452]	; (800229c <_Z15reset_conditionv+0x258>)
 80020d8:	601a      	str	r2, [r3, #0]
		c = HAL_GPIO_ReadPin(BASEBALL_PORT, BASEBALL_PIN);
 80020da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020de:	486e      	ldr	r0, [pc, #440]	; (8002298 <_Z15reset_conditionv+0x254>)
 80020e0:	f006 f92c 	bl	800833c <HAL_GPIO_ReadPin>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b6d      	ldr	r3, [pc, #436]	; (80022a0 <_Z15reset_conditionv+0x25c>)
 80020ea:	601a      	str	r2, [r3, #0]
		d = HAL_GPIO_ReadPin(BADMINTON_PORT, BADMINTON_PIN);
 80020ec:	2110      	movs	r1, #16
 80020ee:	4865      	ldr	r0, [pc, #404]	; (8002284 <_Z15reset_conditionv+0x240>)
 80020f0:	f006 f924 	bl	800833c <HAL_GPIO_ReadPin>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <_Z15reset_conditionv+0x260>)
 80020fa:	601a      	str	r2, [r3, #0]

		if(a != aa)	debounce[1] = 0;
 80020fc:	4b65      	ldr	r3, [pc, #404]	; (8002294 <_Z15reset_conditionv+0x250>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <_Z15reset_conditionv+0x264>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d002      	beq.n	800210e <_Z15reset_conditionv+0xca>
 8002108:	4b5d      	ldr	r3, [pc, #372]	; (8002280 <_Z15reset_conditionv+0x23c>)
 800210a:	2200      	movs	r2, #0
 800210c:	605a      	str	r2, [r3, #4]
		if(b != bb)	debounce[2] = 0;
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <_Z15reset_conditionv+0x258>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b66      	ldr	r3, [pc, #408]	; (80022ac <_Z15reset_conditionv+0x268>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d002      	beq.n	8002120 <_Z15reset_conditionv+0xdc>
 800211a:	4b59      	ldr	r3, [pc, #356]	; (8002280 <_Z15reset_conditionv+0x23c>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
		if(c != cc)	debounce[3] = 0;
 8002120:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <_Z15reset_conditionv+0x25c>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b62      	ldr	r3, [pc, #392]	; (80022b0 <_Z15reset_conditionv+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d002      	beq.n	8002132 <_Z15reset_conditionv+0xee>
 800212c:	4b54      	ldr	r3, [pc, #336]	; (8002280 <_Z15reset_conditionv+0x23c>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
		if(d != dd) debounce[4] = 0;
 8002132:	4b5c      	ldr	r3, [pc, #368]	; (80022a4 <_Z15reset_conditionv+0x260>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b5f      	ldr	r3, [pc, #380]	; (80022b4 <_Z15reset_conditionv+0x270>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d002      	beq.n	8002144 <_Z15reset_conditionv+0x100>
 800213e:	4b50      	ldr	r3, [pc, #320]	; (8002280 <_Z15reset_conditionv+0x23c>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]

		if(debounce[1] > 50 && debounce[2] > 50 && debounce[3] > 50 && debounce[4] > 50){
 8002144:	4b4e      	ldr	r3, [pc, #312]	; (8002280 <_Z15reset_conditionv+0x23c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b32      	cmp	r3, #50	; 0x32
 800214a:	f340 80fd 	ble.w	8002348 <_Z15reset_conditionv+0x304>
 800214e:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <_Z15reset_conditionv+0x23c>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b32      	cmp	r3, #50	; 0x32
 8002154:	f340 80f8 	ble.w	8002348 <_Z15reset_conditionv+0x304>
 8002158:	4b49      	ldr	r3, [pc, #292]	; (8002280 <_Z15reset_conditionv+0x23c>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b32      	cmp	r3, #50	; 0x32
 800215e:	f340 80f3 	ble.w	8002348 <_Z15reset_conditionv+0x304>
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <_Z15reset_conditionv+0x23c>)
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b32      	cmp	r3, #50	; 0x32
 8002168:	f340 80ee 	ble.w	8002348 <_Z15reset_conditionv+0x304>
			if(!a & !b & !c & !d){
 800216c:	4b49      	ldr	r3, [pc, #292]	; (8002294 <_Z15reset_conditionv+0x250>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b4a      	ldr	r3, [pc, #296]	; (800229c <_Z15reset_conditionv+0x258>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	431a      	orrs	r2, r3
 8002176:	4b4a      	ldr	r3, [pc, #296]	; (80022a0 <_Z15reset_conditionv+0x25c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	431a      	orrs	r2, r3
 800217c:	4b49      	ldr	r3, [pc, #292]	; (80022a4 <_Z15reset_conditionv+0x260>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4313      	orrs	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	bf0c      	ite	eq
 8002186:	2301      	moveq	r3, #1
 8002188:	2300      	movne	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <_Z15reset_conditionv+0x154>
				status = 1;
 8002190:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <_Z15reset_conditionv+0x274>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e0d7      	b.n	8002348 <_Z15reset_conditionv+0x304>
			}
			else if(a & !b & !c & !d){
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <_Z15reset_conditionv+0x258>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <_Z15reset_conditionv+0x250>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4013      	ands	r3, r2
 80021ae:	4a3c      	ldr	r2, [pc, #240]	; (80022a0 <_Z15reset_conditionv+0x25c>)
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	bf0c      	ite	eq
 80021b6:	2201      	moveq	r2, #1
 80021b8:	2200      	movne	r2, #0
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	4013      	ands	r3, r2
 80021be:	4a39      	ldr	r2, [pc, #228]	; (80022a4 <_Z15reset_conditionv+0x260>)
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	2a00      	cmp	r2, #0
 80021c4:	bf0c      	ite	eq
 80021c6:	2201      	moveq	r2, #1
 80021c8:	2200      	movne	r2, #0
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <_Z15reset_conditionv+0x196>
				status = 2;
 80021d2:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <_Z15reset_conditionv+0x274>)
 80021d4:	2202      	movs	r2, #2
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e0b6      	b.n	8002348 <_Z15reset_conditionv+0x304>
			}
			else if(a & b & !c & !d){
 80021da:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <_Z15reset_conditionv+0x250>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <_Z15reset_conditionv+0x258>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4013      	ands	r3, r2
 80021e4:	4a2e      	ldr	r2, [pc, #184]	; (80022a0 <_Z15reset_conditionv+0x25c>)
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	bf0c      	ite	eq
 80021ec:	2201      	moveq	r2, #1
 80021ee:	2200      	movne	r2, #0
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	4013      	ands	r3, r2
 80021f4:	4a2b      	ldr	r2, [pc, #172]	; (80022a4 <_Z15reset_conditionv+0x260>)
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	2a00      	cmp	r2, #0
 80021fa:	bf0c      	ite	eq
 80021fc:	2201      	moveq	r2, #1
 80021fe:	2200      	movne	r2, #0
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <_Z15reset_conditionv+0x1cc>
				status = 3;
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <_Z15reset_conditionv+0x274>)
 800220a:	2203      	movs	r2, #3
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e09b      	b.n	8002348 <_Z15reset_conditionv+0x304>
			}
			else if(a & !b & c & !d){
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <_Z15reset_conditionv+0x258>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <_Z15reset_conditionv+0x250>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	401a      	ands	r2, r3
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <_Z15reset_conditionv+0x25c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4013      	ands	r3, r2
 800222c:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <_Z15reset_conditionv+0x260>)
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	2a00      	cmp	r2, #0
 8002232:	bf0c      	ite	eq
 8002234:	2201      	moveq	r2, #1
 8002236:	2200      	movne	r2, #0
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <_Z15reset_conditionv+0x204>
				status = 4;
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <_Z15reset_conditionv+0x274>)
 8002242:	2204      	movs	r2, #4
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e07f      	b.n	8002348 <_Z15reset_conditionv+0x304>
			}
			else if(a & !b & !c & d){
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <_Z15reset_conditionv+0x258>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <_Z15reset_conditionv+0x250>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4013      	ands	r3, r2
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <_Z15reset_conditionv+0x25c>)
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	2a00      	cmp	r2, #0
 8002264:	bf0c      	ite	eq
 8002266:	2201      	moveq	r2, #1
 8002268:	2200      	movne	r2, #0
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	401a      	ands	r2, r3
 800226e:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <_Z15reset_conditionv+0x260>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d021      	beq.n	80022bc <_Z15reset_conditionv+0x278>
				status = 5;
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <_Z15reset_conditionv+0x274>)
 800227a:	2205      	movs	r2, #5
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e063      	b.n	8002348 <_Z15reset_conditionv+0x304>
 8002280:	200004a0 	.word	0x200004a0
 8002284:	40020800 	.word	0x40020800
 8002288:	20000478 	.word	0x20000478
 800228c:	2000048c 	.word	0x2000048c
 8002290:	40020000 	.word	0x40020000
 8002294:	2000047c 	.word	0x2000047c
 8002298:	40020400 	.word	0x40020400
 800229c:	20000480 	.word	0x20000480
 80022a0:	20000484 	.word	0x20000484
 80022a4:	20000488 	.word	0x20000488
 80022a8:	20000490 	.word	0x20000490
 80022ac:	20000494 	.word	0x20000494
 80022b0:	20000498 	.word	0x20000498
 80022b4:	2000049c 	.word	0x2000049c
 80022b8:	200004b4 	.word	0x200004b4
			}
			else if(a & !b & c & d){
 80022bc:	4b32      	ldr	r3, [pc, #200]	; (8002388 <_Z15reset_conditionv+0x344>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b2f      	ldr	r3, [pc, #188]	; (800238c <_Z15reset_conditionv+0x348>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	401a      	ands	r2, r3
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <_Z15reset_conditionv+0x34c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	401a      	ands	r2, r3
 80022d8:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <_Z15reset_conditionv+0x350>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <_Z15reset_conditionv+0x2a6>
				status = 6;
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <_Z15reset_conditionv+0x354>)
 80022e4:	2206      	movs	r2, #6
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e02e      	b.n	8002348 <_Z15reset_conditionv+0x304>
			}
			else if(a & b & !c & d){
 80022ea:	4b28      	ldr	r3, [pc, #160]	; (800238c <_Z15reset_conditionv+0x348>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <_Z15reset_conditionv+0x344>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4013      	ands	r3, r2
 80022f4:	4a26      	ldr	r2, [pc, #152]	; (8002390 <_Z15reset_conditionv+0x34c>)
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	2a00      	cmp	r2, #0
 80022fa:	bf0c      	ite	eq
 80022fc:	2201      	moveq	r2, #1
 80022fe:	2200      	movne	r2, #0
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	401a      	ands	r2, r3
 8002304:	4b23      	ldr	r3, [pc, #140]	; (8002394 <_Z15reset_conditionv+0x350>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <_Z15reset_conditionv+0x2d2>
				status = 7;
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <_Z15reset_conditionv+0x354>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e018      	b.n	8002348 <_Z15reset_conditionv+0x304>
			}
			else if(a & b & c & !d){
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <_Z15reset_conditionv+0x348>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <_Z15reset_conditionv+0x344>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	401a      	ands	r2, r3
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <_Z15reset_conditionv+0x34c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4013      	ands	r3, r2
 8002326:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <_Z15reset_conditionv+0x350>)
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	2a00      	cmp	r2, #0
 800232c:	bf0c      	ite	eq
 800232e:	2201      	moveq	r2, #1
 8002330:	2200      	movne	r2, #0
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <_Z15reset_conditionv+0x2fe>
				status = 8;
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <_Z15reset_conditionv+0x354>)
 800233c:	2208      	movs	r2, #8
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e002      	b.n	8002348 <_Z15reset_conditionv+0x304>
			}
			else{
				status = 0;
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <_Z15reset_conditionv+0x354>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
			}
		}

		aa = a;
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <_Z15reset_conditionv+0x348>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a13      	ldr	r2, [pc, #76]	; (800239c <_Z15reset_conditionv+0x358>)
 800234e:	6013      	str	r3, [r2, #0]
		bb = b;
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <_Z15reset_conditionv+0x344>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <_Z15reset_conditionv+0x35c>)
 8002356:	6013      	str	r3, [r2, #0]
		cc = c;
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <_Z15reset_conditionv+0x34c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <_Z15reset_conditionv+0x360>)
 800235e:	6013      	str	r3, [r2, #0]
		dd = d;
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <_Z15reset_conditionv+0x350>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <_Z15reset_conditionv+0x364>)
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e00a      	b.n	8002380 <_Z15reset_conditionv+0x33c>

	}
	else if(!go && debounce[0] > 50){
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <_Z15reset_conditionv+0x368>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <_Z15reset_conditionv+0x33c>
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <_Z15reset_conditionv+0x36c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b32      	cmp	r3, #50	; 0x32
 8002378:	dd02      	ble.n	8002380 <_Z15reset_conditionv+0x33c>
		status = 0;
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <_Z15reset_conditionv+0x354>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
	}

	return status;
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <_Z15reset_conditionv+0x354>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000480 	.word	0x20000480
 800238c:	2000047c 	.word	0x2000047c
 8002390:	20000484 	.word	0x20000484
 8002394:	20000488 	.word	0x20000488
 8002398:	200004b4 	.word	0x200004b4
 800239c:	20000490 	.word	0x20000490
 80023a0:	20000494 	.word	0x20000494
 80023a4:	20000498 	.word	0x20000498
 80023a8:	2000049c 	.word	0x2000049c
 80023ac:	20000478 	.word	0x20000478
 80023b0:	200004a0 	.word	0x200004a0

080023b4 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <_ZN3ros3MsgC1Ev+0x1c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	0800c174 	.word	0x0800c174

080023f8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
      data()
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ffe8 	bl	80023d8 <_ZN3ros3MsgC1Ev>
 8002408:	4a06      	ldr	r2, [pc, #24]	; (8002424 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3304      	adds	r3, #4
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ffce 	bl	80023b4 <_ZN3ros4TimeC1Ev>
    {
    }
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	0800c15c 	.word	0x0800c15c

08002428 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	4413      	add	r3, r2
 8002440:	b2ca      	uxtb	r2, r1
 8002442:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	0a19      	lsrs	r1, r3, #8
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3301      	adds	r3, #1
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	4413      	add	r3, r2
 8002452:	b2ca      	uxtb	r2, r1
 8002454:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	0c19      	lsrs	r1, r3, #16
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3302      	adds	r3, #2
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	4413      	add	r3, r2
 8002464:	b2ca      	uxtb	r2, r1
 8002466:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	0e19      	lsrs	r1, r3, #24
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3303      	adds	r3, #3
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	4413      	add	r3, r2
 8002476:	b2ca      	uxtb	r2, r1
 8002478:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3304      	adds	r3, #4
 800247e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6899      	ldr	r1, [r3, #8]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	4413      	add	r3, r2
 800248a:	b2ca      	uxtb	r2, r1
 800248c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	0a19      	lsrs	r1, r3, #8
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3301      	adds	r3, #1
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	4413      	add	r3, r2
 800249c:	b2ca      	uxtb	r2, r1
 800249e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	0c19      	lsrs	r1, r3, #16
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3302      	adds	r3, #2
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	b2ca      	uxtb	r2, r1
 80024b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0e19      	lsrs	r1, r3, #24
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3303      	adds	r3, #3
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	b2ca      	uxtb	r2, r1
 80024c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3304      	adds	r3, #4
 80024c8:	60fb      	str	r3, [r7, #12]
      return offset;
 80024ca:	68fb      	ldr	r3, [r7, #12]
    }
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3301      	adds	r3, #1
 80024fc:	6839      	ldr	r1, [r7, #0]
 80024fe:	440b      	add	r3, r1
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3302      	adds	r3, #2
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	440b      	add	r3, r1
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3303      	adds	r3, #3
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	440b      	add	r3, r1
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	061b      	lsls	r3, r3, #24
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3304      	adds	r3, #4
 800253a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	4413      	add	r3, r2
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3301      	adds	r3, #1
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	440b      	add	r3, r1
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3302      	adds	r3, #2
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	440b      	add	r3, r1
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3303      	adds	r3, #3
 800257e:	6839      	ldr	r1, [r7, #0]
 8002580:	440b      	add	r3, r1
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3304      	adds	r3, #4
 8002590:	60fb      	str	r3, [r7, #12]
     return offset;
 8002592:	68fb      	ldr	r3, [r7, #12]
    }
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	0800be30 	.word	0x0800be30

080025bc <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	0800be40 	.word	0x0800be40

080025d8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fef8 	bl	80023d8 <_ZN3ros3MsgC1Ev>
 80025e8:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	809a      	strh	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a07      	ldr	r2, [pc, #28]	; (800261c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80025fe:	60da      	str	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a06      	ldr	r2, [pc, #24]	; (800261c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002604:	611a      	str	r2, [r3, #16]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	615a      	str	r2, [r3, #20]
    {
    }
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	0800c144 	.word	0x0800c144
 800261c:	0800be64 	.word	0x0800be64

08002620 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	8899      	ldrh	r1, [r3, #4]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	4413      	add	r3, r2
 8002638:	b2ca      	uxtb	r2, r1
 800263a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	889b      	ldrh	r3, [r3, #4]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	b299      	uxth	r1, r3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	3301      	adds	r3, #1
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	4413      	add	r3, r2
 800264c:	b2ca      	uxtb	r2, r1
 800264e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	3302      	adds	r3, #2
 8002654:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd fdd4 	bl	8000208 <strlen>
 8002660:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	4413      	add	r3, r2
 8002668:	69b9      	ldr	r1, [r7, #24]
 800266a:	4618      	mov	r0, r3
 800266c:	f001 ff20 	bl	80044b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3304      	adds	r3, #4
 8002674:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	18d0      	adds	r0, r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4619      	mov	r1, r3
 8002684:	f009 fa30 	bl	800bae8 <memcpy>
      offset += length_topic_name;
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4413      	add	r3, r2
 800268e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd fdb7 	bl	8000208 <strlen>
 800269a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	4413      	add	r3, r2
 80026a2:	6979      	ldr	r1, [r7, #20]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f001 ff03 	bl	80044b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	18d0      	adds	r0, r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4619      	mov	r1, r3
 80026be:	f009 fa13 	bl	800bae8 <memcpy>
      offset += length_message_type;
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	4413      	add	r3, r2
 80026c8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd fd9a 	bl	8000208 <strlen>
 80026d4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	6939      	ldr	r1, [r7, #16]
 80026de:	4618      	mov	r0, r3
 80026e0:	f001 fee6 	bl	80044b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3304      	adds	r3, #4
 80026e8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	18d0      	adds	r0, r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4619      	mov	r1, r3
 80026f8:	f009 f9f6 	bl	800bae8 <memcpy>
      offset += length_md5sum;
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800270a:	68f9      	ldr	r1, [r7, #12]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4413      	add	r3, r2
 8002712:	b2ca      	uxtb	r2, r1
 8002714:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	0a19      	lsrs	r1, r3, #8
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3301      	adds	r3, #1
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	4413      	add	r3, r2
 8002722:	b2ca      	uxtb	r2, r1
 8002724:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	0c19      	lsrs	r1, r3, #16
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3302      	adds	r3, #2
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	4413      	add	r3, r2
 8002732:	b2ca      	uxtb	r2, r1
 8002734:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	0e19      	lsrs	r1, r3, #24
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3303      	adds	r3, #3
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	4413      	add	r3, r2
 8002742:	b2ca      	uxtb	r2, r1
 8002744:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	61fb      	str	r3, [r7, #28]
      return offset;
 800274c:	69fb      	ldr	r3, [r7, #28]
    }
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002756:	b580      	push	{r7, lr}
 8002758:	b08a      	sub	sp, #40	; 0x28
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	4413      	add	r3, r2
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b29a      	uxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	889b      	ldrh	r3, [r3, #4]
 8002776:	b21a      	sxth	r2, r3
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	3301      	adds	r3, #1
 800277c:	6839      	ldr	r1, [r7, #0]
 800277e:	440b      	add	r3, r1
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	b21b      	sxth	r3, r3
 8002786:	4313      	orrs	r3, r2
 8002788:	b21b      	sxth	r3, r3
 800278a:	b29a      	uxth	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	3302      	adds	r3, #2
 8002794:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	441a      	add	r2, r3
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 fea2 	bl	80044ec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	3304      	adds	r3, #4
 80027ac:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	4413      	add	r3, r2
 80027b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d20c      	bcs.n	80027d8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	441a      	add	r2, r3
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	3b01      	subs	r3, #1
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	440b      	add	r3, r1
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	3301      	adds	r3, #1
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	e7ec      	b.n	80027b2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	4413      	add	r3, r2
 80027de:	3b01      	subs	r3, #1
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	441a      	add	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	4413      	add	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	441a      	add	r2, r3
 8002802:	f107 0310 	add.w	r3, r7, #16
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f001 fe6f 	bl	80044ec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	3304      	adds	r3, #4
 8002812:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	623b      	str	r3, [r7, #32]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	6a3a      	ldr	r2, [r7, #32]
 8002820:	429a      	cmp	r2, r3
 8002822:	d20c      	bcs.n	800283e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	441a      	add	r2, r3
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	3b01      	subs	r3, #1
 800282e:	6839      	ldr	r1, [r7, #0]
 8002830:	440b      	add	r3, r1
 8002832:	7812      	ldrb	r2, [r2, #0]
 8002834:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	3301      	adds	r3, #1
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	e7ec      	b.n	8002818 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	3b01      	subs	r3, #1
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	4413      	add	r3, r2
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	3b01      	subs	r3, #1
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	441a      	add	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	441a      	add	r2, r3
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f001 fe3c 	bl	80044ec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	3304      	adds	r3, #4
 8002878:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	429a      	cmp	r2, r3
 8002888:	d20c      	bcs.n	80028a4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	441a      	add	r2, r3
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3b01      	subs	r3, #1
 8002894:	6839      	ldr	r1, [r7, #0]
 8002896:	440b      	add	r3, r1
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	3301      	adds	r3, #1
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	e7ec      	b.n	800287e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4413      	add	r3, r2
 80028aa:	3b01      	subs	r3, #1
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	441a      	add	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4413      	add	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	440a      	add	r2, r1
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	3301      	adds	r3, #1
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	440b      	add	r3, r1
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	3302      	adds	r3, #2
 80028f2:	6839      	ldr	r1, [r7, #0]
 80028f4:	440b      	add	r3, r1
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	3303      	adds	r3, #3
 8002904:	6839      	ldr	r1, [r7, #0]
 8002906:	440b      	add	r3, r1
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	061b      	lsls	r3, r3, #24
 800290c:	4313      	orrs	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	3304      	adds	r3, #4
 800291a:	61bb      	str	r3, [r7, #24]
     return offset;
 800291c:	69bb      	ldr	r3, [r7, #24]
    }
 800291e:	4618      	mov	r0, r3
 8002920:	3728      	adds	r7, #40	; 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	0800be68 	.word	0x0800be68

08002944 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	0800be84 	.word	0x0800be84

08002960 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fd34 	bl	80023d8 <_ZN3ros3MsgC1Ev>
 8002970:	4a06      	ldr	r2, [pc, #24]	; (800298c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	711a      	strb	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a04      	ldr	r2, [pc, #16]	; (8002990 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002980:	609a      	str	r2, [r3, #8]
    {
    }
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	0800c12c 	.word	0x0800c12c
 8002990:	0800be64 	.word	0x0800be64

08002994 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	7912      	ldrb	r2, [r2, #4]
 80029ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3301      	adds	r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fc25 	bl	8000208 <strlen>
 80029be:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 fd71 	bl	80044b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	3304      	adds	r3, #4
 80029d2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	18d0      	adds	r0, r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	4619      	mov	r1, r3
 80029e2:	f009 f881 	bl	800bae8 <memcpy>
      offset += length_msg;
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4413      	add	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80029ee:	68fb      	ldr	r3, [r7, #12]
    }
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	3301      	adds	r3, #1
 8002a16:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	441a      	add	r2, r3
 8002a1e:	f107 030c 	add.w	r3, r7, #12
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 fd61 	bl	80044ec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4413      	add	r3, r2
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d20c      	bcs.n	8002a5a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	441a      	add	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	440b      	add	r3, r1
 8002a4e:	7812      	ldrb	r2, [r2, #0]
 8002a50:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3301      	adds	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e7ec      	b.n	8002a34 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b01      	subs	r3, #1
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	4413      	add	r3, r2
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	441a      	add	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
     return offset;
 8002a7e:	693b      	ldr	r3, [r7, #16]
    }
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	0800bea8 	.word	0x0800bea8

08002aa4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	0800bebc 	.word	0x0800bebc

08002ac0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fc84 	bl	80023d8 <_ZN3ros3MsgC1Ev>
 8002ad0:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	619a      	str	r2, [r3, #24]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	61da      	str	r2, [r3, #28]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	0800c114 	.word	0x0800c114

08002b08 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6859      	ldr	r1, [r3, #4]
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	b2ca      	uxtb	r2, r1
 8002b22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	0a19      	lsrs	r1, r3, #8
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	4413      	add	r3, r2
 8002b32:	b2ca      	uxtb	r2, r1
 8002b34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	0c19      	lsrs	r1, r3, #16
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	3302      	adds	r3, #2
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	b2ca      	uxtb	r2, r1
 8002b46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	0e19      	lsrs	r1, r3, #24
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	3303      	adds	r3, #3
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	4413      	add	r3, r2
 8002b56:	b2ca      	uxtb	r2, r1
 8002b58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002b60:	2300      	movs	r3, #0
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	6a3a      	ldr	r2, [r7, #32]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d22b      	bcs.n	8002bc6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002b7c:	6939      	ldr	r1, [r7, #16]
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	b2ca      	uxtb	r2, r1
 8002b86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	0a19      	lsrs	r1, r3, #8
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	3301      	adds	r3, #1
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	b2ca      	uxtb	r2, r1
 8002b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	0c19      	lsrs	r1, r3, #16
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b2ca      	uxtb	r2, r1
 8002ba6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	0e19      	lsrs	r1, r3, #24
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	3303      	adds	r3, #3
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b2ca      	uxtb	r2, r1
 8002bb6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	3304      	adds	r3, #4
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	e7ce      	b.n	8002b64 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6919      	ldr	r1, [r3, #16]
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	b2ca      	uxtb	r2, r1
 8002bd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	0a19      	lsrs	r1, r3, #8
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	3301      	adds	r3, #1
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	4413      	add	r3, r2
 8002be2:	b2ca      	uxtb	r2, r1
 8002be4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	0c19      	lsrs	r1, r3, #16
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	3302      	adds	r3, #2
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b2ca      	uxtb	r2, r1
 8002bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	0e19      	lsrs	r1, r3, #24
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	3303      	adds	r3, #3
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	b2ca      	uxtb	r2, r1
 8002c08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d22b      	bcs.n	8002c76 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002c2c:	68f9      	ldr	r1, [r7, #12]
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	b2ca      	uxtb	r2, r1
 8002c36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	0a19      	lsrs	r1, r3, #8
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	3301      	adds	r3, #1
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	b2ca      	uxtb	r2, r1
 8002c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	0c19      	lsrs	r1, r3, #16
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	3302      	adds	r3, #2
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	b2ca      	uxtb	r2, r1
 8002c56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	0e19      	lsrs	r1, r3, #24
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	3303      	adds	r3, #3
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	b2ca      	uxtb	r2, r1
 8002c66:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3301      	adds	r3, #1
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	e7ce      	b.n	8002c14 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69d9      	ldr	r1, [r3, #28]
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	b2ca      	uxtb	r2, r1
 8002c82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	0a19      	lsrs	r1, r3, #8
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	b2ca      	uxtb	r2, r1
 8002c94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	0c19      	lsrs	r1, r3, #16
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	b2ca      	uxtb	r2, r1
 8002ca6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	0e19      	lsrs	r1, r3, #24
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	3303      	adds	r3, #3
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	b2ca      	uxtb	r2, r1
 8002cb8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d228      	bcs.n	8002d20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fa94 	bl	8000208 <strlen>
 8002ce0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	6979      	ldr	r1, [r7, #20]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 fbe0 	bl	80044b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	18d0      	adds	r0, r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f008 feec 	bl	800bae8 <memcpy>
      offset += length_stringsi;
 8002d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	4413      	add	r3, r2
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	e7d1      	b.n	8002cc4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002d22:	4618      	mov	r0, r3
 8002d24:	3728      	adds	r7, #40	; 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b08e      	sub	sp, #56	; 0x38
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d44:	3301      	adds	r3, #1
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	4413      	add	r3, r2
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	6a3a      	ldr	r2, [r7, #32]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d56:	3302      	adds	r3, #2
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	041b      	lsls	r3, r3, #16
 8002d60:	6a3a      	ldr	r2, [r7, #32]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d68:	3303      	adds	r3, #3
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	6a3a      	ldr	r2, [r7, #32]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	6a3a      	ldr	r2, [r7, #32]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d90a      	bls.n	8002d9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4619      	mov	r1, r3
 8002d92:	4610      	mov	r0, r2
 8002d94:	f008 febe 	bl	800bb14 <realloc>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a3a      	ldr	r2, [r7, #32]
 8002da2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002da4:	2300      	movs	r3, #0
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d236      	bcs.n	8002e20 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dba:	6839      	ldr	r1, [r7, #0]
 8002dbc:	440a      	add	r2, r1
 8002dbe:	7812      	ldrb	r2, [r2, #0]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc8:	3301      	adds	r3, #1
 8002dca:	6839      	ldr	r1, [r7, #0]
 8002dcc:	440b      	add	r3, r1
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dda:	3302      	adds	r3, #2
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	440b      	add	r3, r1
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	041b      	lsls	r3, r3, #16
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	3303      	adds	r3, #3
 8002dee:	6839      	ldr	r1, [r7, #0]
 8002df0:	440b      	add	r3, r1
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	3304      	adds	r3, #4
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1e:	e7c3      	b.n	8002da8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	4413      	add	r3, r2
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3e:	3302      	adds	r3, #2
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	041b      	lsls	r3, r3, #16
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e50:	3303      	adds	r3, #3
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	4413      	add	r3, r2
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	061b      	lsls	r3, r3, #24
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e62:	3304      	adds	r3, #4
 8002e64:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d90a      	bls.n	8002e86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f008 fe4a 	bl	800bb14 <realloc>
 8002e80:	4602      	mov	r2, r0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d236      	bcs.n	8002f08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ea2:	6839      	ldr	r1, [r7, #0]
 8002ea4:	440a      	add	r2, r1
 8002ea6:	7812      	ldrb	r2, [r2, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	6839      	ldr	r1, [r7, #0]
 8002eb4:	440b      	add	r3, r1
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	440b      	add	r3, r1
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	041b      	lsls	r3, r3, #16
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed4:	3303      	adds	r3, #3
 8002ed6:	6839      	ldr	r1, [r7, #0]
 8002ed8:	440b      	add	r3, r1
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eea:	3304      	adds	r3, #4
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	3214      	adds	r2, #20
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	3301      	adds	r3, #1
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f06:	e7c3      	b.n	8002e90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f14:	3301      	adds	r3, #1
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	4413      	add	r3, r2
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f26:	3302      	adds	r3, #2
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	041b      	lsls	r3, r3, #16
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f38:	3303      	adds	r3, #3
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	061b      	lsls	r3, r3, #24
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d90a      	bls.n	8002f6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4619      	mov	r1, r3
 8002f62:	4610      	mov	r0, r2
 8002f64:	f008 fdd6 	bl	800bb14 <realloc>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002f74:	2300      	movs	r3, #0
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d23f      	bcs.n	8003002 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	441a      	add	r2, r3
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 faac 	bl	80044ec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	3304      	adds	r3, #4
 8002f98:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d20c      	bcs.n	8002fc4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	441a      	add	r2, r3
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	440b      	add	r3, r1
 8002fb8:	7812      	ldrb	r2, [r2, #0]
 8002fba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	e7ec      	b.n	8002f9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	4413      	add	r3, r2
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	441a      	add	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	3220      	adds	r2, #32
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003000:	e7ba      	b.n	8002f78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8003002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003004:	4618      	mov	r0, r3
 8003006:	3738      	adds	r7, #56	; 0x38
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	0800c038 	.word	0x0800c038

08003028 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	0800bee0 	.word	0x0800bee0

08003044 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	611a      	str	r2, [r3, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68d8      	ldr	r0, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6891      	ldr	r1, [r2, #8]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	4798      	blx	r3
 8003090:	4603      	mov	r3, r0
  };
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
  }
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80030c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <_ZN13STM32HardwareC1Ev+0x3c>)
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f4:	461a      	mov	r2, r3
 80030f6:	2300      	movs	r3, #0
 80030f8:	6093      	str	r3, [r2, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003100:	461a      	mov	r2, r3
 8003102:	2300      	movs	r3, #0
 8003104:	60d3      	str	r3, [r2, #12]
    }
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	2000031c 	.word	0x2000031c

08003118 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f804 	bl	800312e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3304      	adds	r3, #4
 800313e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003142:	4619      	mov	r1, r3
 8003144:	f007 fb0c 	bl	800a760 <HAL_UART_Receive_DMA>
    }
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <_ZN13STM32Hardware4readEv>:

    int read(){
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
      int c = -1;
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
 800315c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ffa4 	bl	80030b2 <_ZN13STM32Hardware10getRdmaIndEv>
 800316a:	4603      	mov	r3, r0
 800316c:	429c      	cmp	r4, r3
 800316e:	bf14      	ite	ne
 8003170:	2301      	movne	r3, #1
 8003172:	2300      	moveq	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d012      	beq.n	80031a0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8003180:	1c59      	adds	r1, r3, #1
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	791b      	ldrb	r3, [r3, #4]
 800318e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8003196:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 80031a0:	68fb      	ldr	r3, [r7, #12]
    }
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd90      	pop	{r4, r7, pc}
	...

080031ac <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d108      	bne.n	80031d4 <_ZN13STM32Hardware5flushEv+0x28>
 80031c2:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <_ZN13STM32Hardware5flushEv+0xcc>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	f083 0301 	eor.w	r3, r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <_ZN13STM32Hardware5flushEv+0x28>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <_ZN13STM32Hardware5flushEv+0x2a>
 80031d4:	2300      	movs	r3, #0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d049      	beq.n	800326e <_ZN13STM32Hardware5flushEv+0xc2>
        mutex = true;
 80031da:	4b27      	ldr	r3, [pc, #156]	; (8003278 <_ZN13STM32Hardware5flushEv+0xcc>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d039      	beq.n	8003268 <_ZN13STM32Hardware5flushEv+0xbc>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	d20c      	bcs.n	8003222 <_ZN13STM32Hardware5flushEv+0x76>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	b29b      	uxth	r3, r3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	b29b      	uxth	r3, r3
 8003220:	e007      	b.n	8003232 <_ZN13STM32Hardware5flushEv+0x86>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	b29b      	uxth	r3, r3
 800322c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003230:	b29b      	uxth	r3, r3
 8003232:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	4413      	add	r3, r2
 8003248:	89fa      	ldrh	r2, [r7, #14]
 800324a:	4619      	mov	r1, r3
 800324c:	f007 fa0a 	bl	800a664 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	89fb      	ldrh	r3, [r7, #14]
 800325a:	4413      	add	r3, r2
 800325c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003266:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <_ZN13STM32Hardware5flushEv+0xcc>)
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
      }
    }
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200004b8 	.word	0x200004b8

0800327c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
      int n = length;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003292:	bfa8      	it	ge
 8003294:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8003298:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	4293      	cmp	r3, r2
 80032aa:	bf28      	it	cs
 80032ac:	4613      	movcs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f008 fc0f 	bl	800bae8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	4413      	add	r3, r2
 80032d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032e0:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d00b      	beq.n	8003302 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f603 0008 	addw	r0, r3, #2056	; 0x808
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	18d1      	adds	r1, r2, r3
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	f008 fbf3 	bl	800bae8 <memcpy>
      }

      flush();
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f7ff ff52 	bl	80031ac <_ZN13STM32Hardware5flushEv>
    }
 8003308:	bf00      	nop
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	f003 ff9a 	bl	8007250 <HAL_GetTick>
 800331c:	4603      	mov	r3, r0
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff f850 	bl	80023d8 <_ZN3ros3MsgC1Ev>
 8003338:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	0800c0d0 	.word	0x0800c0d0

08003378 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003378:	b480      	push	{r7}
 800337a:	b08b      	sub	sp, #44	; 0x2c
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800338c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003396:	6838      	ldr	r0, [r7, #0]
 8003398:	4401      	add	r1, r0
 800339a:	b2d3      	uxtb	r3, r2
 800339c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800339e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	0a02      	lsrs	r2, r0, #8
 80033ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80033b0:	0a0b      	lsrs	r3, r1, #8
 80033b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b4:	3101      	adds	r1, #1
 80033b6:	6838      	ldr	r0, [r7, #0]
 80033b8:	4401      	add	r1, r0
 80033ba:	b2d3      	uxtb	r3, r2
 80033bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80033be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	0c02      	lsrs	r2, r0, #16
 80033cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80033d0:	0c0b      	lsrs	r3, r1, #16
 80033d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d4:	3102      	adds	r1, #2
 80033d6:	6838      	ldr	r0, [r7, #0]
 80033d8:	4401      	add	r1, r0
 80033da:	b2d3      	uxtb	r3, r2
 80033dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80033de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	0e02      	lsrs	r2, r0, #24
 80033ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033f0:	0e0b      	lsrs	r3, r1, #24
 80033f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f4:	3103      	adds	r1, #3
 80033f6:	6838      	ldr	r0, [r7, #0]
 80033f8:	4401      	add	r1, r0
 80033fa:	b2d3      	uxtb	r3, r2
 80033fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80033fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	000a      	movs	r2, r1
 800340c:	2300      	movs	r3, #0
 800340e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003410:	3104      	adds	r1, #4
 8003412:	6838      	ldr	r0, [r7, #0]
 8003414:	4401      	add	r1, r0
 8003416:	b2d3      	uxtb	r3, r2
 8003418:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800341a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	0a0a      	lsrs	r2, r1, #8
 8003428:	2300      	movs	r3, #0
 800342a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800342c:	3105      	adds	r1, #5
 800342e:	6838      	ldr	r0, [r7, #0]
 8003430:	4401      	add	r1, r0
 8003432:	b2d3      	uxtb	r3, r2
 8003434:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003436:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	0c0a      	lsrs	r2, r1, #16
 8003444:	2300      	movs	r3, #0
 8003446:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003448:	3106      	adds	r1, #6
 800344a:	6838      	ldr	r0, [r7, #0]
 800344c:	4401      	add	r1, r0
 800344e:	b2d3      	uxtb	r3, r2
 8003450:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003452:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	0e0a      	lsrs	r2, r1, #24
 8003460:	2300      	movs	r3, #0
 8003462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003464:	3107      	adds	r1, #7
 8003466:	6838      	ldr	r0, [r7, #0]
 8003468:	4401      	add	r1, r0
 800346a:	b2d3      	uxtb	r3, r2
 800346c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	3308      	adds	r3, #8
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800347a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800347e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003484:	6838      	ldr	r0, [r7, #0]
 8003486:	4401      	add	r1, r0
 8003488:	b2d3      	uxtb	r3, r2
 800348a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800348c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	0a02      	lsrs	r2, r0, #8
 800349a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800349e:	0a0b      	lsrs	r3, r1, #8
 80034a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a2:	3101      	adds	r1, #1
 80034a4:	6838      	ldr	r0, [r7, #0]
 80034a6:	4401      	add	r1, r0
 80034a8:	b2d3      	uxtb	r3, r2
 80034aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80034ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	0c02      	lsrs	r2, r0, #16
 80034ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80034be:	0c0b      	lsrs	r3, r1, #16
 80034c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c2:	3102      	adds	r1, #2
 80034c4:	6838      	ldr	r0, [r7, #0]
 80034c6:	4401      	add	r1, r0
 80034c8:	b2d3      	uxtb	r3, r2
 80034ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80034cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	0e02      	lsrs	r2, r0, #24
 80034da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80034de:	0e0b      	lsrs	r3, r1, #24
 80034e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e2:	3103      	adds	r1, #3
 80034e4:	6838      	ldr	r0, [r7, #0]
 80034e6:	4401      	add	r1, r0
 80034e8:	b2d3      	uxtb	r3, r2
 80034ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80034ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	000a      	movs	r2, r1
 80034fa:	2300      	movs	r3, #0
 80034fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034fe:	3104      	adds	r1, #4
 8003500:	6838      	ldr	r0, [r7, #0]
 8003502:	4401      	add	r1, r0
 8003504:	b2d3      	uxtb	r3, r2
 8003506:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003508:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	0a0a      	lsrs	r2, r1, #8
 8003516:	2300      	movs	r3, #0
 8003518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800351a:	3105      	adds	r1, #5
 800351c:	6838      	ldr	r0, [r7, #0]
 800351e:	4401      	add	r1, r0
 8003520:	b2d3      	uxtb	r3, r2
 8003522:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003524:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	0c0a      	lsrs	r2, r1, #16
 8003532:	2300      	movs	r3, #0
 8003534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003536:	3106      	adds	r1, #6
 8003538:	6838      	ldr	r0, [r7, #0]
 800353a:	4401      	add	r1, r0
 800353c:	b2d3      	uxtb	r3, r2
 800353e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003540:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	0e0a      	lsrs	r2, r1, #24
 800354e:	2300      	movs	r3, #0
 8003550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003552:	3107      	adds	r1, #7
 8003554:	6838      	ldr	r0, [r7, #0]
 8003556:	4401      	add	r1, r0
 8003558:	b2d3      	uxtb	r3, r2
 800355a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	3308      	adds	r3, #8
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003568:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800356c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003572:	6838      	ldr	r0, [r7, #0]
 8003574:	4401      	add	r1, r0
 8003576:	b2d3      	uxtb	r3, r2
 8003578:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800357a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	0a02      	lsrs	r2, r0, #8
 8003588:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800358c:	0a0b      	lsrs	r3, r1, #8
 800358e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003590:	3101      	adds	r1, #1
 8003592:	6838      	ldr	r0, [r7, #0]
 8003594:	4401      	add	r1, r0
 8003596:	b2d3      	uxtb	r3, r2
 8003598:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800359a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	0c02      	lsrs	r2, r0, #16
 80035a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035ac:	0c0b      	lsrs	r3, r1, #16
 80035ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b0:	3102      	adds	r1, #2
 80035b2:	6838      	ldr	r0, [r7, #0]
 80035b4:	4401      	add	r1, r0
 80035b6:	b2d3      	uxtb	r3, r2
 80035b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80035ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	0e02      	lsrs	r2, r0, #24
 80035c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80035cc:	0e0b      	lsrs	r3, r1, #24
 80035ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d0:	3103      	adds	r1, #3
 80035d2:	6838      	ldr	r0, [r7, #0]
 80035d4:	4401      	add	r1, r0
 80035d6:	b2d3      	uxtb	r3, r2
 80035d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80035da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	000a      	movs	r2, r1
 80035e8:	2300      	movs	r3, #0
 80035ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ec:	3104      	adds	r1, #4
 80035ee:	6838      	ldr	r0, [r7, #0]
 80035f0:	4401      	add	r1, r0
 80035f2:	b2d3      	uxtb	r3, r2
 80035f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80035f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	0a0a      	lsrs	r2, r1, #8
 8003604:	2300      	movs	r3, #0
 8003606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003608:	3105      	adds	r1, #5
 800360a:	6838      	ldr	r0, [r7, #0]
 800360c:	4401      	add	r1, r0
 800360e:	b2d3      	uxtb	r3, r2
 8003610:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	0c0a      	lsrs	r2, r1, #16
 8003620:	2300      	movs	r3, #0
 8003622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003624:	3106      	adds	r1, #6
 8003626:	6838      	ldr	r0, [r7, #0]
 8003628:	4401      	add	r1, r0
 800362a:	b2d3      	uxtb	r3, r2
 800362c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800362e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	0e0a      	lsrs	r2, r1, #24
 800363c:	2300      	movs	r3, #0
 800363e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003640:	3107      	adds	r1, #7
 8003642:	6838      	ldr	r0, [r7, #0]
 8003644:	4401      	add	r1, r0
 8003646:	b2d3      	uxtb	r3, r2
 8003648:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	3308      	adds	r3, #8
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003652:	4618      	mov	r0, r3
 8003654:	372c      	adds	r7, #44	; 0x2c
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800365e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003662:	b0eb      	sub	sp, #428	; 0x1ac
 8003664:	af00      	add	r7, sp, #0
 8003666:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800366a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003680:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003684:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003688:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800368c:	4413      	add	r3, r2
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2200      	movs	r2, #0
 8003694:	461c      	mov	r4, r3
 8003696:	4615      	mov	r5, r2
 8003698:	ea40 0804 	orr.w	r8, r0, r4
 800369c:	ea41 0905 	orr.w	r9, r1, r5
 80036a0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036b2:	4413      	add	r3, r2
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2200      	movs	r2, #0
 80036ba:	469a      	mov	sl, r3
 80036bc:	4693      	mov	fp, r2
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80036ca:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80036ce:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80036d2:	ea40 0402 	orr.w	r4, r0, r2
 80036d6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80036da:	430b      	orrs	r3, r1
 80036dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80036e0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80036e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036f0:	1c9a      	adds	r2, r3, #2
 80036f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036f6:	4413      	add	r3, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2200      	movs	r2, #0
 80036fe:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003702:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003712:	464c      	mov	r4, r9
 8003714:	0423      	lsls	r3, r4, #16
 8003716:	4644      	mov	r4, r8
 8003718:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800371c:	4644      	mov	r4, r8
 800371e:	0422      	lsls	r2, r4, #16
 8003720:	ea40 0402 	orr.w	r4, r0, r2
 8003724:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003728:	430b      	orrs	r3, r1
 800372a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800372e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003732:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003736:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800373a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800373e:	1cda      	adds	r2, r3, #3
 8003740:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003744:	4413      	add	r3, r2
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2200      	movs	r2, #0
 800374c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003750:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003754:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003758:	4623      	mov	r3, r4
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003760:	4623      	mov	r3, r4
 8003762:	061b      	lsls	r3, r3, #24
 8003764:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003768:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800376c:	4623      	mov	r3, r4
 800376e:	4303      	orrs	r3, r0
 8003770:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003774:	462b      	mov	r3, r5
 8003776:	430b      	orrs	r3, r1
 8003778:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800377c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003780:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003784:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003788:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800378c:	1d1a      	adds	r2, r3, #4
 800378e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003792:	4413      	add	r3, r2
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2200      	movs	r2, #0
 800379a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800379e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80037ae:	0023      	movs	r3, r4
 80037b0:	2200      	movs	r2, #0
 80037b2:	ea40 0402 	orr.w	r4, r0, r2
 80037b6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80037ba:	430b      	orrs	r3, r1
 80037bc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80037c0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80037c4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80037c8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037d0:	1d5a      	adds	r2, r3, #5
 80037d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2200      	movs	r2, #0
 80037de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80037e2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80037f2:	0223      	lsls	r3, r4, #8
 80037f4:	2200      	movs	r2, #0
 80037f6:	ea40 0402 	orr.w	r4, r0, r2
 80037fa:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80037fe:	430b      	orrs	r3, r1
 8003800:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003804:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003808:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800380c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003810:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003814:	1d9a      	adds	r2, r3, #6
 8003816:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800381a:	4413      	add	r3, r2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2200      	movs	r2, #0
 8003822:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003826:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003836:	0423      	lsls	r3, r4, #16
 8003838:	2200      	movs	r2, #0
 800383a:	ea40 0402 	orr.w	r4, r0, r2
 800383e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003842:	430b      	orrs	r3, r1
 8003844:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003848:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800384c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003850:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003854:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003858:	1dda      	adds	r2, r3, #7
 800385a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800385e:	4413      	add	r3, r2
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2200      	movs	r2, #0
 8003866:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800386a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800387a:	0623      	lsls	r3, r4, #24
 800387c:	2200      	movs	r2, #0
 800387e:	ea40 0402 	orr.w	r4, r0, r2
 8003882:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003886:	430b      	orrs	r3, r1
 8003888:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800388c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003890:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003894:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003898:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800389c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80038a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038a4:	3308      	adds	r3, #8
 80038a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80038b6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80038ba:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80038be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038c2:	4413      	add	r3, r2
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80038ce:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80038d2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80038d6:	4623      	mov	r3, r4
 80038d8:	4303      	orrs	r3, r0
 80038da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038de:	462b      	mov	r3, r5
 80038e0:	430b      	orrs	r3, r1
 80038e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038e6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80038ea:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80038ee:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80038f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038fc:	4413      	add	r3, r2
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2200      	movs	r2, #0
 8003904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003908:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003918:	464c      	mov	r4, r9
 800391a:	0223      	lsls	r3, r4, #8
 800391c:	4644      	mov	r4, r8
 800391e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003922:	4644      	mov	r4, r8
 8003924:	0222      	lsls	r2, r4, #8
 8003926:	ea40 0402 	orr.w	r4, r0, r2
 800392a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800392e:	430b      	orrs	r3, r1
 8003930:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003934:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003938:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800393c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003940:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003944:	1c9a      	adds	r2, r3, #2
 8003946:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800394a:	4413      	add	r3, r2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2200      	movs	r2, #0
 8003952:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003956:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003966:	464c      	mov	r4, r9
 8003968:	0423      	lsls	r3, r4, #16
 800396a:	4644      	mov	r4, r8
 800396c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003970:	4644      	mov	r4, r8
 8003972:	0422      	lsls	r2, r4, #16
 8003974:	ea40 0402 	orr.w	r4, r0, r2
 8003978:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800397c:	430b      	orrs	r3, r1
 800397e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003982:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003986:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800398a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800398e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003992:	1cda      	adds	r2, r3, #3
 8003994:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003998:	4413      	add	r3, r2
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039a4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039a8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80039ac:	4623      	mov	r3, r4
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80039b4:	4623      	mov	r3, r4
 80039b6:	061b      	lsls	r3, r3, #24
 80039b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039bc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80039c0:	4623      	mov	r3, r4
 80039c2:	4303      	orrs	r3, r0
 80039c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039c8:	462b      	mov	r3, r5
 80039ca:	430b      	orrs	r3, r1
 80039cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039d0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80039d4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80039d8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039e0:	1d1a      	adds	r2, r3, #4
 80039e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039e6:	4413      	add	r3, r2
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2200      	movs	r2, #0
 80039ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039f2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003a02:	0023      	movs	r3, r4
 8003a04:	2200      	movs	r2, #0
 8003a06:	ea40 0402 	orr.w	r4, r0, r2
 8003a0a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a14:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003a18:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a1c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a24:	1d5a      	adds	r2, r3, #5
 8003a26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a2a:	4413      	add	r3, r2
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a36:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003a46:	0223      	lsls	r3, r4, #8
 8003a48:	2200      	movs	r2, #0
 8003a4a:	ea40 0402 	orr.w	r4, r0, r2
 8003a4e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003a52:	430b      	orrs	r3, r1
 8003a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a58:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003a5c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003a60:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a68:	1d9a      	adds	r2, r3, #6
 8003a6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a6e:	4413      	add	r3, r2
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2200      	movs	r2, #0
 8003a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003a8a:	0423      	lsls	r3, r4, #16
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	ea40 0402 	orr.w	r4, r0, r2
 8003a92:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003a96:	430b      	orrs	r3, r1
 8003a98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a9c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003aa0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003aa4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003aa8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003aac:	1dda      	adds	r2, r3, #7
 8003aae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ab2:	4413      	add	r3, r2
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003abe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003ace:	0623      	lsls	r3, r4, #24
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	ea40 0402 	orr.w	r4, r0, r2
 8003ad6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003ada:	430b      	orrs	r3, r1
 8003adc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ae0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003ae4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003ae8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003aec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003af0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003af4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003af8:	3308      	adds	r3, #8
 8003afa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b0a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b0e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003b12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b16:	4413      	add	r3, r2
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b22:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b26:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	4303      	orrs	r3, r0
 8003b2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b30:	462b      	mov	r3, r5
 8003b32:	430b      	orrs	r3, r1
 8003b34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b36:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003b3a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b3e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b4c:	4413      	add	r3, r2
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2200      	movs	r2, #0
 8003b54:	673b      	str	r3, [r7, #112]	; 0x70
 8003b56:	677a      	str	r2, [r7, #116]	; 0x74
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b64:	464c      	mov	r4, r9
 8003b66:	0223      	lsls	r3, r4, #8
 8003b68:	4644      	mov	r4, r8
 8003b6a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b6e:	4644      	mov	r4, r8
 8003b70:	0222      	lsls	r2, r4, #8
 8003b72:	ea40 0402 	orr.w	r4, r0, r2
 8003b76:	66bc      	str	r4, [r7, #104]	; 0x68
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b7c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003b80:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b84:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b8c:	1c9a      	adds	r2, r3, #2
 8003b8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b92:	4413      	add	r3, r2
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2200      	movs	r2, #0
 8003b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b9c:	667a      	str	r2, [r7, #100]	; 0x64
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003baa:	464c      	mov	r4, r9
 8003bac:	0423      	lsls	r3, r4, #16
 8003bae:	4644      	mov	r4, r8
 8003bb0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003bb4:	4644      	mov	r4, r8
 8003bb6:	0422      	lsls	r2, r4, #16
 8003bb8:	ea40 0402 	orr.w	r4, r0, r2
 8003bbc:	65bc      	str	r4, [r7, #88]	; 0x58
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003bc6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003bca:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003bce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bd2:	1cda      	adds	r2, r3, #3
 8003bd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bd8:	4413      	add	r3, r2
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2200      	movs	r2, #0
 8003be0:	653b      	str	r3, [r7, #80]	; 0x50
 8003be2:	657a      	str	r2, [r7, #84]	; 0x54
 8003be4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003be8:	4623      	mov	r3, r4
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bee:	4623      	mov	r3, r4
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bf4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	4303      	orrs	r3, r0
 8003bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8003bfe:	462b      	mov	r3, r5
 8003c00:	430b      	orrs	r3, r1
 8003c02:	647b      	str	r3, [r7, #68]	; 0x44
 8003c04:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003c08:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003c0c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c14:	1d1a      	adds	r2, r3, #4
 8003c16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c1a:	4413      	add	r3, r2
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2200      	movs	r2, #0
 8003c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003c30:	0023      	movs	r3, r4
 8003c32:	2200      	movs	r2, #0
 8003c34:	ea40 0402 	orr.w	r4, r0, r2
 8003c38:	633c      	str	r4, [r7, #48]	; 0x30
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003c42:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c46:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c4e:	1d5a      	adds	r2, r3, #5
 8003c50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c54:	4413      	add	r3, r2
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003c6a:	0223      	lsls	r3, r4, #8
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	ea40 0402 	orr.w	r4, r0, r2
 8003c72:	623c      	str	r4, [r7, #32]
 8003c74:	430b      	orrs	r3, r1
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
 8003c78:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003c7c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c80:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c88:	3306      	adds	r3, #6
 8003c8a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003c8e:	4413      	add	r3, r2
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2200      	movs	r2, #0
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	61fa      	str	r2, [r7, #28]
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	69bc      	ldr	r4, [r7, #24]
 8003ca4:	0423      	lsls	r3, r4, #16
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	ea40 0402 	orr.w	r4, r0, r2
 8003cac:	613c      	str	r4, [r7, #16]
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003cb6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003cba:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003cbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cc2:	3307      	adds	r3, #7
 8003cc4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003cc8:	4413      	add	r3, r2
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2200      	movs	r2, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	60fa      	str	r2, [r7, #12]
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	68bc      	ldr	r4, [r7, #8]
 8003cde:	0623      	lsls	r3, r4, #24
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	ea40 0402 	orr.w	r4, r0, r2
 8003ce6:	603c      	str	r4, [r7, #0]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003cf0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003cf4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003cf8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003cfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003d00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d04:	3308      	adds	r3, #8
 8003d06:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003d0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003d14:	46bd      	mov	sp, r7
 8003d16:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003d1a:	4770      	bx	lr

08003d1c <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	0800bf04 	.word	0x0800bf04

08003d38 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	0800bf18 	.word	0x0800bf18

08003d54 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
      data(0)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fb3a 	bl	80023d8 <_ZN3ros3MsgC1Ev>
 8003d64:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <_ZN8std_msgs4Int8C1Ev+0x28>)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	711a      	strb	r2, [r3, #4]
    {
    }
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	0800c0b8 	.word	0x0800c0b8

08003d80 <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003d94:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	7a3a      	ldrb	r2, [r7, #8]
 8003d9e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
      return offset;
 8003da6:	68fb      	ldr	r3, [r7, #12]
    }
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003dc6:	7a3a      	ldrb	r2, [r7, #8]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6839      	ldr	r1, [r7, #0]
 8003dcc:	440b      	add	r3, r1
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003dd6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3301      	adds	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
     return offset;
 8003de4:	68fb      	ldr	r3, [r7, #12]
    }
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	0800bf3c 	.word	0x0800bf3c

08003e10 <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	0800bf4c 	.word	0x0800bf4c

08003e2c <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
      data(0)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe face 	bl	80023d8 <_ZN3ros3MsgC1Ev>
 8003e3c:	4a07      	ldr	r2, [pc, #28]	; (8003e5c <_ZN8std_msgs5Int64C1Ev+0x30>)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	0800c0a0 	.word	0x0800c0a0

08003e60 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003e74:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e7c:	6979      	ldr	r1, [r7, #20]
 8003e7e:	6838      	ldr	r0, [r7, #0]
 8003e80:	4401      	add	r1, r0
 8003e82:	b2d3      	uxtb	r3, r2
 8003e84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003e86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	0a02      	lsrs	r2, r0, #8
 8003e94:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003e98:	0a0b      	lsrs	r3, r1, #8
 8003e9a:	6979      	ldr	r1, [r7, #20]
 8003e9c:	3101      	adds	r1, #1
 8003e9e:	6838      	ldr	r0, [r7, #0]
 8003ea0:	4401      	add	r1, r0
 8003ea2:	b2d3      	uxtb	r3, r2
 8003ea4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003ea6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	0c02      	lsrs	r2, r0, #16
 8003eb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003eb8:	0c0b      	lsrs	r3, r1, #16
 8003eba:	6979      	ldr	r1, [r7, #20]
 8003ebc:	3102      	adds	r1, #2
 8003ebe:	6838      	ldr	r0, [r7, #0]
 8003ec0:	4401      	add	r1, r0
 8003ec2:	b2d3      	uxtb	r3, r2
 8003ec4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003ec6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	0e02      	lsrs	r2, r0, #24
 8003ed4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ed8:	0e0b      	lsrs	r3, r1, #24
 8003eda:	6979      	ldr	r1, [r7, #20]
 8003edc:	3103      	adds	r1, #3
 8003ede:	6838      	ldr	r0, [r7, #0]
 8003ee0:	4401      	add	r1, r0
 8003ee2:	b2d3      	uxtb	r3, r2
 8003ee4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8003ee6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	000a      	movs	r2, r1
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	6979      	ldr	r1, [r7, #20]
 8003ef8:	3104      	adds	r1, #4
 8003efa:	6838      	ldr	r0, [r7, #0]
 8003efc:	4401      	add	r1, r0
 8003efe:	b2d3      	uxtb	r3, r2
 8003f00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8003f02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	0a0a      	lsrs	r2, r1, #8
 8003f10:	2300      	movs	r3, #0
 8003f12:	6979      	ldr	r1, [r7, #20]
 8003f14:	3105      	adds	r1, #5
 8003f16:	6838      	ldr	r0, [r7, #0]
 8003f18:	4401      	add	r1, r0
 8003f1a:	b2d3      	uxtb	r3, r2
 8003f1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8003f1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	0c0a      	lsrs	r2, r1, #16
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	6979      	ldr	r1, [r7, #20]
 8003f30:	3106      	adds	r1, #6
 8003f32:	6838      	ldr	r0, [r7, #0]
 8003f34:	4401      	add	r1, r0
 8003f36:	b2d3      	uxtb	r3, r2
 8003f38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8003f3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	0e0a      	lsrs	r2, r1, #24
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6979      	ldr	r1, [r7, #20]
 8003f4c:	3107      	adds	r1, #7
 8003f4e:	6838      	ldr	r0, [r7, #0]
 8003f50:	4401      	add	r1, r0
 8003f52:	b2d3      	uxtb	r3, r2
 8003f54:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	617b      	str	r3, [r7, #20]
      return offset;
 8003f5c:	697b      	ldr	r3, [r7, #20]
    }
 8003f5e:	4618      	mov	r0, r3
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003f6a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003f6e:	b0a3      	sub	sp, #140	; 0x8c
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6778      	str	r0, [r7, #116]	; 0x74
 8003f74:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003f88:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003f8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003f90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f92:	4413      	add	r3, r2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2200      	movs	r2, #0
 8003f9a:	461c      	mov	r4, r3
 8003f9c:	4615      	mov	r5, r2
 8003f9e:	ea40 0804 	orr.w	r8, r0, r4
 8003fa2:	ea41 0905 	orr.w	r9, r1, r5
 8003fa6:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003faa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb6:	4413      	add	r3, r2
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	469a      	mov	sl, r3
 8003fc0:	4693      	mov	fp, r2
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003fce:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003fd2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003fd6:	ea40 0402 	orr.w	r4, r0, r2
 8003fda:	66bc      	str	r4, [r7, #104]	; 0x68
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fe0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003fe4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003fe8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ff0:	1c9a      	adds	r2, r3, #2
 8003ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff4:	4413      	add	r3, r2
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ffe:	667a      	str	r2, [r7, #100]	; 0x64
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800400c:	464c      	mov	r4, r9
 800400e:	0423      	lsls	r3, r4, #16
 8004010:	4644      	mov	r4, r8
 8004012:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004016:	4644      	mov	r4, r8
 8004018:	0422      	lsls	r2, r4, #16
 800401a:	ea40 0402 	orr.w	r4, r0, r2
 800401e:	65bc      	str	r4, [r7, #88]	; 0x58
 8004020:	430b      	orrs	r3, r1
 8004022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004024:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004028:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800402c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004034:	1cda      	adds	r2, r3, #3
 8004036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004038:	4413      	add	r3, r2
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2200      	movs	r2, #0
 8004040:	653b      	str	r3, [r7, #80]	; 0x50
 8004042:	657a      	str	r2, [r7, #84]	; 0x54
 8004044:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004048:	4623      	mov	r3, r4
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800404e:	4623      	mov	r3, r4
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	64bb      	str	r3, [r7, #72]	; 0x48
 8004054:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004058:	4623      	mov	r3, r4
 800405a:	4303      	orrs	r3, r0
 800405c:	643b      	str	r3, [r7, #64]	; 0x40
 800405e:	462b      	mov	r3, r5
 8004060:	430b      	orrs	r3, r1
 8004062:	647b      	str	r3, [r7, #68]	; 0x44
 8004064:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004068:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800406c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004074:	1d1a      	adds	r2, r3, #4
 8004076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004078:	4413      	add	r3, r2
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2200      	movs	r2, #0
 8004080:	63bb      	str	r3, [r7, #56]	; 0x38
 8004082:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800408e:	0023      	movs	r3, r4
 8004090:	2200      	movs	r2, #0
 8004092:	ea40 0402 	orr.w	r4, r0, r2
 8004096:	633c      	str	r4, [r7, #48]	; 0x30
 8004098:	430b      	orrs	r3, r1
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
 800409c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80040a0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80040a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80040a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040ac:	1d5a      	adds	r2, r3, #5
 80040ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040b0:	4413      	add	r3, r2
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2200      	movs	r2, #0
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80040c6:	0223      	lsls	r3, r4, #8
 80040c8:	2200      	movs	r2, #0
 80040ca:	ea40 0402 	orr.w	r4, r0, r2
 80040ce:	623c      	str	r4, [r7, #32]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
 80040d4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80040d8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80040dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80040e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040e4:	3306      	adds	r3, #6
 80040e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80040e8:	4413      	add	r3, r2
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2200      	movs	r2, #0
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	61fa      	str	r2, [r7, #28]
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	69bc      	ldr	r4, [r7, #24]
 80040fe:	0423      	lsls	r3, r4, #16
 8004100:	2200      	movs	r2, #0
 8004102:	ea40 0402 	orr.w	r4, r0, r2
 8004106:	613c      	str	r4, [r7, #16]
 8004108:	430b      	orrs	r3, r1
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004110:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004114:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800411c:	3307      	adds	r3, #7
 800411e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004120:	4413      	add	r3, r2
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2200      	movs	r2, #0
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	60fa      	str	r2, [r7, #12]
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	68bc      	ldr	r4, [r7, #8]
 8004136:	0623      	lsls	r3, r4, #24
 8004138:	2200      	movs	r2, #0
 800413a:	ea40 0402 	orr.w	r4, r0, r2
 800413e:	603c      	str	r4, [r7, #0]
 8004140:	430b      	orrs	r3, r1
 8004142:	607b      	str	r3, [r7, #4]
 8004144:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004148:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 800414c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004150:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004152:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8004156:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800415a:	3308      	adds	r3, #8
 800415c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8004160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8004164:	4618      	mov	r0, r3
 8004166:	378c      	adds	r7, #140	; 0x8c
 8004168:	46bd      	mov	sp, r7
 800416a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800416e:	4770      	bx	lr

08004170 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	0800bf70 	.word	0x0800bf70

0800418c <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	0800bf80 	.word	0x0800bf80

080041a8 <_Z14angle_callbackRKN13geometry_msgs5PointE>:
std_msgs::Int64 button_reset;
double shooter_init;
int laji_high = 0;

void angle_callback(const geometry_msgs::Point &msg)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	ros_hz = msg.x;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80041b6:	490a      	ldr	r1, [pc, #40]	; (80041e0 <_Z14angle_callbackRKN13geometry_msgs5PointE+0x38>)
 80041b8:	e9c1 2300 	strd	r2, r3, [r1]
	ros_ev = msg.y;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80041c2:	4908      	ldr	r1, [pc, #32]	; (80041e4 <_Z14angle_callbackRKN13geometry_msgs5PointE+0x3c>)
 80041c4:	e9c1 2300 	strd	r2, r3, [r1]
	ros_st = msg.z;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80041ce:	4906      	ldr	r1, [pc, #24]	; (80041e8 <_Z14angle_callbackRKN13geometry_msgs5PointE+0x40>)
 80041d0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	20001bd0 	.word	0x20001bd0
 80041e4:	20001bd8 	.word	0x20001bd8
 80041e8:	20001bc8 	.word	0x20001bc8

080041ec <_Z13laji_callbackRKN8std_msgs4Int8E>:
void laji_callback(const std_msgs::Int8 &msg){
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	laji_cmd = msg.data;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80041fa:	461a      	mov	r2, r3
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <_Z13laji_callbackRKN8std_msgs4Int8E+0x20>)
 80041fe:	601a      	str	r2, [r3, #0]
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	20000118 	.word	0x20000118

08004210 <_Z12ori_callbackRKN8std_msgs4Int8E>:

void ori_callback(const std_msgs::Int8 &msg){
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	flag = msg.data;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800421e:	461a      	mov	r2, r3
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <_Z12ori_callbackRKN8std_msgs4Int8E+0x20>)
 8004222:	601a      	str	r2, [r3, #0]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	200004bc 	.word	0x200004bc

08004234 <_Z18badminton_callbackRKN8std_msgs4Int8E>:
void badminton_callback(const std_msgs::Int8 &msg){
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	dis = msg.data;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004242:	461a      	mov	r2, r3
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <_Z18badminton_callbackRKN8std_msgs4Int8E+0x20>)
 8004246:	601a      	str	r2, [r3, #0]
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	200004c0 	.word	0x200004c0

08004258 <_Z9ros_setupv>:
//badminton
ros::Subscriber<std_msgs::Int8> sub_badminton("dis", badminton_callback);
ros::Publisher pub_badminton("badminton_ok", &badminton_ok);

void ros_setup(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
    nh.initNode();
 800425c:	4814      	ldr	r0, [pc, #80]	; (80042b0 <_Z9ros_setupv+0x58>)
 800425e:	f000 fa6d 	bl	800473c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub_angle);
 8004262:	4914      	ldr	r1, [pc, #80]	; (80042b4 <_Z9ros_setupv+0x5c>)
 8004264:	4812      	ldr	r0, [pc, #72]	; (80042b0 <_Z9ros_setupv+0x58>)
 8004266:	f000 fa92 	bl	800478e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.subscribe(sub_ori);
 800426a:	4913      	ldr	r1, [pc, #76]	; (80042b8 <_Z9ros_setupv+0x60>)
 800426c:	4810      	ldr	r0, [pc, #64]	; (80042b0 <_Z9ros_setupv+0x58>)
 800426e:	f000 fab9 	bl	80047e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>

	nh.subscribe(sub_laji);
 8004272:	4912      	ldr	r1, [pc, #72]	; (80042bc <_Z9ros_setupv+0x64>)
 8004274:	480e      	ldr	r0, [pc, #56]	; (80042b0 <_Z9ros_setupv+0x58>)
 8004276:	f000 fab5 	bl	80047e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.advertise(pub_laji);
 800427a:	4911      	ldr	r1, [pc, #68]	; (80042c0 <_Z9ros_setupv+0x68>)
 800427c:	480c      	ldr	r0, [pc, #48]	; (80042b0 <_Z9ros_setupv+0x58>)
 800427e:	f000 fadc 	bl	800483a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	nh.advertise(pub_reset);
 8004282:	4910      	ldr	r1, [pc, #64]	; (80042c4 <_Z9ros_setupv+0x6c>)
 8004284:	480a      	ldr	r0, [pc, #40]	; (80042b0 <_Z9ros_setupv+0x58>)
 8004286:	f000 fad8 	bl	800483a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	nh.advertise(pub_pitches);
 800428a:	490f      	ldr	r1, [pc, #60]	; (80042c8 <_Z9ros_setupv+0x70>)
 800428c:	4808      	ldr	r0, [pc, #32]	; (80042b0 <_Z9ros_setupv+0x58>)
 800428e:	f000 fad4 	bl	800483a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_st);
 8004292:	490e      	ldr	r1, [pc, #56]	; (80042cc <_Z9ros_setupv+0x74>)
 8004294:	4806      	ldr	r0, [pc, #24]	; (80042b0 <_Z9ros_setupv+0x58>)
 8004296:	f000 fad0 	bl	800483a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	nh.subscribe(sub_badminton);
 800429a:	490d      	ldr	r1, [pc, #52]	; (80042d0 <_Z9ros_setupv+0x78>)
 800429c:	4804      	ldr	r0, [pc, #16]	; (80042b0 <_Z9ros_setupv+0x58>)
 800429e:	f000 faa1 	bl	80047e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.advertise(pub_badminton);
 80042a2:	490c      	ldr	r1, [pc, #48]	; (80042d4 <_Z9ros_setupv+0x7c>)
 80042a4:	4802      	ldr	r0, [pc, #8]	; (80042b0 <_Z9ros_setupv+0x58>)
 80042a6:	f000 fac8 	bl	800483a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000504 	.word	0x20000504
 80042b4:	20001a40 	.word	0x20001a40
 80042b8:	20001a78 	.word	0x20001a78
 80042bc:	20001abc 	.word	0x20001abc
 80042c0:	20001ad8 	.word	0x20001ad8
 80042c4:	20001aec 	.word	0x20001aec
 80042c8:	20001aa8 	.word	0x20001aa8
 80042cc:	20001a94 	.word	0x20001a94
 80042d0:	20001b00 	.word	0x20001b00
 80042d4:	20001b1c 	.word	0x20001b1c

080042d8 <_Z8ros_loopv>:
void ros_loop(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
    nh.spinOnce();
 80042dc:	4802      	ldr	r0, [pc, #8]	; (80042e8 <_Z8ros_loopv+0x10>)
 80042de:	f000 fadc 	bl	800489a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000504 	.word	0x20000504

080042ec <_Z3pubv>:
void pub(){
 80042ec:	b5b0      	push	{r4, r5, r7, lr}
 80042ee:	af00      	add	r7, sp, #0
	//laji
	if(laji_cmd > 0 || laji_high == 1){
 80042f0:	4b2e      	ldr	r3, [pc, #184]	; (80043ac <_Z3pubv+0xc0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	dc03      	bgt.n	8004300 <_Z3pubv+0x14>
 80042f8:	4b2d      	ldr	r3, [pc, #180]	; (80043b0 <_Z3pubv+0xc4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d10b      	bne.n	8004318 <_Z3pubv+0x2c>
		laji.data = laji_ok;
 8004300:	4b2c      	ldr	r3, [pc, #176]	; (80043b4 <_Z3pubv+0xc8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	b25a      	sxtb	r2, r3
 8004306:	4b2c      	ldr	r3, [pc, #176]	; (80043b8 <_Z3pubv+0xcc>)
 8004308:	711a      	strb	r2, [r3, #4]
		pub_laji.publish(&laji);
 800430a:	492b      	ldr	r1, [pc, #172]	; (80043b8 <_Z3pubv+0xcc>)
 800430c:	482b      	ldr	r0, [pc, #172]	; (80043bc <_Z3pubv+0xd0>)
 800430e:	f7fe feb0 	bl	8003072 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		laji_high = 1;
 8004312:	4b27      	ldr	r3, [pc, #156]	; (80043b0 <_Z3pubv+0xc4>)
 8004314:	2201      	movs	r2, #1
 8004316:	601a      	str	r2, [r3, #0]
	}
	//reset button
	button_reset.data = reset_condition();
 8004318:	f7fd fe94 	bl	8002044 <_Z15reset_conditionv>
 800431c:	4603      	mov	r3, r0
 800431e:	17da      	asrs	r2, r3, #31
 8004320:	461c      	mov	r4, r3
 8004322:	4615      	mov	r5, r2
 8004324:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <_Z3pubv+0xd4>)
 8004326:	e9c3 4502 	strd	r4, r5, [r3, #8]
	pub_reset.publish(&button_reset);
 800432a:	4925      	ldr	r1, [pc, #148]	; (80043c0 <_Z3pubv+0xd4>)
 800432c:	4825      	ldr	r0, [pc, #148]	; (80043c4 <_Z3pubv+0xd8>)
 800432e:	f7fe fea0 	bl	8003072 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	//shooter
	pitches.data = return_value;
 8004332:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <_Z3pubv+0xdc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	b25a      	sxtb	r2, r3
 8004338:	4b24      	ldr	r3, [pc, #144]	; (80043cc <_Z3pubv+0xe0>)
 800433a:	711a      	strb	r2, [r3, #4]
	st.data = st_set;
 800433c:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <_Z3pubv+0xe4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	b25a      	sxtb	r2, r3
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <_Z3pubv+0xe8>)
 8004344:	711a      	strb	r2, [r3, #4]
	//badminton
	badminton_ok.data = sig;
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <_Z3pubv+0xec>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	b25a      	sxtb	r2, r3
 800434c:	4b23      	ldr	r3, [pc, #140]	; (80043dc <_Z3pubv+0xf0>)
 800434e:	711a      	strb	r2, [r3, #4]
	pub_badminton.publish(&badminton_ok);
 8004350:	4922      	ldr	r1, [pc, #136]	; (80043dc <_Z3pubv+0xf0>)
 8004352:	4823      	ldr	r0, [pc, #140]	; (80043e0 <_Z3pubv+0xf4>)
 8004354:	f7fe fe8d 	bl	8003072 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	if(ros_hz == 2){
 8004358:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <_Z3pubv+0xf8>)
 800435a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004366:	f7fc fb7b 	bl	8000a60 <__aeabi_dcmpeq>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <_Z3pubv+0x90>
		shooter_init = 1;
 8004370:	491d      	ldr	r1, [pc, #116]	; (80043e8 <_Z3pubv+0xfc>)
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <_Z3pubv+0x100>)
 8004378:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if(shooter_init){
 800437c:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <_Z3pubv+0xfc>)
 800437e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	f7fc fb69 	bl	8000a60 <__aeabi_dcmpeq>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d000      	beq.n	8004396 <_Z3pubv+0xaa>
		pub_pitches.publish(&pitches);
		pub_st.publish(&st);
	}
}
 8004394:	e007      	b.n	80043a6 <_Z3pubv+0xba>
		pub_pitches.publish(&pitches);
 8004396:	490d      	ldr	r1, [pc, #52]	; (80043cc <_Z3pubv+0xe0>)
 8004398:	4815      	ldr	r0, [pc, #84]	; (80043f0 <_Z3pubv+0x104>)
 800439a:	f7fe fe6a 	bl	8003072 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		pub_st.publish(&st);
 800439e:	490d      	ldr	r1, [pc, #52]	; (80043d4 <_Z3pubv+0xe8>)
 80043a0:	4814      	ldr	r0, [pc, #80]	; (80043f4 <_Z3pubv+0x108>)
 80043a2:	f7fe fe66 	bl	8003072 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80043a6:	bf00      	nop
 80043a8:	bdb0      	pop	{r4, r5, r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000118 	.word	0x20000118
 80043b0:	20000500 	.word	0x20000500
 80043b4:	20000004 	.word	0x20000004
 80043b8:	200004c4 	.word	0x200004c4
 80043bc:	20001ad8 	.word	0x20001ad8
 80043c0:	200004e8 	.word	0x200004e8
 80043c4:	20001aec 	.word	0x20001aec
 80043c8:	20001b54 	.word	0x20001b54
 80043cc:	200004cc 	.word	0x200004cc
 80043d0:	20001b6c 	.word	0x20001b6c
 80043d4:	200004d4 	.word	0x200004d4
 80043d8:	20000108 	.word	0x20000108
 80043dc:	200004dc 	.word	0x200004dc
 80043e0:	20001b1c 	.word	0x20001b1c
 80043e4:	20001bd0 	.word	0x20001bd0
 80043e8:	200004f8 	.word	0x200004f8
 80043ec:	3ff00000 	.word	0x3ff00000
 80043f0:	20001aa8 	.word	0x20001aa8
 80043f4:	20001a94 	.word	0x20001a94

080043f8 <_ZL19MX_USART2_UART_Initv>:
//  }
//  /* USER CODE END Error_Handler_Debug */
//}

static void MX_USART2_UART_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80043fc:	4b13      	ldr	r3, [pc, #76]	; (800444c <_ZL19MX_USART2_UART_Initv+0x54>)
 80043fe:	4a14      	ldr	r2, [pc, #80]	; (8004450 <_ZL19MX_USART2_UART_Initv+0x58>)
 8004400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <_ZL19MX_USART2_UART_Initv+0x54>)
 8004404:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800440a:	4b10      	ldr	r3, [pc, #64]	; (800444c <_ZL19MX_USART2_UART_Initv+0x54>)
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004410:	4b0e      	ldr	r3, [pc, #56]	; (800444c <_ZL19MX_USART2_UART_Initv+0x54>)
 8004412:	2200      	movs	r2, #0
 8004414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <_ZL19MX_USART2_UART_Initv+0x54>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <_ZL19MX_USART2_UART_Initv+0x54>)
 800441e:	220c      	movs	r2, #12
 8004420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <_ZL19MX_USART2_UART_Initv+0x54>)
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004428:	4b08      	ldr	r3, [pc, #32]	; (800444c <_ZL19MX_USART2_UART_Initv+0x54>)
 800442a:	2200      	movs	r2, #0
 800442c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800442e:	4807      	ldr	r0, [pc, #28]	; (800444c <_ZL19MX_USART2_UART_Initv+0x54>)
 8004430:	f006 f80a 	bl	800a448 <HAL_UART_Init>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	bf14      	ite	ne
 800443a:	2301      	movne	r3, #1
 800443c:	2300      	moveq	r3, #0
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8004444:	f7fd fd58 	bl	8001ef8 <Error_Handler>

  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004448:	bf00      	nop
 800444a:	bd80      	pop	{r7, pc}
 800444c:	2000031c 	.word	0x2000031c
 8004450:	40004400 	.word	0x40004400

08004454 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
    if(huart == &huart2){
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a09      	ldr	r2, [pc, #36]	; (8004484 <HAL_UART_ErrorCallback+0x30>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d10b      	bne.n	800447c <HAL_UART_ErrorCallback+0x28>
    // set velocity 0 before uart reinitialization


  HAL_UART_DeInit(&huart2);
 8004464:	4807      	ldr	r0, [pc, #28]	; (8004484 <HAL_UART_ErrorCallback+0x30>)
 8004466:	f006 f83c 	bl	800a4e2 <HAL_UART_DeInit>
  MX_USART2_UART_Init();
 800446a:	f7ff ffc5 	bl	80043f8 <_ZL19MX_USART2_UART_Initv>
  nh.getHardware()->init();
 800446e:	4806      	ldr	r0, [pc, #24]	; (8004488 <HAL_UART_ErrorCallback+0x34>)
 8004470:	f000 fc8b 	bl	8004d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004474:	4603      	mov	r3, r0
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe fe4e 	bl	8003118 <_ZN13STM32Hardware4initEv>
    }
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	2000031c 	.word	0x2000031c
 8004488:	20000504 	.word	0x20000504

0800448c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8004494:	4805      	ldr	r0, [pc, #20]	; (80044ac <HAL_UART_TxCpltCallback+0x20>)
 8004496:	f000 fc78 	bl	8004d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800449a:	4603      	mov	r3, r0
 800449c:	4618      	mov	r0, r3
 800449e:	f7fe fe85 	bl	80031ac <_ZN13STM32Hardware5flushEv>
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000504 	.word	0x20000504

080044b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d80d      	bhi.n	80044e0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	fa22 f103 	lsr.w	r1, r2, r3
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	b2ca      	uxtb	r2, r1
 80044d6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3301      	adds	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	e7ee      	b.n	80044be <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d811      	bhi.n	800452a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6839      	ldr	r1, [r7, #0]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	440a      	add	r2, r1
 8004510:	7812      	ldrb	r2, [r2, #0]
 8004512:	4611      	mov	r1, r2
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	00d2      	lsls	r2, r2, #3
 8004518:	fa01 f202 	lsl.w	r2, r1, r2
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3301      	adds	r3, #1
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e7ea      	b.n	8004500 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	4a04      	ldr	r2, [pc, #16]	; (8004554 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	0800c100 	.word	0x0800c100

08004558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ffe8 	bl	8004538 <_ZN3ros15NodeHandleBase_C1Ev>
 8004568:	4a47      	ldr	r2, [pc, #284]	; (8004688 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	4618      	mov	r0, r3
 8004574:	f7fe fdb0 	bl	80030d8 <_ZN13STM32HardwareC1Ev>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 800458a:	3314      	adds	r3, #20
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe fa97 	bl	8002ac0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b18      	cmp	r3, #24
 800459a:	d80b      	bhi.n	80045b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	2200      	movs	r2, #0
 80045aa:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	3301      	adds	r3, #1
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e7f0      	b.n	8004596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b18      	cmp	r3, #24
 80045bc:	d80a      	bhi.n	80045d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80045c6:	2100      	movs	r1, #0
 80045c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	3301      	adds	r3, #1
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	e7f1      	b.n	80045b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045de:	d20b      	bcs.n	80045f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80045ea:	3304      	adds	r3, #4
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3301      	adds	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e7ef      	b.n	80045d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004602:	d20b      	bcs.n	800461c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4413      	add	r3, r2
 800460a:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800460e:	3304      	adds	r3, #4
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	3301      	adds	r3, #1
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	e7ef      	b.n	80045fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004622:	461a      	mov	r2, r3
 8004624:	2300      	movs	r3, #0
 8004626:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004630:	461a      	mov	r2, r3
 8004632:	2300      	movs	r3, #0
 8004634:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463e:	461a      	mov	r2, r3
 8004640:	2300      	movs	r3, #0
 8004642:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800464c:	461a      	mov	r2, r3
 800464e:	2300      	movs	r3, #0
 8004650:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465a:	461a      	mov	r2, r3
 800465c:	2300      	movs	r3, #0
 800465e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004668:	461a      	mov	r2, r3
 800466a:	2300      	movs	r3, #0
 800466c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004676:	461a      	mov	r2, r3
 8004678:	2300      	movs	r3, #0
 800467a:	6213      	str	r3, [r2, #32]
  }
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	0800c08c 	.word	0x0800c08c

0800468c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	0800c0e8 	.word	0x0800c0e8

080046ac <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff ffe5 	bl	800468c <_ZN3ros11Subscriber_C1Ev>
 80046c2:	4a0b      	ldr	r2, [pc, #44]	; (80046f0 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3310      	adds	r3, #16
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe fe2b 	bl	8003328 <_ZN13geometry_msgs5PointC1Ev>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	609a      	str	r2, [r3, #8]
  };
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	0800c074 	.word	0x0800c074

080046f4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff ffc1 	bl	800468c <_ZN3ros11Subscriber_C1Ev>
 800470a:	4a0b      	ldr	r2, [pc, #44]	; (8004738 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	330c      	adds	r3, #12
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff fb1d 	bl	8003d54 <_ZN8std_msgs4Int8C1Ev>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	615a      	str	r2, [r3, #20]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	609a      	str	r2, [r3, #8]
  };
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	0800c05c 	.word	0x0800c05c

0800473c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fce5 	bl	8003118 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004754:	461a      	mov	r2, r3
 8004756:	2300      	movs	r3, #0
 8004758:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004762:	461a      	mov	r2, r3
 8004764:	2300      	movs	r3, #0
 8004766:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004770:	461a      	mov	r2, r3
 8004772:	2300      	movs	r3, #0
 8004774:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477e:	461a      	mov	r2, r3
 8004780:	2300      	movs	r3, #0
 8004782:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b18      	cmp	r3, #24
 80047a0:	dc19      	bgt.n	80047d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80047aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10d      	bne.n	80047ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80047b2:	6839      	ldr	r1, [r7, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80047bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	605a      	str	r2, [r3, #4]
        return true;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e004      	b.n	80047d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3301      	adds	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e7e2      	b.n	800479c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 80047d6:	2300      	movs	r3, #0
  }
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b18      	cmp	r3, #24
 80047f6:	dc19      	bgt.n	800482c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10d      	bne.n	8004824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004808:	6839      	ldr	r1, [r7, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	605a      	str	r2, [r3, #4]
        return true;
 8004820:	2301      	movs	r3, #1
 8004822:	e004      	b.n	800482e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3301      	adds	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e7e2      	b.n	80047f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0xe>
    return false;
 800482c:	2300      	movs	r3, #0
  }
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b18      	cmp	r3, #24
 800484c:	dc1e      	bgt.n	800488c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d111      	bne.n	8004884 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	60da      	str	r2, [r3, #12]
        return true;
 8004880:	2301      	movs	r3, #1
 8004882:	e004      	b.n	800488e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	e7dd      	b.n	8004848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800488c:	2300      	movs	r3, #0
  }
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
	  uint32_t c_time = hardware_.time();
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe fd32 	bl	8003310 <_ZN13STM32Hardware4timeEv>
 80048ac:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d905      	bls.n	80048d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00e      	beq.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e4:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d906      	bls.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f4:	461a      	mov	r2, r3
 80048f6:	2300      	movs	r3, #0
 80048f8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d015      	beq.n	8004934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe fcff 	bl	8003310 <_ZN13STM32Hardware4timeEv>
 8004912:	4602      	mov	r2, r0
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	429a      	cmp	r2, r3
 8004922:	bf8c      	ite	hi
 8004924:	2301      	movhi	r3, #1
 8004926:	2300      	movls	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 800492e:	f06f 0301 	mvn.w	r3, #1
 8004932:	e226      	b.n	8004d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	4618      	mov	r0, r3
 800493a:	f7fe fc09 	bl	8003150 <_ZN13STM32Hardware4readEv>
 800493e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f2c0 81ff 	blt.w	8004d46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494e:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4413      	add	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800495c:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004966:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800496a:	2b07      	cmp	r3, #7
 800496c:	d12d      	bne.n	80049ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004974:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8004980:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	b2d1      	uxtb	r1, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	4413      	add	r3, r2
 800498c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004990:	3304      	adds	r3, #4
 8004992:	460a      	mov	r2, r1
 8004994:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80049a0:	3b01      	subs	r3, #1
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049a8:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1a0      	bne.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c0:	461a      	mov	r2, r3
 80049c2:	2308      	movs	r3, #8
 80049c4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80049c8:	e798      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d130      	bne.n	8004a3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2bff      	cmp	r3, #255	; 0xff
 80049dc:	d112      	bne.n	8004a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80049e8:	3301      	adds	r3, #1
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049f0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3314      	adds	r3, #20
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049fe:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8004a02:	e77b      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe fc81 	bl	8003310 <_ZN13STM32Hardware4timeEv>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	bf8c      	ite	hi
 8004a1c:	2301      	movhi	r3, #1
 8004a1e:	2300      	movls	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f43f af6a 	beq.w	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8004a34:	f06f 0301 	mvn.w	r3, #1
 8004a38:	e1a3      	b.n	8004d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a40:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d121      	bne.n	8004a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2bfe      	cmp	r3, #254	; 0xfe
 8004a4c:	d10b      	bne.n	8004a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a54:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004a58:	3301      	adds	r3, #1
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a60:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004a64:	e74a      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f47f af3c 	bne.w	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f98c 	bl	8004da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004a8a:	e737      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a92:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d120      	bne.n	8004adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004abc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ac8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004ada:	e70f      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d118      	bne.n	8004b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af0:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	4413      	add	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b00:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b0a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004b0e:	3301      	adds	r3, #1
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b16:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004b1a:	e6ef      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b22:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d11f      	bne.n	8004b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b30:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004b34:	425a      	negs	r2, r3
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	bf58      	it	pl
 8004b3c:	4253      	negpl	r3, r2
 8004b3e:	2bff      	cmp	r3, #255	; 0xff
 8004b40:	d10b      	bne.n	8004b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b48:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b54:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004b58:	e6d0      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b60:	461a      	mov	r2, r3
 8004b62:	2300      	movs	r3, #0
 8004b64:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004b68:	e6c8      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b70:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004b74:	2b05      	cmp	r3, #5
 8004b76:	d119      	bne.n	8004bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7e:	461a      	mov	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b8c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004b90:	3301      	adds	r3, #1
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b98:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004baa:	e6a7      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d123      	bne.n	8004c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc0:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	4413      	add	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bd0:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2307      	movs	r3, #7
 8004bde:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be8:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f47f ae85 	bne.w	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	2308      	movs	r3, #8
 8004bfc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004c00:	e67c      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c08:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	f47f ae75 	bne.w	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c26:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004c2a:	425a      	negs	r2, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	bf58      	it	pl
 8004c32:	4253      	negpl	r3, r2
 8004c34:	2bff      	cmp	r3, #255	; 0xff
 8004c36:	f47f ae61 	bne.w	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c40:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d116      	bne.n	8004c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8aa 	bl	8004da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f8c6 	bl	8004de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8004c70:	f04f 33ff 	mov.w	r3, #4294967295
 8004c74:	e085      	b.n	8004d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004c80:	2b0a      	cmp	r3, #10
 8004c82:	d108      	bne.n	8004c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f988 	bl	8004fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004c94:	e632      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004ca0:	2b06      	cmp	r3, #6
 8004ca2:	d112      	bne.n	8004cca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8004caa:	3314      	adds	r3, #20
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	f502 5281 	add.w	r2, r2, #4128	; 0x1020
 8004cb2:	3204      	adds	r2, #4
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe f837 	bl	8002d2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004cc8:	e618      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004cd4:	2b0b      	cmp	r3, #11
 8004cd6:	d106      	bne.n	8004ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004ce4:	e60a      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cec:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004cf0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f43f adfc 	beq.w	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d0a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004d0e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004d18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d22:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004d26:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d3e:	3304      	adds	r3, #4
 8004d40:	4619      	mov	r1, r3
 8004d42:	4790      	blx	r2
    while (true)
 8004d44:	e5da      	b.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8004d46:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4e:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d014      	beq.n	8004d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d909      	bls.n	8004d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f818 	bl	8004da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d78:	461a      	mov	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8004d80:	2300      	movs	r3, #0
  }
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3304      	adds	r3, #4
  }
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b086      	sub	sp, #24
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004daa:	f107 030c 	add.w	r3, r7, #12
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fd fb22 	bl	80023f8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f107 020c 	add.w	r2, r7, #12
 8004dbe:	210a      	movs	r1, #10
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4798      	blx	r3
    rt_time = hardware_.time();
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fe faa1 	bl	8003310 <_ZN13STM32Hardware4timeEv>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd6:	615a      	str	r2, [r3, #20]
  }
 8004dd8:	bf00      	nop
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b08b      	sub	sp, #44	; 0x2c
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004de8:	f107 030c 	add.w	r3, r7, #12
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fd fbf3 	bl	80025d8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004df2:	2300      	movs	r3, #0
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	2b18      	cmp	r3, #24
 8004dfa:	dc63      	bgt.n	8004ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d056      	beq.n	8004ebc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	6859      	ldr	r1, [r3, #4]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4608      	mov	r0, r1
 8004e5c:	4798      	blx	r3
 8004e5e:	4603      	mov	r3, r0
 8004e60:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	6859      	ldr	r1, [r3, #4]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4608      	mov	r0, r1
 8004e8a:	4798      	blx	r3
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e94:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681c      	ldr	r4, [r3, #0]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe f8f5 	bl	800309a <_ZN3ros9Publisher15getEndpointTypeEv>
 8004eb0:	4601      	mov	r1, r0
 8004eb2:	f107 030c 	add.w	r3, r7, #12
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec2:	e798      	b.n	8004df6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	2b18      	cmp	r3, #24
 8004ecc:	dc5f      	bgt.n	8004f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d053      	beq.n	8004f86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f04:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f10:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4608      	mov	r0, r1
 8004f20:	4798      	blx	r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004f2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f36:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4608      	mov	r0, r1
 8004f46:	4798      	blx	r3
 8004f48:	4603      	mov	r3, r0
 8004f4a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f50:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681c      	ldr	r4, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3304      	adds	r3, #4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4608      	mov	r0, r1
 8004f78:	4798      	blx	r3
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	f107 030c 	add.w	r3, r7, #12
 8004f80:	461a      	mov	r2, r3
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	3301      	adds	r3, #1
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8c:	e79c      	b.n	8004ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004f9a:	bf00      	nop
 8004f9c:	372c      	adds	r7, #44	; 0x2c
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd90      	pop	{r4, r7, pc}
	...

08004fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004fae:	f107 0308 	add.w	r3, r7, #8
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fd fa20 	bl	80023f8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fe f9a7 	bl	8003310 <_ZN13STM32Hardware4timeEv>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004fd0:	f107 0308 	add.w	r3, r7, #8
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fd fa7e 	bl	80024d8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	4915      	ldr	r1, [pc, #84]	; (8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004fe2:	fba1 1303 	umull	r1, r3, r1, r3
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	4413      	add	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004fec:	6939      	ldr	r1, [r7, #16]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4b11      	ldr	r3, [pc, #68]	; (8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004ff2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ffc:	fb00 f303 	mul.w	r3, r0, r3
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	4a0e      	ldr	r2, [pc, #56]	; (800503c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8005004:	fb02 f303 	mul.w	r3, r2, r3
 8005008:	440b      	add	r3, r1
 800500a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800500c:	f107 0308 	add.w	r3, r7, #8
 8005010:	3304      	adds	r3, #4
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f8bf 	bl	8005198 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3304      	adds	r3, #4
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe f976 	bl	8003310 <_ZN13STM32Hardware4timeEv>
 8005024:	4602      	mov	r2, r0
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8005030:	bf00      	nop
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	10624dd3 	.word	0x10624dd3
 800503c:	000f4240 	.word	0x000f4240

08005040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b63      	cmp	r3, #99	; 0x63
 8005050:	dd0b      	ble.n	800506a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005058:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800505c:	f083 0301 	eor.w	r3, r3, #1
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8005066:	2300      	movs	r3, #0
 8005068:	e090      	b.n	800518c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005076:	3304      	adds	r3, #4
 8005078:	3307      	adds	r3, #7
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	4790      	blx	r2
 8005080:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005088:	22ff      	movs	r2, #255	; 0xff
 800508a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005094:	22fe      	movs	r2, #254	; 0xfe
 8005096:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a4:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	0a1b      	lsrs	r3, r3, #8
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b8:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c2:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050cc:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 80050d0:	4413      	add	r3, r2
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	43db      	mvns	r3, r3
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ec:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	b21b      	sxth	r3, r3
 80050f4:	121b      	asrs	r3, r3, #8
 80050f6:	b21b      	sxth	r3, r3
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005100:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005108:	2305      	movs	r3, #5
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	3306      	adds	r3, #6
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	429a      	cmp	r2, r3
 8005114:	dc0e      	bgt.n	8005134 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	4413      	add	r3, r2
 800511c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005120:	3304      	adds	r3, #4
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	3301      	adds	r3, #1
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e7eb      	b.n	800510c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	3307      	adds	r3, #7
 8005138:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	425a      	negs	r2, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	bf58      	it	pl
 8005144:	4253      	negpl	r3, r2
 8005146:	b2da      	uxtb	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	1c59      	adds	r1, r3, #1
 800514c:	6179      	str	r1, [r7, #20]
 800514e:	43d2      	mvns	r2, r2
 8005150:	b2d1      	uxtb	r1, r2
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800515a:	3304      	adds	r3, #4
 800515c:	460a      	mov	r2, r1
 800515e:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005166:	dc0b      	bgt.n	8005180 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	1d18      	adds	r0, r3, #4
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005172:	3304      	adds	r3, #4
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4619      	mov	r1, r3
 8005178:	f7fe f880 	bl	800327c <_ZN13STM32Hardware5writeEPhi>
      return l;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	e005      	b.n	800518c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005180:	4904      	ldr	r1, [pc, #16]	; (8005194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f84c 	bl	8005220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8005188:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800518c:	4618      	mov	r0, r3
 800518e:	3720      	adds	r7, #32
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	0800bfa4 	.word	0x0800bfa4

08005198 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3304      	adds	r3, #4
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe f8b2 	bl	8003310 <_ZN13STM32Hardware4timeEv>
 80051ac:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4917      	ldr	r1, [pc, #92]	; (8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80051b6:	fba1 1303 	umull	r1, r3, r1, r3
 80051ba:	099b      	lsrs	r3, r3, #6
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051c6:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6859      	ldr	r1, [r3, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4b11      	ldr	r3, [pc, #68]	; (8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80051d0:	fba3 0302 	umull	r0, r3, r3, r2
 80051d4:	099b      	lsrs	r3, r3, #6
 80051d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051da:	fb00 f303 	mul.w	r3, r0, r3
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	4a0d      	ldr	r2, [pc, #52]	; (8005218 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	1aca      	subs	r2, r1, r3
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 80051ea:	4413      	add	r3, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051f2:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051fa:	3318      	adds	r3, #24
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005202:	321c      	adds	r2, #28
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f7fb fdfe 	bl	8000e08 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	10624dd3 	.word	0x10624dd3
 8005218:	000f4240 	.word	0x000f4240
 800521c:	3b9aca00 	.word	0x3b9aca00

08005220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	2103      	movs	r1, #3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f804 	bl	800523c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8005234:	bf00      	nop
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	460b      	mov	r3, r1
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800524a:	f107 0314 	add.w	r3, r7, #20
 800524e:	4618      	mov	r0, r3
 8005250:	f7fd fb86 	bl	8002960 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005254:	7afb      	ldrb	r3, [r7, #11]
 8005256:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f107 0214 	add.w	r2, r7, #20
 8005266:	2107      	movs	r1, #7
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	4798      	blx	r3
  }
 800526c:	bf00      	nop
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <_Z41__static_initialization_and_destruction_0ii>:
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d14c      	bne.n	800531e <_Z41__static_initialization_and_destruction_0ii+0xaa>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800528a:	4293      	cmp	r3, r2
 800528c:	d147      	bne.n	800531e <_Z41__static_initialization_and_destruction_0ii+0xaa>
std_msgs::Int8 laji,pitches,st,badminton_ok;
 800528e:	4826      	ldr	r0, [pc, #152]	; (8005328 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8005290:	f7fe fd60 	bl	8003d54 <_ZN8std_msgs4Int8C1Ev>
 8005294:	4825      	ldr	r0, [pc, #148]	; (800532c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8005296:	f7fe fd5d 	bl	8003d54 <_ZN8std_msgs4Int8C1Ev>
 800529a:	4825      	ldr	r0, [pc, #148]	; (8005330 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800529c:	f7fe fd5a 	bl	8003d54 <_ZN8std_msgs4Int8C1Ev>
 80052a0:	4824      	ldr	r0, [pc, #144]	; (8005334 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80052a2:	f7fe fd57 	bl	8003d54 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int64 button_reset;
 80052a6:	4824      	ldr	r0, [pc, #144]	; (8005338 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80052a8:	f7fe fdc0 	bl	8003e2c <_ZN8std_msgs5Int64C1Ev>
ros::NodeHandle nh;
 80052ac:	4823      	ldr	r0, [pc, #140]	; (800533c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80052ae:	f7ff f953 	bl	8004558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Point> sub_angle("/cmd_angle", angle_callback);
 80052b2:	2301      	movs	r3, #1
 80052b4:	4a22      	ldr	r2, [pc, #136]	; (8005340 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80052b6:	4923      	ldr	r1, [pc, #140]	; (8005344 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80052b8:	4823      	ldr	r0, [pc, #140]	; (8005348 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80052ba:	f7ff f9f7 	bl	80046ac <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> sub_ori("/cmd_ori", ori_callback);
 80052be:	2301      	movs	r3, #1
 80052c0:	4a22      	ldr	r2, [pc, #136]	; (800534c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80052c2:	4923      	ldr	r1, [pc, #140]	; (8005350 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80052c4:	4823      	ldr	r0, [pc, #140]	; (8005354 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80052c6:	f7ff fa15 	bl	80046f4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_st("st_ok", &st);
 80052ca:	2300      	movs	r3, #0
 80052cc:	4a18      	ldr	r2, [pc, #96]	; (8005330 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80052ce:	4922      	ldr	r1, [pc, #136]	; (8005358 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80052d0:	4822      	ldr	r0, [pc, #136]	; (800535c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80052d2:	f7fd feb7 	bl	8003044 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_pitches("pitches", &pitches);
 80052d6:	2300      	movs	r3, #0
 80052d8:	4a14      	ldr	r2, [pc, #80]	; (800532c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80052da:	4921      	ldr	r1, [pc, #132]	; (8005360 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80052dc:	4821      	ldr	r0, [pc, #132]	; (8005364 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80052de:	f7fd feb1 	bl	8003044 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> sub_laji("cmd_laji", laji_callback);
 80052e2:	2301      	movs	r3, #1
 80052e4:	4a20      	ldr	r2, [pc, #128]	; (8005368 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80052e6:	4921      	ldr	r1, [pc, #132]	; (800536c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80052e8:	4821      	ldr	r0, [pc, #132]	; (8005370 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80052ea:	f7ff fa03 	bl	80046f4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_laji("laji_ok", &laji);
 80052ee:	2300      	movs	r3, #0
 80052f0:	4a0d      	ldr	r2, [pc, #52]	; (8005328 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80052f2:	4920      	ldr	r1, [pc, #128]	; (8005374 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80052f4:	4820      	ldr	r0, [pc, #128]	; (8005378 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80052f6:	f7fd fea5 	bl	8003044 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_reset("reset", &button_reset);
 80052fa:	2300      	movs	r3, #0
 80052fc:	4a0e      	ldr	r2, [pc, #56]	; (8005338 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80052fe:	491f      	ldr	r1, [pc, #124]	; (800537c <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8005300:	481f      	ldr	r0, [pc, #124]	; (8005380 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8005302:	f7fd fe9f 	bl	8003044 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> sub_badminton("dis", badminton_callback);
 8005306:	2301      	movs	r3, #1
 8005308:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800530a:	491f      	ldr	r1, [pc, #124]	; (8005388 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 800530c:	481f      	ldr	r0, [pc, #124]	; (800538c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800530e:	f7ff f9f1 	bl	80046f4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_badminton("badminton_ok", &badminton_ok);
 8005312:	2300      	movs	r3, #0
 8005314:	4a07      	ldr	r2, [pc, #28]	; (8005334 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8005316:	491e      	ldr	r1, [pc, #120]	; (8005390 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8005318:	481e      	ldr	r0, [pc, #120]	; (8005394 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800531a:	f7fd fe93 	bl	8003044 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800531e:	bf00      	nop
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	200004c4 	.word	0x200004c4
 800532c:	200004cc 	.word	0x200004cc
 8005330:	200004d4 	.word	0x200004d4
 8005334:	200004dc 	.word	0x200004dc
 8005338:	200004e8 	.word	0x200004e8
 800533c:	20000504 	.word	0x20000504
 8005340:	080041a9 	.word	0x080041a9
 8005344:	0800bfe0 	.word	0x0800bfe0
 8005348:	20001a40 	.word	0x20001a40
 800534c:	08004211 	.word	0x08004211
 8005350:	0800bfec 	.word	0x0800bfec
 8005354:	20001a78 	.word	0x20001a78
 8005358:	0800bff8 	.word	0x0800bff8
 800535c:	20001a94 	.word	0x20001a94
 8005360:	0800c000 	.word	0x0800c000
 8005364:	20001aa8 	.word	0x20001aa8
 8005368:	080041ed 	.word	0x080041ed
 800536c:	0800c008 	.word	0x0800c008
 8005370:	20001abc 	.word	0x20001abc
 8005374:	0800c014 	.word	0x0800c014
 8005378:	20001ad8 	.word	0x20001ad8
 800537c:	0800c01c 	.word	0x0800c01c
 8005380:	20001aec 	.word	0x20001aec
 8005384:	08004235 	.word	0x08004235
 8005388:	0800c024 	.word	0x0800c024
 800538c:	20001b00 	.word	0x20001b00
 8005390:	0800c028 	.word	0x0800c028
 8005394:	20001b1c 	.word	0x20001b1c

08005398 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	330c      	adds	r3, #12
 80053a6:	6839      	ldr	r1, [r7, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fe fd03 	bl	8003db4 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	320c      	adds	r2, #12
 80053b6:	4610      	mov	r0, r2
 80053b8:	4798      	blx	r3
  }
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
  }
 80053ce:	4618      	mov	r0, r3
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	330c      	adds	r3, #12
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe fd04 	bl	8003df4 <_ZN8std_msgs4Int87getTypeEv>
 80053ec:	4603      	mov	r3, r0
  }
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	330c      	adds	r3, #12
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fd04 	bl	8003e10 <_ZN8std_msgs4Int86getMD5Ev>
 8005408:	4603      	mov	r3, r0
  }
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3310      	adds	r3, #16
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe f91b 	bl	800365e <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	3210      	adds	r2, #16
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
  }
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3310      	adds	r3, #16
 8005460:	4618      	mov	r0, r3
 8005462:	f7fe fc5b 	bl	8003d1c <_ZN13geometry_msgs5Point7getTypeEv>
 8005466:	4603      	mov	r3, r0
  }
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3310      	adds	r3, #16
 800547c:	4618      	mov	r0, r3
 800547e:	f7fe fc5b 	bl	8003d38 <_ZN13geometry_msgs5Point6getMD5Ev>
 8005482:	4603      	mov	r3, r0
  }
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
    return configured_;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <_GLOBAL__sub_I_flag>:
 80054aa:	b580      	push	{r7, lr}
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054b2:	2001      	movs	r0, #1
 80054b4:	f7ff fede 	bl	8005274 <_Z41__static_initialization_and_destruction_0ii>
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <_Z9UART_Sendh>:

#include "servo.h"
#include"math.h"
extern UART_HandleTypeDef huart3;
int Checksum_Calc, count=0;
void UART_Send(uint8_t u8_data){
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	71fb      	strb	r3, [r7, #7]
 uint8_t *u8_pointer = &u8_data;
 80054c6:	1dfb      	adds	r3, r7, #7
 80054c8:	60fb      	str	r3, [r7, #12]
 HAL_UART_Transmit(&huart3, u8_pointer, 1,100);
 80054ca:	2364      	movs	r3, #100	; 0x64
 80054cc:	2201      	movs	r2, #1
 80054ce:	68f9      	ldr	r1, [r7, #12]
 80054d0:	4806      	ldr	r0, [pc, #24]	; (80054ec <_Z9UART_Sendh+0x30>)
 80054d2:	f005 f835 	bl	800a540 <HAL_UART_Transmit>

 Checksum_Calc += u8_data;
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	461a      	mov	r2, r3
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <_Z9UART_Sendh+0x34>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4413      	add	r3, r2
 80054e0:	4a03      	ldr	r2, [pc, #12]	; (80054f0 <_Z9UART_Sendh+0x34>)
 80054e2:	6013      	str	r3, [r2, #0]
}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000360 	.word	0x20000360
 80054f0:	20001b30 	.word	0x20001b30

080054f4 <_Z26UART_Send_SetMotorPositionttt>:

void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time){
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	80fb      	strh	r3, [r7, #6]
 80054fe:	460b      	mov	r3, r1
 8005500:	80bb      	strh	r3, [r7, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	807b      	strh	r3, [r7, #2]
 Checksum_Calc = 0;
 8005506:	4b1c      	ldr	r3, [pc, #112]	; (8005578 <_Z26UART_Send_SetMotorPositionttt+0x84>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
 UART_Send(0x80 + motorId);
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	3b80      	subs	r3, #128	; 0x80
 8005512:	b2db      	uxtb	r3, r3
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff ffd1 	bl	80054bc <_Z9UART_Sendh>
 UART_Send(0x83);
 800551a:	2083      	movs	r0, #131	; 0x83
 800551c:	f7ff ffce 	bl	80054bc <_Z9UART_Sendh>
 UART_Send(0x05);
 8005520:	2005      	movs	r0, #5
 8005522:	f7ff ffcb 	bl	80054bc <_Z9UART_Sendh>
 UART_Send((Position / 256)& 0x7F);
 8005526:	88bb      	ldrh	r3, [r7, #4]
 8005528:	0a1b      	lsrs	r3, r3, #8
 800552a:	b29b      	uxth	r3, r3
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005532:	b2db      	uxtb	r3, r3
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff ffc1 	bl	80054bc <_Z9UART_Sendh>
 UART_Send(Position % 256);
 800553a:	88bb      	ldrh	r3, [r7, #4]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff ffbc 	bl	80054bc <_Z9UART_Sendh>
 UART_Send((Time / 256)& 0x7F);
 8005544:	887b      	ldrh	r3, [r7, #2]
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	b29b      	uxth	r3, r3
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005550:	b2db      	uxtb	r3, r3
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff ffb2 	bl	80054bc <_Z9UART_Sendh>
 UART_Send(Time % 256);
 8005558:	887b      	ldrh	r3, [r7, #2]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff ffad 	bl	80054bc <_Z9UART_Sendh>
 UART_Send(Checksum_Calc);
 8005562:	4b05      	ldr	r3, [pc, #20]	; (8005578 <_Z26UART_Send_SetMotorPositionttt+0x84>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff ffa7 	bl	80054bc <_Z9UART_Sendh>
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20001b30 	.word	0x20001b30
 800557c:	00000000 	.word	0x00000000

08005580 <_Z7shooterv>:
int st_set = 0;

int run = 1;
int run_once = 1;

void shooter(){
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0

	//encoder -> angle
	enc_st = __HAL_TIM_GetCounter(&htim1);
 8005584:	4b9c      	ldr	r3, [pc, #624]	; (80057f8 <_Z7shooterv+0x278>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	b21a      	sxth	r2, r3
 800558c:	4b9b      	ldr	r3, [pc, #620]	; (80057fc <_Z7shooterv+0x27c>)
 800558e:	801a      	strh	r2, [r3, #0]
	angle_st += 360*((double)enc_st/(4*resolution_st*ratio_st));
 8005590:	4b9a      	ldr	r3, [pc, #616]	; (80057fc <_Z7shooterv+0x27c>)
 8005592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005596:	4618      	mov	r0, r3
 8005598:	f7fa ff90 	bl	80004bc <__aeabi_i2d>
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	4b97      	ldr	r3, [pc, #604]	; (8005800 <_Z7shooterv+0x280>)
 80055a2:	f7fb f91f 	bl	80007e4 <__aeabi_ddiv>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4610      	mov	r0, r2
 80055ac:	4619      	mov	r1, r3
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	4b94      	ldr	r3, [pc, #592]	; (8005804 <_Z7shooterv+0x284>)
 80055b4:	f7fa ffec 	bl	8000590 <__aeabi_dmul>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4610      	mov	r0, r2
 80055be:	4619      	mov	r1, r3
 80055c0:	4b91      	ldr	r3, [pc, #580]	; (8005808 <_Z7shooterv+0x288>)
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f7fa fe2d 	bl	8000224 <__adddf3>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	498e      	ldr	r1, [pc, #568]	; (8005808 <_Z7shooterv+0x288>)
 80055d0:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCounter(&htim1, 0);
 80055d4:	4b88      	ldr	r3, [pc, #544]	; (80057f8 <_Z7shooterv+0x278>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2200      	movs	r2, #0
 80055da:	625a      	str	r2, [r3, #36]	; 0x24



	//transfer turns into lengths
	actual_length = (angle_st/360)*(2*M_PI*radius);
 80055dc:	4b8a      	ldr	r3, [pc, #552]	; (8005808 <_Z7shooterv+0x288>)
 80055de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	4b87      	ldr	r3, [pc, #540]	; (8005804 <_Z7shooterv+0x284>)
 80055e8:	f7fb f8fc 	bl	80007e4 <__aeabi_ddiv>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4610      	mov	r0, r2
 80055f2:	4619      	mov	r1, r3
 80055f4:	a37e      	add	r3, pc, #504	; (adr r3, 80057f0 <_Z7shooterv+0x270>)
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	f7fa ffc9 	bl	8000590 <__aeabi_dmul>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4982      	ldr	r1, [pc, #520]	; (800580c <_Z7shooterv+0x28c>)
 8005604:	e9c1 2300 	strd	r2, r3, [r1]
//	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,600+10*angle);
//	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,600+10*angle);

	//If got a new target
	if(target_length > 0){
 8005608:	4b81      	ldr	r3, [pc, #516]	; (8005810 <_Z7shooterv+0x290>)
 800560a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	f7fb fa4b 	bl	8000ab0 <__aeabi_dcmpgt>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d100      	bne.n	8005622 <_Z7shooterv+0xa2>
					}
				}
			}
		}
	}
}
 8005620:	e0e1      	b.n	80057e6 <_Z7shooterv+0x266>
		if(check_hook == 0){
 8005622:	4b7c      	ldr	r3, [pc, #496]	; (8005814 <_Z7shooterv+0x294>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d110      	bne.n	800564c <_Z7shooterv+0xcc>
			if(run_once == 1){
 800562a:	4b7b      	ldr	r3, [pc, #492]	; (8005818 <_Z7shooterv+0x298>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d109      	bne.n	8005646 <_Z7shooterv+0xc6>
				UART_Send_SetMotorPosition(1, 1310, 300); //Hook -> 1310
 8005632:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005636:	f240 511e 	movw	r1, #1310	; 0x51e
 800563a:	2001      	movs	r0, #1
 800563c:	f7ff ff5a 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>
				run_once = 0;
 8005640:	4b75      	ldr	r3, [pc, #468]	; (8005818 <_Z7shooterv+0x298>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
			check_hook = 1;
 8005646:	4b73      	ldr	r3, [pc, #460]	; (8005814 <_Z7shooterv+0x294>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]
		if((target_length - actual_length) > 0){
 800564c:	4b70      	ldr	r3, [pc, #448]	; (8005810 <_Z7shooterv+0x290>)
 800564e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005652:	4b6e      	ldr	r3, [pc, #440]	; (800580c <_Z7shooterv+0x28c>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fa fde2 	bl	8000220 <__aeabi_dsub>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	f7fb fa20 	bl	8000ab0 <__aeabi_dcmpgt>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d01c      	beq.n	80056b0 <_Z7shooterv+0x130>
			if(delay <= 300) delay++;
 8005676:	4b69      	ldr	r3, [pc, #420]	; (800581c <_Z7shooterv+0x29c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800567e:	dc05      	bgt.n	800568c <_Z7shooterv+0x10c>
 8005680:	4b66      	ldr	r3, [pc, #408]	; (800581c <_Z7shooterv+0x29c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	4a65      	ldr	r2, [pc, #404]	; (800581c <_Z7shooterv+0x29c>)
 8005688:	6013      	str	r3, [r2, #0]
}
 800568a:	e0ac      	b.n	80057e6 <_Z7shooterv+0x266>
			else if(delay > 300){
 800568c:	4b63      	ldr	r3, [pc, #396]	; (800581c <_Z7shooterv+0x29c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005694:	f340 80a7 	ble.w	80057e6 <_Z7shooterv+0x266>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,GPIO_PIN_SET); //Down
 8005698:	2201      	movs	r2, #1
 800569a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800569e:	4860      	ldr	r0, [pc, #384]	; (8005820 <_Z7shooterv+0x2a0>)
 80056a0:	f002 fe64 	bl	800836c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 80056a4:	2200      	movs	r2, #0
 80056a6:	2180      	movs	r1, #128	; 0x80
 80056a8:	485d      	ldr	r0, [pc, #372]	; (8005820 <_Z7shooterv+0x2a0>)
 80056aa:	f002 fe5f 	bl	800836c <HAL_GPIO_WritePin>
}
 80056ae:	e09a      	b.n	80057e6 <_Z7shooterv+0x266>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,GPIO_PIN_RESET); //Stop
 80056b0:	2200      	movs	r2, #0
 80056b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056b6:	485a      	ldr	r0, [pc, #360]	; (8005820 <_Z7shooterv+0x2a0>)
 80056b8:	f002 fe58 	bl	800836c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 80056bc:	2200      	movs	r2, #0
 80056be:	2180      	movs	r1, #128	; 0x80
 80056c0:	4857      	ldr	r0, [pc, #348]	; (8005820 <_Z7shooterv+0x2a0>)
 80056c2:	f002 fe53 	bl	800836c <HAL_GPIO_WritePin>
			st_set = 1;
 80056c6:	4b57      	ldr	r3, [pc, #348]	; (8005824 <_Z7shooterv+0x2a4>)
 80056c8:	2201      	movs	r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
			if(ev_ok == 222 && hz_ok == 222 && trigger == 1){
 80056cc:	4b56      	ldr	r3, [pc, #344]	; (8005828 <_Z7shooterv+0x2a8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2bde      	cmp	r3, #222	; 0xde
 80056d2:	f040 8088 	bne.w	80057e6 <_Z7shooterv+0x266>
 80056d6:	4b55      	ldr	r3, [pc, #340]	; (800582c <_Z7shooterv+0x2ac>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2bde      	cmp	r3, #222	; 0xde
 80056dc:	f040 8083 	bne.w	80057e6 <_Z7shooterv+0x266>
 80056e0:	4b53      	ldr	r3, [pc, #332]	; (8005830 <_Z7shooterv+0x2b0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d17e      	bne.n	80057e6 <_Z7shooterv+0x266>
				if(check_fire == 0){
 80056e8:	4b52      	ldr	r3, [pc, #328]	; (8005834 <_Z7shooterv+0x2b4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11d      	bne.n	800572c <_Z7shooterv+0x1ac>
					delay++;
 80056f0:	4b4a      	ldr	r3, [pc, #296]	; (800581c <_Z7shooterv+0x29c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3301      	adds	r3, #1
 80056f6:	4a49      	ldr	r2, [pc, #292]	; (800581c <_Z7shooterv+0x29c>)
 80056f8:	6013      	str	r3, [r2, #0]
					if(delay > 600){
 80056fa:	4b48      	ldr	r3, [pc, #288]	; (800581c <_Z7shooterv+0x29c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005702:	dd13      	ble.n	800572c <_Z7shooterv+0x1ac>
						trigger = 1;
 8005704:	4b4a      	ldr	r3, [pc, #296]	; (8005830 <_Z7shooterv+0x2b0>)
 8005706:	2201      	movs	r2, #1
 8005708:	601a      	str	r2, [r3, #0]
						if(run_once == 0){
 800570a:	4b43      	ldr	r3, [pc, #268]	; (8005818 <_Z7shooterv+0x298>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d109      	bne.n	8005726 <_Z7shooterv+0x1a6>
							UART_Send_SetMotorPosition(1, 1550, 300); //Fire -> 1525
 8005712:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005716:	f240 610e 	movw	r1, #1550	; 0x60e
 800571a:	2001      	movs	r0, #1
 800571c:	f7ff feea 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>
							run_once = 1;
 8005720:	4b3d      	ldr	r3, [pc, #244]	; (8005818 <_Z7shooterv+0x298>)
 8005722:	2201      	movs	r2, #1
 8005724:	601a      	str	r2, [r3, #0]
						check_fire = 1;
 8005726:	4b43      	ldr	r3, [pc, #268]	; (8005834 <_Z7shooterv+0x2b4>)
 8005728:	2201      	movs	r2, #1
 800572a:	601a      	str	r2, [r3, #0]
				if(check_fire == 1){
 800572c:	4b41      	ldr	r3, [pc, #260]	; (8005834 <_Z7shooterv+0x2b4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d158      	bne.n	80057e6 <_Z7shooterv+0x266>
					if(delay > 600 && delay <= 1000)	delay++;
 8005734:	4b39      	ldr	r3, [pc, #228]	; (800581c <_Z7shooterv+0x29c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800573c:	dd0a      	ble.n	8005754 <_Z7shooterv+0x1d4>
 800573e:	4b37      	ldr	r3, [pc, #220]	; (800581c <_Z7shooterv+0x29c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005746:	dc05      	bgt.n	8005754 <_Z7shooterv+0x1d4>
 8005748:	4b34      	ldr	r3, [pc, #208]	; (800581c <_Z7shooterv+0x29c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	4a33      	ldr	r2, [pc, #204]	; (800581c <_Z7shooterv+0x29c>)
 8005750:	6013      	str	r3, [r2, #0]
}
 8005752:	e048      	b.n	80057e6 <_Z7shooterv+0x266>
					else if(delay > 1000){
 8005754:	4b31      	ldr	r3, [pc, #196]	; (800581c <_Z7shooterv+0x29c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800575c:	dd43      	ble.n	80057e6 <_Z7shooterv+0x266>
						check_hook = 0;
 800575e:	4b2d      	ldr	r3, [pc, #180]	; (8005814 <_Z7shooterv+0x294>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
						target_length = 0.0;
 8005764:	492a      	ldr	r1, [pc, #168]	; (8005810 <_Z7shooterv+0x290>)
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	e9c1 2300 	strd	r2, r3, [r1]
						actual_length = 0.0;
 8005772:	4926      	ldr	r1, [pc, #152]	; (800580c <_Z7shooterv+0x28c>)
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	e9c1 2300 	strd	r2, r3, [r1]
						angle_st = 0.0;
 8005780:	4921      	ldr	r1, [pc, #132]	; (8005808 <_Z7shooterv+0x288>)
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	e9c1 2300 	strd	r2, r3, [r1]
						trigger = 0;
 800578e:	4b28      	ldr	r3, [pc, #160]	; (8005830 <_Z7shooterv+0x2b0>)
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
						ros_st = 0;
 8005794:	4928      	ldr	r1, [pc, #160]	; (8005838 <_Z7shooterv+0x2b8>)
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	e9c1 2300 	strd	r2, r3, [r1]
						st_set = 0;
 80057a2:	4b20      	ldr	r3, [pc, #128]	; (8005824 <_Z7shooterv+0x2a4>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
						UART_Send_SetMotorPosition(1, 1400, 300); //Fire -> waiting
 80057a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80057ac:	f44f 61af 	mov.w	r1, #1400	; 0x578
 80057b0:	2001      	movs	r0, #1
 80057b2:	f7ff fe9f 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>
						if(run == 1 && return_value < 4)	step = 1;
 80057b6:	4b21      	ldr	r3, [pc, #132]	; (800583c <_Z7shooterv+0x2bc>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d107      	bne.n	80057ce <_Z7shooterv+0x24e>
 80057be:	4b20      	ldr	r3, [pc, #128]	; (8005840 <_Z7shooterv+0x2c0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	dc03      	bgt.n	80057ce <_Z7shooterv+0x24e>
 80057c6:	4b1f      	ldr	r3, [pc, #124]	; (8005844 <_Z7shooterv+0x2c4>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	e002      	b.n	80057d4 <_Z7shooterv+0x254>
						else step = 0;
 80057ce:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <_Z7shooterv+0x2c4>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
						if(return_value < 4 )	return_value ++;
 80057d4:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <_Z7shooterv+0x2c0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b03      	cmp	r3, #3
 80057da:	dc04      	bgt.n	80057e6 <_Z7shooterv+0x266>
 80057dc:	4b18      	ldr	r3, [pc, #96]	; (8005840 <_Z7shooterv+0x2c0>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3301      	adds	r3, #1
 80057e2:	4a17      	ldr	r2, [pc, #92]	; (8005840 <_Z7shooterv+0x2c0>)
 80057e4:	6013      	str	r3, [r2, #0]
}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	f3af 8000 	nop.w
 80057f0:	2955385e 	.word	0x2955385e
 80057f4:	404f6a7a 	.word	0x404f6a7a
 80057f8:	20000124 	.word	0x20000124
 80057fc:	20001b58 	.word	0x20001b58
 8005800:	40af4000 	.word	0x40af4000
 8005804:	40768000 	.word	0x40768000
 8005808:	20001b60 	.word	0x20001b60
 800580c:	20001b40 	.word	0x20001b40
 8005810:	20001b38 	.word	0x20001b38
 8005814:	20001b48 	.word	0x20001b48
 8005818:	20000010 	.word	0x20000010
 800581c:	20001b50 	.word	0x20001b50
 8005820:	40020800 	.word	0x40020800
 8005824:	20001b6c 	.word	0x20001b6c
 8005828:	20001b90 	.word	0x20001b90
 800582c:	20000014 	.word	0x20000014
 8005830:	20001b68 	.word	0x20001b68
 8005834:	20001b4c 	.word	0x20001b4c
 8005838:	20001bc8 	.word	0x20001bc8
 800583c:	2000000c 	.word	0x2000000c
 8005840:	20001b54 	.word	0x20001b54
 8005844:	2000004c 	.word	0x2000004c

08005848 <_Z12shooter_basev>:
double D_ev = 0.005;

int once_hz = 1;
int once_ev = 1;

void shooter_base(){
 8005848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800584c:	af00      	add	r7, sp, #0
//
//	//record et
//	last_et_hz = et_hz;

//elevation angle
	enc_ev = __HAL_TIM_GetCounter(&htim3);
 800584e:	4bae      	ldr	r3, [pc, #696]	; (8005b08 <_Z12shooter_basev+0x2c0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	b21a      	sxth	r2, r3
 8005856:	4bad      	ldr	r3, [pc, #692]	; (8005b0c <_Z12shooter_basev+0x2c4>)
 8005858:	801a      	strh	r2, [r3, #0]
	angle_ev += 360*((double)enc_ev/(4*resolution_ev*ratio_ev))*2;	//PV
 800585a:	4bac      	ldr	r3, [pc, #688]	; (8005b0c <_Z12shooter_basev+0x2c4>)
 800585c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005860:	4618      	mov	r0, r3
 8005862:	f7fa fe2b 	bl	80004bc <__aeabi_i2d>
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	4ba9      	ldr	r3, [pc, #676]	; (8005b10 <_Z12shooter_basev+0x2c8>)
 800586c:	f7fa ffba 	bl	80007e4 <__aeabi_ddiv>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4610      	mov	r0, r2
 8005876:	4619      	mov	r1, r3
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	4ba5      	ldr	r3, [pc, #660]	; (8005b14 <_Z12shooter_basev+0x2cc>)
 800587e:	f7fa fe87 	bl	8000590 <__aeabi_dmul>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4610      	mov	r0, r2
 8005888:	4619      	mov	r1, r3
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	f7fa fcc9 	bl	8000224 <__adddf3>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4610      	mov	r0, r2
 8005898:	4619      	mov	r1, r3
 800589a:	4b9f      	ldr	r3, [pc, #636]	; (8005b18 <_Z12shooter_basev+0x2d0>)
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	f7fa fcc0 	bl	8000224 <__adddf3>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	499b      	ldr	r1, [pc, #620]	; (8005b18 <_Z12shooter_basev+0x2d0>)
 80058aa:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCounter(&htim3, 0);
 80058ae:	4b96      	ldr	r3, [pc, #600]	; (8005b08 <_Z12shooter_basev+0x2c0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2200      	movs	r2, #0
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

	//et
	et_ev = target_ev - angle_ev;
 80058b6:	4b99      	ldr	r3, [pc, #612]	; (8005b1c <_Z12shooter_basev+0x2d4>)
 80058b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058bc:	4b96      	ldr	r3, [pc, #600]	; (8005b18 <_Z12shooter_basev+0x2d0>)
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f7fa fcad 	bl	8000220 <__aeabi_dsub>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4995      	ldr	r1, [pc, #596]	; (8005b20 <_Z12shooter_basev+0x2d8>)
 80058cc:	e9c1 2300 	strd	r2, r3, [r1]
	sigma_et_ev += et_ev;
 80058d0:	4b94      	ldr	r3, [pc, #592]	; (8005b24 <_Z12shooter_basev+0x2dc>)
 80058d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058d6:	4b92      	ldr	r3, [pc, #584]	; (8005b20 <_Z12shooter_basev+0x2d8>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f7fa fca2 	bl	8000224 <__adddf3>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	498f      	ldr	r1, [pc, #572]	; (8005b24 <_Z12shooter_basev+0x2dc>)
 80058e6:	e9c1 2300 	strd	r2, r3, [r1]
//		else P_ev = 0.16;
//		once_ev = 0;
//	}

	//ut -> pulse
	if(et_ev < 10)	ut_ev = P_ev*et_ev + I_ev*sigma_et_ev*span_ev + D_ev*(et_ev-last_et_ev)/span_ev;	//PID Control
 80058ea:	4b8d      	ldr	r3, [pc, #564]	; (8005b20 <_Z12shooter_basev+0x2d8>)
 80058ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	4b8c      	ldr	r3, [pc, #560]	; (8005b28 <_Z12shooter_basev+0x2e0>)
 80058f6:	f7fb f8bd 	bl	8000a74 <__aeabi_dcmplt>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d04c      	beq.n	800599a <_Z12shooter_basev+0x152>
 8005900:	4b8a      	ldr	r3, [pc, #552]	; (8005b2c <_Z12shooter_basev+0x2e4>)
 8005902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005906:	4b86      	ldr	r3, [pc, #536]	; (8005b20 <_Z12shooter_basev+0x2d8>)
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	f7fa fe40 	bl	8000590 <__aeabi_dmul>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4690      	mov	r8, r2
 8005916:	4699      	mov	r9, r3
 8005918:	4b85      	ldr	r3, [pc, #532]	; (8005b30 <_Z12shooter_basev+0x2e8>)
 800591a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800591e:	4b81      	ldr	r3, [pc, #516]	; (8005b24 <_Z12shooter_basev+0x2dc>)
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f7fa fe34 	bl	8000590 <__aeabi_dmul>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4610      	mov	r0, r2
 800592e:	4619      	mov	r1, r3
 8005930:	a36b      	add	r3, pc, #428	; (adr r3, 8005ae0 <_Z12shooter_basev+0x298>)
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	f7fa fe2b 	bl	8000590 <__aeabi_dmul>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4640      	mov	r0, r8
 8005940:	4649      	mov	r1, r9
 8005942:	f7fa fc6f 	bl	8000224 <__adddf3>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4690      	mov	r8, r2
 800594c:	4699      	mov	r9, r3
 800594e:	4b74      	ldr	r3, [pc, #464]	; (8005b20 <_Z12shooter_basev+0x2d8>)
 8005950:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005954:	4b77      	ldr	r3, [pc, #476]	; (8005b34 <_Z12shooter_basev+0x2ec>)
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f7fa fc61 	bl	8000220 <__aeabi_dsub>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4610      	mov	r0, r2
 8005964:	4619      	mov	r1, r3
 8005966:	4b74      	ldr	r3, [pc, #464]	; (8005b38 <_Z12shooter_basev+0x2f0>)
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	f7fa fe10 	bl	8000590 <__aeabi_dmul>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4610      	mov	r0, r2
 8005976:	4619      	mov	r1, r3
 8005978:	a359      	add	r3, pc, #356	; (adr r3, 8005ae0 <_Z12shooter_basev+0x298>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f7fa ff31 	bl	80007e4 <__aeabi_ddiv>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4640      	mov	r0, r8
 8005988:	4649      	mov	r1, r9
 800598a:	f7fa fc4b 	bl	8000224 <__adddf3>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	496a      	ldr	r1, [pc, #424]	; (8005b3c <_Z12shooter_basev+0x2f4>)
 8005994:	e9c1 2300 	strd	r2, r3, [r1]
 8005998:	e3f1      	b.n	800617e <_Z12shooter_basev+0x936>
	else{
		if(target_ev >=70){
 800599a:	4b60      	ldr	r3, [pc, #384]	; (8005b1c <_Z12shooter_basev+0x2d4>)
 800599c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	4b66      	ldr	r3, [pc, #408]	; (8005b40 <_Z12shooter_basev+0x2f8>)
 80059a6:	f7fb f879 	bl	8000a9c <__aeabi_dcmpge>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 80e4 	beq.w	8005b7a <_Z12shooter_basev+0x332>
			P_ev = 0.16;
 80059b2:	495e      	ldr	r1, [pc, #376]	; (8005b2c <_Z12shooter_basev+0x2e4>)
 80059b4:	a34c      	add	r3, pc, #304	; (adr r3, 8005ae8 <_Z12shooter_basev+0x2a0>)
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	e9c1 2300 	strd	r2, r3, [r1]
			I_ev = 0.0005;
 80059be:	495c      	ldr	r1, [pc, #368]	; (8005b30 <_Z12shooter_basev+0x2e8>)
 80059c0:	a34b      	add	r3, pc, #300	; (adr r3, 8005af0 <_Z12shooter_basev+0x2a8>)
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	e9c1 2300 	strd	r2, r3, [r1]
			D_ev = 0.005;
 80059ca:	495b      	ldr	r1, [pc, #364]	; (8005b38 <_Z12shooter_basev+0x2f0>)
 80059cc:	a34a      	add	r3, pc, #296	; (adr r3, 8005af8 <_Z12shooter_basev+0x2b0>)
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	e9c1 2300 	strd	r2, r3, [r1]
			if(et_ev>5)	ut_ev = 1.0;
 80059d6:	4b52      	ldr	r3, [pc, #328]	; (8005b20 <_Z12shooter_basev+0x2d8>)
 80059d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	4b58      	ldr	r3, [pc, #352]	; (8005b44 <_Z12shooter_basev+0x2fc>)
 80059e2:	f7fb f865 	bl	8000ab0 <__aeabi_dcmpgt>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d006      	beq.n	80059fa <_Z12shooter_basev+0x1b2>
 80059ec:	4953      	ldr	r1, [pc, #332]	; (8005b3c <_Z12shooter_basev+0x2f4>)
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	4b55      	ldr	r3, [pc, #340]	; (8005b48 <_Z12shooter_basev+0x300>)
 80059f4:	e9c1 2300 	strd	r2, r3, [r1]
 80059f8:	e3c1      	b.n	800617e <_Z12shooter_basev+0x936>
			else if(et_ev<-5) ut_ev = -1.0;
 80059fa:	4b49      	ldr	r3, [pc, #292]	; (8005b20 <_Z12shooter_basev+0x2d8>)
 80059fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	4b51      	ldr	r3, [pc, #324]	; (8005b4c <_Z12shooter_basev+0x304>)
 8005a06:	f7fb f835 	bl	8000a74 <__aeabi_dcmplt>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d006      	beq.n	8005a1e <_Z12shooter_basev+0x1d6>
 8005a10:	494a      	ldr	r1, [pc, #296]	; (8005b3c <_Z12shooter_basev+0x2f4>)
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	4b4e      	ldr	r3, [pc, #312]	; (8005b50 <_Z12shooter_basev+0x308>)
 8005a18:	e9c1 2300 	strd	r2, r3, [r1]
 8005a1c:	e3af      	b.n	800617e <_Z12shooter_basev+0x936>
			else{
				ut_ev = P_ev*et_ev + I_ev*sigma_et_ev*span_ev + D_ev*(et_ev-last_et_ev)/span_ev;	//PID Control
 8005a1e:	4b43      	ldr	r3, [pc, #268]	; (8005b2c <_Z12shooter_basev+0x2e4>)
 8005a20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a24:	4b3e      	ldr	r3, [pc, #248]	; (8005b20 <_Z12shooter_basev+0x2d8>)
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	f7fa fdb1 	bl	8000590 <__aeabi_dmul>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4690      	mov	r8, r2
 8005a34:	4699      	mov	r9, r3
 8005a36:	4b3e      	ldr	r3, [pc, #248]	; (8005b30 <_Z12shooter_basev+0x2e8>)
 8005a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a3c:	4b39      	ldr	r3, [pc, #228]	; (8005b24 <_Z12shooter_basev+0x2dc>)
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f7fa fda5 	bl	8000590 <__aeabi_dmul>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	a324      	add	r3, pc, #144	; (adr r3, 8005ae0 <_Z12shooter_basev+0x298>)
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f7fa fd9c 	bl	8000590 <__aeabi_dmul>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	4649      	mov	r1, r9
 8005a60:	f7fa fbe0 	bl	8000224 <__adddf3>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4690      	mov	r8, r2
 8005a6a:	4699      	mov	r9, r3
 8005a6c:	4b2c      	ldr	r3, [pc, #176]	; (8005b20 <_Z12shooter_basev+0x2d8>)
 8005a6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a72:	4b30      	ldr	r3, [pc, #192]	; (8005b34 <_Z12shooter_basev+0x2ec>)
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	f7fa fbd2 	bl	8000220 <__aeabi_dsub>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4610      	mov	r0, r2
 8005a82:	4619      	mov	r1, r3
 8005a84:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <_Z12shooter_basev+0x2f0>)
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	f7fa fd81 	bl	8000590 <__aeabi_dmul>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4610      	mov	r0, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	a312      	add	r3, pc, #72	; (adr r3, 8005ae0 <_Z12shooter_basev+0x298>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f7fa fea2 	bl	80007e4 <__aeabi_ddiv>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4640      	mov	r0, r8
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	f7fa fbbc 	bl	8000224 <__adddf3>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4922      	ldr	r1, [pc, #136]	; (8005b3c <_Z12shooter_basev+0x2f4>)
 8005ab2:	e9c1 2300 	strd	r2, r3, [r1]
				if(ut_ev > 0.8)	ut_ev = 0.8;
 8005ab6:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <_Z12shooter_basev+0x2f4>)
 8005ab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005abc:	a310      	add	r3, pc, #64	; (adr r3, 8005b00 <_Z12shooter_basev+0x2b8>)
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f7fa fff5 	bl	8000ab0 <__aeabi_dcmpgt>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d043      	beq.n	8005b54 <_Z12shooter_basev+0x30c>
 8005acc:	491b      	ldr	r1, [pc, #108]	; (8005b3c <_Z12shooter_basev+0x2f4>)
 8005ace:	a30c      	add	r3, pc, #48	; (adr r3, 8005b00 <_Z12shooter_basev+0x2b8>)
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	e9c1 2300 	strd	r2, r3, [r1]
 8005ad8:	e351      	b.n	800617e <_Z12shooter_basev+0x936>
 8005ada:	bf00      	nop
 8005adc:	f3af 8000 	nop.w
 8005ae0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005ae4:	3f50624d 	.word	0x3f50624d
 8005ae8:	47ae147b 	.word	0x47ae147b
 8005aec:	3fc47ae1 	.word	0x3fc47ae1
 8005af0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005af4:	3f40624d 	.word	0x3f40624d
 8005af8:	47ae147b 	.word	0x47ae147b
 8005afc:	3f747ae1 	.word	0x3f747ae1
 8005b00:	9999999a 	.word	0x9999999a
 8005b04:	3fe99999 	.word	0x3fe99999
 8005b08:	200001b4 	.word	0x200001b4
 8005b0c:	20001b70 	.word	0x20001b70
 8005b10:	40af4000 	.word	0x40af4000
 8005b14:	40768000 	.word	0x40768000
 8005b18:	20001b88 	.word	0x20001b88
 8005b1c:	20001b80 	.word	0x20001b80
 8005b20:	20001b98 	.word	0x20001b98
 8005b24:	20001ba0 	.word	0x20001ba0
 8005b28:	40240000 	.word	0x40240000
 8005b2c:	20000018 	.word	0x20000018
 8005b30:	20000020 	.word	0x20000020
 8005b34:	20001bb0 	.word	0x20001bb0
 8005b38:	20000028 	.word	0x20000028
 8005b3c:	20001ba8 	.word	0x20001ba8
 8005b40:	40518000 	.word	0x40518000
 8005b44:	40140000 	.word	0x40140000
 8005b48:	3ff00000 	.word	0x3ff00000
 8005b4c:	c0140000 	.word	0xc0140000
 8005b50:	bff00000 	.word	0xbff00000
				else if(ut_ev < -0.8)	ut_ev = -0.8;
 8005b54:	4ba4      	ldr	r3, [pc, #656]	; (8005de8 <_Z12shooter_basev+0x5a0>)
 8005b56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b5a:	a38f      	add	r3, pc, #572	; (adr r3, 8005d98 <_Z12shooter_basev+0x550>)
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	f7fa ff88 	bl	8000a74 <__aeabi_dcmplt>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8309 	beq.w	800617e <_Z12shooter_basev+0x936>
 8005b6c:	499e      	ldr	r1, [pc, #632]	; (8005de8 <_Z12shooter_basev+0x5a0>)
 8005b6e:	a38a      	add	r3, pc, #552	; (adr r3, 8005d98 <_Z12shooter_basev+0x550>)
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	e9c1 2300 	strd	r2, r3, [r1]
 8005b78:	e301      	b.n	800617e <_Z12shooter_basev+0x936>
			}
		}
		else if(target_ev < 70 && target_ev >= 55){
 8005b7a:	4b9c      	ldr	r3, [pc, #624]	; (8005dec <_Z12shooter_basev+0x5a4>)
 8005b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	4b9a      	ldr	r3, [pc, #616]	; (8005df0 <_Z12shooter_basev+0x5a8>)
 8005b86:	f7fa ff75 	bl	8000a74 <__aeabi_dcmplt>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 80b3 	beq.w	8005cf8 <_Z12shooter_basev+0x4b0>
 8005b92:	4b96      	ldr	r3, [pc, #600]	; (8005dec <_Z12shooter_basev+0x5a4>)
 8005b94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	4b95      	ldr	r3, [pc, #596]	; (8005df4 <_Z12shooter_basev+0x5ac>)
 8005b9e:	f7fa ff7d 	bl	8000a9c <__aeabi_dcmpge>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 80a7 	beq.w	8005cf8 <_Z12shooter_basev+0x4b0>
			P_ev = 0.16;
 8005baa:	4993      	ldr	r1, [pc, #588]	; (8005df8 <_Z12shooter_basev+0x5b0>)
 8005bac:	a37c      	add	r3, pc, #496	; (adr r3, 8005da0 <_Z12shooter_basev+0x558>)
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	e9c1 2300 	strd	r2, r3, [r1]
			I_ev = 0.0005;
 8005bb6:	4991      	ldr	r1, [pc, #580]	; (8005dfc <_Z12shooter_basev+0x5b4>)
 8005bb8:	a37b      	add	r3, pc, #492	; (adr r3, 8005da8 <_Z12shooter_basev+0x560>)
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	e9c1 2300 	strd	r2, r3, [r1]
			D_ev = 0.005;
 8005bc2:	498f      	ldr	r1, [pc, #572]	; (8005e00 <_Z12shooter_basev+0x5b8>)
 8005bc4:	a37a      	add	r3, pc, #488	; (adr r3, 8005db0 <_Z12shooter_basev+0x568>)
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	e9c1 2300 	strd	r2, r3, [r1]
			if(et_ev>5)	ut_ev = 0.8;
 8005bce:	4b8d      	ldr	r3, [pc, #564]	; (8005e04 <_Z12shooter_basev+0x5bc>)
 8005bd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	4b8b      	ldr	r3, [pc, #556]	; (8005e08 <_Z12shooter_basev+0x5c0>)
 8005bda:	f7fa ff69 	bl	8000ab0 <__aeabi_dcmpgt>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d006      	beq.n	8005bf2 <_Z12shooter_basev+0x3aa>
 8005be4:	4980      	ldr	r1, [pc, #512]	; (8005de8 <_Z12shooter_basev+0x5a0>)
 8005be6:	a374      	add	r3, pc, #464	; (adr r3, 8005db8 <_Z12shooter_basev+0x570>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	e9c1 2300 	strd	r2, r3, [r1]
 8005bf0:	e2c5      	b.n	800617e <_Z12shooter_basev+0x936>
			else if(et_ev<-5) ut_ev = -0.8;
 8005bf2:	4b84      	ldr	r3, [pc, #528]	; (8005e04 <_Z12shooter_basev+0x5bc>)
 8005bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	4b83      	ldr	r3, [pc, #524]	; (8005e0c <_Z12shooter_basev+0x5c4>)
 8005bfe:	f7fa ff39 	bl	8000a74 <__aeabi_dcmplt>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d006      	beq.n	8005c16 <_Z12shooter_basev+0x3ce>
 8005c08:	4977      	ldr	r1, [pc, #476]	; (8005de8 <_Z12shooter_basev+0x5a0>)
 8005c0a:	a363      	add	r3, pc, #396	; (adr r3, 8005d98 <_Z12shooter_basev+0x550>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	e9c1 2300 	strd	r2, r3, [r1]
			if(et_ev>5)	ut_ev = 0.8;
 8005c14:	e2b3      	b.n	800617e <_Z12shooter_basev+0x936>
				else{
					ut_ev = P_ev*et_ev + I_ev*sigma_et_ev*span_ev + D_ev*(et_ev-last_et_ev)/span_ev;	//PID Control
 8005c16:	4b78      	ldr	r3, [pc, #480]	; (8005df8 <_Z12shooter_basev+0x5b0>)
 8005c18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c1c:	4b79      	ldr	r3, [pc, #484]	; (8005e04 <_Z12shooter_basev+0x5bc>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f7fa fcb5 	bl	8000590 <__aeabi_dmul>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4690      	mov	r8, r2
 8005c2c:	4699      	mov	r9, r3
 8005c2e:	4b73      	ldr	r3, [pc, #460]	; (8005dfc <_Z12shooter_basev+0x5b4>)
 8005c30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c34:	4b76      	ldr	r3, [pc, #472]	; (8005e10 <_Z12shooter_basev+0x5c8>)
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	f7fa fca9 	bl	8000590 <__aeabi_dmul>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4610      	mov	r0, r2
 8005c44:	4619      	mov	r1, r3
 8005c46:	a35e      	add	r3, pc, #376	; (adr r3, 8005dc0 <_Z12shooter_basev+0x578>)
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	f7fa fca0 	bl	8000590 <__aeabi_dmul>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4640      	mov	r0, r8
 8005c56:	4649      	mov	r1, r9
 8005c58:	f7fa fae4 	bl	8000224 <__adddf3>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4690      	mov	r8, r2
 8005c62:	4699      	mov	r9, r3
 8005c64:	4b67      	ldr	r3, [pc, #412]	; (8005e04 <_Z12shooter_basev+0x5bc>)
 8005c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c6a:	4b6a      	ldr	r3, [pc, #424]	; (8005e14 <_Z12shooter_basev+0x5cc>)
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f7fa fad6 	bl	8000220 <__aeabi_dsub>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4610      	mov	r0, r2
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4b60      	ldr	r3, [pc, #384]	; (8005e00 <_Z12shooter_basev+0x5b8>)
 8005c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c82:	f7fa fc85 	bl	8000590 <__aeabi_dmul>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	a34c      	add	r3, pc, #304	; (adr r3, 8005dc0 <_Z12shooter_basev+0x578>)
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	f7fa fda6 	bl	80007e4 <__aeabi_ddiv>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	f7fa fac0 	bl	8000224 <__adddf3>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	494f      	ldr	r1, [pc, #316]	; (8005de8 <_Z12shooter_basev+0x5a0>)
 8005caa:	e9c1 2300 	strd	r2, r3, [r1]
					if(ut_ev > 0.6)	ut_ev = 0.6;
 8005cae:	4b4e      	ldr	r3, [pc, #312]	; (8005de8 <_Z12shooter_basev+0x5a0>)
 8005cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cb4:	a344      	add	r3, pc, #272	; (adr r3, 8005dc8 <_Z12shooter_basev+0x580>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa fef9 	bl	8000ab0 <__aeabi_dcmpgt>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d006      	beq.n	8005cd2 <_Z12shooter_basev+0x48a>
 8005cc4:	4948      	ldr	r1, [pc, #288]	; (8005de8 <_Z12shooter_basev+0x5a0>)
 8005cc6:	a340      	add	r3, pc, #256	; (adr r3, 8005dc8 <_Z12shooter_basev+0x580>)
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	e9c1 2300 	strd	r2, r3, [r1]
			if(et_ev>5)	ut_ev = 0.8;
 8005cd0:	e255      	b.n	800617e <_Z12shooter_basev+0x936>
					else if(ut_ev < -0.4)	ut_ev = -0.4;
 8005cd2:	4b45      	ldr	r3, [pc, #276]	; (8005de8 <_Z12shooter_basev+0x5a0>)
 8005cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cd8:	a33d      	add	r3, pc, #244	; (adr r3, 8005dd0 <_Z12shooter_basev+0x588>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa fec9 	bl	8000a74 <__aeabi_dcmplt>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d100      	bne.n	8005cea <_Z12shooter_basev+0x4a2>
			if(et_ev>5)	ut_ev = 0.8;
 8005ce8:	e249      	b.n	800617e <_Z12shooter_basev+0x936>
					else if(ut_ev < -0.4)	ut_ev = -0.4;
 8005cea:	493f      	ldr	r1, [pc, #252]	; (8005de8 <_Z12shooter_basev+0x5a0>)
 8005cec:	a338      	add	r3, pc, #224	; (adr r3, 8005dd0 <_Z12shooter_basev+0x588>)
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	e9c1 2300 	strd	r2, r3, [r1]
			if(et_ev>5)	ut_ev = 0.8;
 8005cf6:	e242      	b.n	800617e <_Z12shooter_basev+0x936>
				}
		}
		else if(target_ev < 55 && target_ev >= 40){
 8005cf8:	4b3c      	ldr	r3, [pc, #240]	; (8005dec <_Z12shooter_basev+0x5a4>)
 8005cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	4b3c      	ldr	r3, [pc, #240]	; (8005df4 <_Z12shooter_basev+0x5ac>)
 8005d04:	f7fa feb6 	bl	8000a74 <__aeabi_dcmplt>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80f7 	beq.w	8005efe <_Z12shooter_basev+0x6b6>
 8005d10:	4b36      	ldr	r3, [pc, #216]	; (8005dec <_Z12shooter_basev+0x5a4>)
 8005d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	4b3f      	ldr	r3, [pc, #252]	; (8005e18 <_Z12shooter_basev+0x5d0>)
 8005d1c:	f7fa febe 	bl	8000a9c <__aeabi_dcmpge>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80eb 	beq.w	8005efe <_Z12shooter_basev+0x6b6>
			P_ev = 0.12;
 8005d28:	4933      	ldr	r1, [pc, #204]	; (8005df8 <_Z12shooter_basev+0x5b0>)
 8005d2a:	a32b      	add	r3, pc, #172	; (adr r3, 8005dd8 <_Z12shooter_basev+0x590>)
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	e9c1 2300 	strd	r2, r3, [r1]
			I_ev = 0.0005;
 8005d34:	4931      	ldr	r1, [pc, #196]	; (8005dfc <_Z12shooter_basev+0x5b4>)
 8005d36:	a31c      	add	r3, pc, #112	; (adr r3, 8005da8 <_Z12shooter_basev+0x560>)
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	e9c1 2300 	strd	r2, r3, [r1]
			D_ev = 0.005;
 8005d40:	492f      	ldr	r1, [pc, #188]	; (8005e00 <_Z12shooter_basev+0x5b8>)
 8005d42:	a31b      	add	r3, pc, #108	; (adr r3, 8005db0 <_Z12shooter_basev+0x568>)
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	e9c1 2300 	strd	r2, r3, [r1]
			if(et_ev>5)	ut_ev = 0.6;
 8005d4c:	4b2d      	ldr	r3, [pc, #180]	; (8005e04 <_Z12shooter_basev+0x5bc>)
 8005d4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	4b2c      	ldr	r3, [pc, #176]	; (8005e08 <_Z12shooter_basev+0x5c0>)
 8005d58:	f7fa feaa 	bl	8000ab0 <__aeabi_dcmpgt>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d006      	beq.n	8005d70 <_Z12shooter_basev+0x528>
 8005d62:	4921      	ldr	r1, [pc, #132]	; (8005de8 <_Z12shooter_basev+0x5a0>)
 8005d64:	a318      	add	r3, pc, #96	; (adr r3, 8005dc8 <_Z12shooter_basev+0x580>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	e9c1 2300 	strd	r2, r3, [r1]
 8005d6e:	e206      	b.n	800617e <_Z12shooter_basev+0x936>
			else if(et_ev<-5) ut_ev = -0.6;
 8005d70:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <_Z12shooter_basev+0x5bc>)
 8005d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	4b24      	ldr	r3, [pc, #144]	; (8005e0c <_Z12shooter_basev+0x5c4>)
 8005d7c:	f7fa fe7a 	bl	8000a74 <__aeabi_dcmplt>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d04a      	beq.n	8005e1c <_Z12shooter_basev+0x5d4>
 8005d86:	4918      	ldr	r1, [pc, #96]	; (8005de8 <_Z12shooter_basev+0x5a0>)
 8005d88:	a315      	add	r3, pc, #84	; (adr r3, 8005de0 <_Z12shooter_basev+0x598>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	e9c1 2300 	strd	r2, r3, [r1]
			if(et_ev>5)	ut_ev = 0.6;
 8005d92:	e1f4      	b.n	800617e <_Z12shooter_basev+0x936>
 8005d94:	f3af 8000 	nop.w
 8005d98:	9999999a 	.word	0x9999999a
 8005d9c:	bfe99999 	.word	0xbfe99999
 8005da0:	47ae147b 	.word	0x47ae147b
 8005da4:	3fc47ae1 	.word	0x3fc47ae1
 8005da8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005dac:	3f40624d 	.word	0x3f40624d
 8005db0:	47ae147b 	.word	0x47ae147b
 8005db4:	3f747ae1 	.word	0x3f747ae1
 8005db8:	9999999a 	.word	0x9999999a
 8005dbc:	3fe99999 	.word	0x3fe99999
 8005dc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005dc4:	3f50624d 	.word	0x3f50624d
 8005dc8:	33333333 	.word	0x33333333
 8005dcc:	3fe33333 	.word	0x3fe33333
 8005dd0:	9999999a 	.word	0x9999999a
 8005dd4:	bfd99999 	.word	0xbfd99999
 8005dd8:	eb851eb8 	.word	0xeb851eb8
 8005ddc:	3fbeb851 	.word	0x3fbeb851
 8005de0:	33333333 	.word	0x33333333
 8005de4:	bfe33333 	.word	0xbfe33333
 8005de8:	20001ba8 	.word	0x20001ba8
 8005dec:	20001b80 	.word	0x20001b80
 8005df0:	40518000 	.word	0x40518000
 8005df4:	404b8000 	.word	0x404b8000
 8005df8:	20000018 	.word	0x20000018
 8005dfc:	20000020 	.word	0x20000020
 8005e00:	20000028 	.word	0x20000028
 8005e04:	20001b98 	.word	0x20001b98
 8005e08:	40140000 	.word	0x40140000
 8005e0c:	c0140000 	.word	0xc0140000
 8005e10:	20001ba0 	.word	0x20001ba0
 8005e14:	20001bb0 	.word	0x20001bb0
 8005e18:	40440000 	.word	0x40440000
				else{
					ut_ev = P_ev*et_ev + I_ev*sigma_et_ev*span_ev + D_ev*(et_ev-last_et_ev)/span_ev;	//PID Control
 8005e1c:	4b8c      	ldr	r3, [pc, #560]	; (8006050 <_Z12shooter_basev+0x808>)
 8005e1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e22:	4b8c      	ldr	r3, [pc, #560]	; (8006054 <_Z12shooter_basev+0x80c>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f7fa fbb2 	bl	8000590 <__aeabi_dmul>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4690      	mov	r8, r2
 8005e32:	4699      	mov	r9, r3
 8005e34:	4b88      	ldr	r3, [pc, #544]	; (8006058 <_Z12shooter_basev+0x810>)
 8005e36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e3a:	4b88      	ldr	r3, [pc, #544]	; (800605c <_Z12shooter_basev+0x814>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f7fa fba6 	bl	8000590 <__aeabi_dmul>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	a374      	add	r3, pc, #464	; (adr r3, 8006020 <_Z12shooter_basev+0x7d8>)
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f7fa fb9d 	bl	8000590 <__aeabi_dmul>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4640      	mov	r0, r8
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	f7fa f9e1 	bl	8000224 <__adddf3>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4690      	mov	r8, r2
 8005e68:	4699      	mov	r9, r3
 8005e6a:	4b7a      	ldr	r3, [pc, #488]	; (8006054 <_Z12shooter_basev+0x80c>)
 8005e6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e70:	4b7b      	ldr	r3, [pc, #492]	; (8006060 <_Z12shooter_basev+0x818>)
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f7fa f9d3 	bl	8000220 <__aeabi_dsub>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4610      	mov	r0, r2
 8005e80:	4619      	mov	r1, r3
 8005e82:	4b78      	ldr	r3, [pc, #480]	; (8006064 <_Z12shooter_basev+0x81c>)
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f7fa fb82 	bl	8000590 <__aeabi_dmul>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4610      	mov	r0, r2
 8005e92:	4619      	mov	r1, r3
 8005e94:	a362      	add	r3, pc, #392	; (adr r3, 8006020 <_Z12shooter_basev+0x7d8>)
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f7fa fca3 	bl	80007e4 <__aeabi_ddiv>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	f7fa f9bd 	bl	8000224 <__adddf3>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	496e      	ldr	r1, [pc, #440]	; (8006068 <_Z12shooter_basev+0x820>)
 8005eb0:	e9c1 2300 	strd	r2, r3, [r1]
					if(ut_ev > 0.6)	ut_ev = 0.6;
 8005eb4:	4b6c      	ldr	r3, [pc, #432]	; (8006068 <_Z12shooter_basev+0x820>)
 8005eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005eba:	a35b      	add	r3, pc, #364	; (adr r3, 8006028 <_Z12shooter_basev+0x7e0>)
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	f7fa fdf6 	bl	8000ab0 <__aeabi_dcmpgt>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d006      	beq.n	8005ed8 <_Z12shooter_basev+0x690>
 8005eca:	4967      	ldr	r1, [pc, #412]	; (8006068 <_Z12shooter_basev+0x820>)
 8005ecc:	a356      	add	r3, pc, #344	; (adr r3, 8006028 <_Z12shooter_basev+0x7e0>)
 8005ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed2:	e9c1 2300 	strd	r2, r3, [r1]
			if(et_ev>5)	ut_ev = 0.6;
 8005ed6:	e152      	b.n	800617e <_Z12shooter_basev+0x936>
					else if(ut_ev < -0.4)	ut_ev = -0.4;
 8005ed8:	4b63      	ldr	r3, [pc, #396]	; (8006068 <_Z12shooter_basev+0x820>)
 8005eda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ede:	a354      	add	r3, pc, #336	; (adr r3, 8006030 <_Z12shooter_basev+0x7e8>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f7fa fdc6 	bl	8000a74 <__aeabi_dcmplt>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d100      	bne.n	8005ef0 <_Z12shooter_basev+0x6a8>
			if(et_ev>5)	ut_ev = 0.6;
 8005eee:	e146      	b.n	800617e <_Z12shooter_basev+0x936>
					else if(ut_ev < -0.4)	ut_ev = -0.4;
 8005ef0:	495d      	ldr	r1, [pc, #372]	; (8006068 <_Z12shooter_basev+0x820>)
 8005ef2:	a34f      	add	r3, pc, #316	; (adr r3, 8006030 <_Z12shooter_basev+0x7e8>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	e9c1 2300 	strd	r2, r3, [r1]
			if(et_ev>5)	ut_ev = 0.6;
 8005efc:	e13f      	b.n	800617e <_Z12shooter_basev+0x936>
				}
		}
		else if(target_ev <= 15){
 8005efe:	4b5b      	ldr	r3, [pc, #364]	; (800606c <_Z12shooter_basev+0x824>)
 8005f00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	4b59      	ldr	r3, [pc, #356]	; (8006070 <_Z12shooter_basev+0x828>)
 8005f0a:	f7fa fdbd 	bl	8000a88 <__aeabi_dcmple>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80b3 	beq.w	800607c <_Z12shooter_basev+0x834>
			P_ev = 0.18;
 8005f16:	494e      	ldr	r1, [pc, #312]	; (8006050 <_Z12shooter_basev+0x808>)
 8005f18:	a347      	add	r3, pc, #284	; (adr r3, 8006038 <_Z12shooter_basev+0x7f0>)
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	e9c1 2300 	strd	r2, r3, [r1]
			I_ev = 0.0005;
 8005f22:	494d      	ldr	r1, [pc, #308]	; (8006058 <_Z12shooter_basev+0x810>)
 8005f24:	a346      	add	r3, pc, #280	; (adr r3, 8006040 <_Z12shooter_basev+0x7f8>)
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	e9c1 2300 	strd	r2, r3, [r1]
			D_ev = 0.005;
 8005f2e:	494d      	ldr	r1, [pc, #308]	; (8006064 <_Z12shooter_basev+0x81c>)
 8005f30:	a345      	add	r3, pc, #276	; (adr r3, 8006048 <_Z12shooter_basev+0x800>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	e9c1 2300 	strd	r2, r3, [r1]
			ut_ev = P_ev*et_ev + I_ev*sigma_et_ev*span_ev + D_ev*(et_ev-last_et_ev)/span_ev;	//PID Control
 8005f3a:	4b45      	ldr	r3, [pc, #276]	; (8006050 <_Z12shooter_basev+0x808>)
 8005f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f40:	4b44      	ldr	r3, [pc, #272]	; (8006054 <_Z12shooter_basev+0x80c>)
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f7fa fb23 	bl	8000590 <__aeabi_dmul>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4690      	mov	r8, r2
 8005f50:	4699      	mov	r9, r3
 8005f52:	4b41      	ldr	r3, [pc, #260]	; (8006058 <_Z12shooter_basev+0x810>)
 8005f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f58:	4b40      	ldr	r3, [pc, #256]	; (800605c <_Z12shooter_basev+0x814>)
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f7fa fb17 	bl	8000590 <__aeabi_dmul>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4610      	mov	r0, r2
 8005f68:	4619      	mov	r1, r3
 8005f6a:	a32d      	add	r3, pc, #180	; (adr r3, 8006020 <_Z12shooter_basev+0x7d8>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f7fa fb0e 	bl	8000590 <__aeabi_dmul>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4640      	mov	r0, r8
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	f7fa f952 	bl	8000224 <__adddf3>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4690      	mov	r8, r2
 8005f86:	4699      	mov	r9, r3
 8005f88:	4b32      	ldr	r3, [pc, #200]	; (8006054 <_Z12shooter_basev+0x80c>)
 8005f8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f8e:	4b34      	ldr	r3, [pc, #208]	; (8006060 <_Z12shooter_basev+0x818>)
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f7fa f944 	bl	8000220 <__aeabi_dsub>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4b30      	ldr	r3, [pc, #192]	; (8006064 <_Z12shooter_basev+0x81c>)
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	f7fa faf3 	bl	8000590 <__aeabi_dmul>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4610      	mov	r0, r2
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	a31b      	add	r3, pc, #108	; (adr r3, 8006020 <_Z12shooter_basev+0x7d8>)
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f7fa fc14 	bl	80007e4 <__aeabi_ddiv>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	f7fa f92e 	bl	8000224 <__adddf3>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4926      	ldr	r1, [pc, #152]	; (8006068 <_Z12shooter_basev+0x820>)
 8005fce:	e9c1 2300 	strd	r2, r3, [r1]
			if(ut_ev > 0.5)	ut_ev = 0.5;
 8005fd2:	4b25      	ldr	r3, [pc, #148]	; (8006068 <_Z12shooter_basev+0x820>)
 8005fd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	4b25      	ldr	r3, [pc, #148]	; (8006074 <_Z12shooter_basev+0x82c>)
 8005fde:	f7fa fd67 	bl	8000ab0 <__aeabi_dcmpgt>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d006      	beq.n	8005ff6 <_Z12shooter_basev+0x7ae>
 8005fe8:	491f      	ldr	r1, [pc, #124]	; (8006068 <_Z12shooter_basev+0x820>)
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	4b21      	ldr	r3, [pc, #132]	; (8006074 <_Z12shooter_basev+0x82c>)
 8005ff0:	e9c1 2300 	strd	r2, r3, [r1]
 8005ff4:	e0c3      	b.n	800617e <_Z12shooter_basev+0x936>
			else if(ut_ev < -0.5)	ut_ev = -0.5;
 8005ff6:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <_Z12shooter_basev+0x820>)
 8005ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	4b1d      	ldr	r3, [pc, #116]	; (8006078 <_Z12shooter_basev+0x830>)
 8006002:	f7fa fd37 	bl	8000a74 <__aeabi_dcmplt>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80b8 	beq.w	800617e <_Z12shooter_basev+0x936>
 800600e:	4916      	ldr	r1, [pc, #88]	; (8006068 <_Z12shooter_basev+0x820>)
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	4b18      	ldr	r3, [pc, #96]	; (8006078 <_Z12shooter_basev+0x830>)
 8006016:	e9c1 2300 	strd	r2, r3, [r1]
 800601a:	e0b0      	b.n	800617e <_Z12shooter_basev+0x936>
 800601c:	f3af 8000 	nop.w
 8006020:	d2f1a9fc 	.word	0xd2f1a9fc
 8006024:	3f50624d 	.word	0x3f50624d
 8006028:	33333333 	.word	0x33333333
 800602c:	3fe33333 	.word	0x3fe33333
 8006030:	9999999a 	.word	0x9999999a
 8006034:	bfd99999 	.word	0xbfd99999
 8006038:	70a3d70a 	.word	0x70a3d70a
 800603c:	3fc70a3d 	.word	0x3fc70a3d
 8006040:	d2f1a9fc 	.word	0xd2f1a9fc
 8006044:	3f40624d 	.word	0x3f40624d
 8006048:	47ae147b 	.word	0x47ae147b
 800604c:	3f747ae1 	.word	0x3f747ae1
 8006050:	20000018 	.word	0x20000018
 8006054:	20001b98 	.word	0x20001b98
 8006058:	20000020 	.word	0x20000020
 800605c:	20001ba0 	.word	0x20001ba0
 8006060:	20001bb0 	.word	0x20001bb0
 8006064:	20000028 	.word	0x20000028
 8006068:	20001ba8 	.word	0x20001ba8
 800606c:	20001b80 	.word	0x20001b80
 8006070:	402e0000 	.word	0x402e0000
 8006074:	3fe00000 	.word	0x3fe00000
 8006078:	bfe00000 	.word	0xbfe00000
		}
		else{
			P_ev = 0.16;
 800607c:	49a8      	ldr	r1, [pc, #672]	; (8006320 <_Z12shooter_basev+0xad8>)
 800607e:	a39a      	add	r3, pc, #616	; (adr r3, 80062e8 <_Z12shooter_basev+0xaa0>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	e9c1 2300 	strd	r2, r3, [r1]
			I_ev = 0.0005;
 8006088:	49a6      	ldr	r1, [pc, #664]	; (8006324 <_Z12shooter_basev+0xadc>)
 800608a:	a399      	add	r3, pc, #612	; (adr r3, 80062f0 <_Z12shooter_basev+0xaa8>)
 800608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006090:	e9c1 2300 	strd	r2, r3, [r1]
			D_ev = 0.005;
 8006094:	49a4      	ldr	r1, [pc, #656]	; (8006328 <_Z12shooter_basev+0xae0>)
 8006096:	a398      	add	r3, pc, #608	; (adr r3, 80062f8 <_Z12shooter_basev+0xab0>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	e9c1 2300 	strd	r2, r3, [r1]
			ut_ev = P_ev*et_ev + I_ev*sigma_et_ev*span_ev + D_ev*(et_ev-last_et_ev)/span_ev;	//PID Control
 80060a0:	4b9f      	ldr	r3, [pc, #636]	; (8006320 <_Z12shooter_basev+0xad8>)
 80060a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060a6:	4ba1      	ldr	r3, [pc, #644]	; (800632c <_Z12shooter_basev+0xae4>)
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f7fa fa70 	bl	8000590 <__aeabi_dmul>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4690      	mov	r8, r2
 80060b6:	4699      	mov	r9, r3
 80060b8:	4b9a      	ldr	r3, [pc, #616]	; (8006324 <_Z12shooter_basev+0xadc>)
 80060ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060be:	4b9c      	ldr	r3, [pc, #624]	; (8006330 <_Z12shooter_basev+0xae8>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f7fa fa64 	bl	8000590 <__aeabi_dmul>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4610      	mov	r0, r2
 80060ce:	4619      	mov	r1, r3
 80060d0:	a38b      	add	r3, pc, #556	; (adr r3, 8006300 <_Z12shooter_basev+0xab8>)
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	f7fa fa5b 	bl	8000590 <__aeabi_dmul>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4640      	mov	r0, r8
 80060e0:	4649      	mov	r1, r9
 80060e2:	f7fa f89f 	bl	8000224 <__adddf3>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4690      	mov	r8, r2
 80060ec:	4699      	mov	r9, r3
 80060ee:	4b8f      	ldr	r3, [pc, #572]	; (800632c <_Z12shooter_basev+0xae4>)
 80060f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060f4:	4b8f      	ldr	r3, [pc, #572]	; (8006334 <_Z12shooter_basev+0xaec>)
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	f7fa f891 	bl	8000220 <__aeabi_dsub>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4610      	mov	r0, r2
 8006104:	4619      	mov	r1, r3
 8006106:	4b88      	ldr	r3, [pc, #544]	; (8006328 <_Z12shooter_basev+0xae0>)
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f7fa fa40 	bl	8000590 <__aeabi_dmul>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4610      	mov	r0, r2
 8006116:	4619      	mov	r1, r3
 8006118:	a379      	add	r3, pc, #484	; (adr r3, 8006300 <_Z12shooter_basev+0xab8>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f7fa fb61 	bl	80007e4 <__aeabi_ddiv>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4640      	mov	r0, r8
 8006128:	4649      	mov	r1, r9
 800612a:	f7fa f87b 	bl	8000224 <__adddf3>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4981      	ldr	r1, [pc, #516]	; (8006338 <_Z12shooter_basev+0xaf0>)
 8006134:	e9c1 2300 	strd	r2, r3, [r1]
			if(ut_ev > 0.4)	ut_ev = 0.4;
 8006138:	4b7f      	ldr	r3, [pc, #508]	; (8006338 <_Z12shooter_basev+0xaf0>)
 800613a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800613e:	a372      	add	r3, pc, #456	; (adr r3, 8006308 <_Z12shooter_basev+0xac0>)
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f7fa fcb4 	bl	8000ab0 <__aeabi_dcmpgt>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d006      	beq.n	800615c <_Z12shooter_basev+0x914>
 800614e:	497a      	ldr	r1, [pc, #488]	; (8006338 <_Z12shooter_basev+0xaf0>)
 8006150:	a36d      	add	r3, pc, #436	; (adr r3, 8006308 <_Z12shooter_basev+0xac0>)
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	e9c1 2300 	strd	r2, r3, [r1]
 800615a:	e010      	b.n	800617e <_Z12shooter_basev+0x936>
			else if(ut_ev < -0.2)	ut_ev = -0.2;
 800615c:	4b76      	ldr	r3, [pc, #472]	; (8006338 <_Z12shooter_basev+0xaf0>)
 800615e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006162:	a36b      	add	r3, pc, #428	; (adr r3, 8006310 <_Z12shooter_basev+0xac8>)
 8006164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006168:	f7fa fc84 	bl	8000a74 <__aeabi_dcmplt>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <_Z12shooter_basev+0x936>
 8006172:	4971      	ldr	r1, [pc, #452]	; (8006338 <_Z12shooter_basev+0xaf0>)
 8006174:	a366      	add	r3, pc, #408	; (adr r3, 8006310 <_Z12shooter_basev+0xac8>)
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}

//	ut_ev = P_ev*et_ev + I_ev*sigma_et_ev*span_ev + D_ev*(et_ev-last_et_ev)/span_ev;	//PID Control

	if(ut_ev > 1)	ut_ev = 1;
 800617e:	4b6e      	ldr	r3, [pc, #440]	; (8006338 <_Z12shooter_basev+0xaf0>)
 8006180:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	4b6c      	ldr	r3, [pc, #432]	; (800633c <_Z12shooter_basev+0xaf4>)
 800618a:	f7fa fc91 	bl	8000ab0 <__aeabi_dcmpgt>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d006      	beq.n	80061a2 <_Z12shooter_basev+0x95a>
 8006194:	4968      	ldr	r1, [pc, #416]	; (8006338 <_Z12shooter_basev+0xaf0>)
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	4b68      	ldr	r3, [pc, #416]	; (800633c <_Z12shooter_basev+0xaf4>)
 800619c:	e9c1 2300 	strd	r2, r3, [r1]
 80061a0:	e010      	b.n	80061c4 <_Z12shooter_basev+0x97c>
	else if(ut_ev < -1)	ut_ev = -1;
 80061a2:	4b65      	ldr	r3, [pc, #404]	; (8006338 <_Z12shooter_basev+0xaf0>)
 80061a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	4b64      	ldr	r3, [pc, #400]	; (8006340 <_Z12shooter_basev+0xaf8>)
 80061ae:	f7fa fc61 	bl	8000a74 <__aeabi_dcmplt>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <_Z12shooter_basev+0x97c>
 80061b8:	495f      	ldr	r1, [pc, #380]	; (8006338 <_Z12shooter_basev+0xaf0>)
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	4b60      	ldr	r3, [pc, #384]	; (8006340 <_Z12shooter_basev+0xaf8>)
 80061c0:	e9c1 2300 	strd	r2, r3, [r1]

	if(ut_ev>0){
 80061c4:	4b5c      	ldr	r3, [pc, #368]	; (8006338 <_Z12shooter_basev+0xaf0>)
 80061c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	f7fa fc6d 	bl	8000ab0 <__aeabi_dcmpgt>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <_Z12shooter_basev+0x9aa>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80061dc:	2200      	movs	r2, #0
 80061de:	2101      	movs	r1, #1
 80061e0:	4858      	ldr	r0, [pc, #352]	; (8006344 <_Z12shooter_basev+0xafc>)
 80061e2:	f002 f8c3 	bl	800836c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80061e6:	2201      	movs	r2, #1
 80061e8:	2102      	movs	r1, #2
 80061ea:	4856      	ldr	r0, [pc, #344]	; (8006344 <_Z12shooter_basev+0xafc>)
 80061ec:	f002 f8be 	bl	800836c <HAL_GPIO_WritePin>
 80061f0:	e02c      	b.n	800624c <_Z12shooter_basev+0xa04>
	}
	else if(ut_ev<0){
 80061f2:	4b51      	ldr	r3, [pc, #324]	; (8006338 <_Z12shooter_basev+0xaf0>)
 80061f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	f7fa fc38 	bl	8000a74 <__aeabi_dcmplt>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <_Z12shooter_basev+0x9d8>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800620a:	2201      	movs	r2, #1
 800620c:	2101      	movs	r1, #1
 800620e:	484d      	ldr	r0, [pc, #308]	; (8006344 <_Z12shooter_basev+0xafc>)
 8006210:	f002 f8ac 	bl	800836c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8006214:	2200      	movs	r2, #0
 8006216:	2102      	movs	r1, #2
 8006218:	484a      	ldr	r0, [pc, #296]	; (8006344 <_Z12shooter_basev+0xafc>)
 800621a:	f002 f8a7 	bl	800836c <HAL_GPIO_WritePin>
 800621e:	e015      	b.n	800624c <_Z12shooter_basev+0xa04>
	}
	else if(ut_ev==0){
 8006220:	4b45      	ldr	r3, [pc, #276]	; (8006338 <_Z12shooter_basev+0xaf0>)
 8006222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	f7fa fc17 	bl	8000a60 <__aeabi_dcmpeq>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d009      	beq.n	800624c <_Z12shooter_basev+0xa04>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8006238:	2200      	movs	r2, #0
 800623a:	2101      	movs	r1, #1
 800623c:	4841      	ldr	r0, [pc, #260]	; (8006344 <_Z12shooter_basev+0xafc>)
 800623e:	f002 f895 	bl	800836c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8006242:	2200      	movs	r2, #0
 8006244:	2102      	movs	r1, #2
 8006246:	483f      	ldr	r0, [pc, #252]	; (8006344 <_Z12shooter_basev+0xafc>)
 8006248:	f002 f890 	bl	800836c <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,fabs(ut_ev)*20000);
 800624c:	4b3a      	ldr	r3, [pc, #232]	; (8006338 <_Z12shooter_basev+0xaf0>)
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	4614      	mov	r4, r2
 8006254:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006258:	a32f      	add	r3, pc, #188	; (adr r3, 8006318 <_Z12shooter_basev+0xad0>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	4620      	mov	r0, r4
 8006260:	4629      	mov	r1, r5
 8006262:	f7fa f995 	bl	8000590 <__aeabi_dmul>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4937      	ldr	r1, [pc, #220]	; (8006348 <_Z12shooter_basev+0xb00>)
 800626c:	680c      	ldr	r4, [r1, #0]
 800626e:	4610      	mov	r0, r2
 8006270:	4619      	mov	r1, r3
 8006272:	f7fa fc27 	bl	8000ac4 <__aeabi_d2uiz>
 8006276:	4603      	mov	r3, r0
 8006278:	6363      	str	r3, [r4, #52]	; 0x34

	//report set
	if(last_et_ev == et_ev  && ev_ok < 222){
 800627a:	4b2e      	ldr	r3, [pc, #184]	; (8006334 <_Z12shooter_basev+0xaec>)
 800627c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006280:	4b2a      	ldr	r3, [pc, #168]	; (800632c <_Z12shooter_basev+0xae4>)
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	f7fa fbeb 	bl	8000a60 <__aeabi_dcmpeq>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d009      	beq.n	80062a4 <_Z12shooter_basev+0xa5c>
 8006290:	4b2e      	ldr	r3, [pc, #184]	; (800634c <_Z12shooter_basev+0xb04>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2bdd      	cmp	r3, #221	; 0xdd
 8006296:	dc05      	bgt.n	80062a4 <_Z12shooter_basev+0xa5c>
		ev_ok++;
 8006298:	4b2c      	ldr	r3, [pc, #176]	; (800634c <_Z12shooter_basev+0xb04>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3301      	adds	r3, #1
 800629e:	4a2b      	ldr	r2, [pc, #172]	; (800634c <_Z12shooter_basev+0xb04>)
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	e00d      	b.n	80062c0 <_Z12shooter_basev+0xa78>
	}
	else if(last_et_ev != et_ev) ev_ok = 0;
 80062a4:	4b23      	ldr	r3, [pc, #140]	; (8006334 <_Z12shooter_basev+0xaec>)
 80062a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062aa:	4b20      	ldr	r3, [pc, #128]	; (800632c <_Z12shooter_basev+0xae4>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f7fa fbd6 	bl	8000a60 <__aeabi_dcmpeq>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d102      	bne.n	80062c0 <_Z12shooter_basev+0xa78>
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <_Z12shooter_basev+0xb04>)
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]

	//record et
	last_et_ev = et_ev;
 80062c0:	4b1a      	ldr	r3, [pc, #104]	; (800632c <_Z12shooter_basev+0xae4>)
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	491b      	ldr	r1, [pc, #108]	; (8006334 <_Z12shooter_basev+0xaec>)
 80062c8:	e9c1 2300 	strd	r2, r3, [r1]

//	if(sigma_et_ev > 5000)	sigma_et_ev = 5000;
//	else if(sigma_et_ev < -5000)	sigma_et_ev = -5000;

	if(ev_ok == 222)	sigma_et_ev = 0;
 80062cc:	4b1f      	ldr	r3, [pc, #124]	; (800634c <_Z12shooter_basev+0xb04>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2bde      	cmp	r3, #222	; 0xde
 80062d2:	d106      	bne.n	80062e2 <_Z12shooter_basev+0xa9a>
 80062d4:	4916      	ldr	r1, [pc, #88]	; (8006330 <_Z12shooter_basev+0xae8>)
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	e9c1 2300 	strd	r2, r3, [r1]
}
 80062e2:	bf00      	nop
 80062e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80062e8:	47ae147b 	.word	0x47ae147b
 80062ec:	3fc47ae1 	.word	0x3fc47ae1
 80062f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80062f4:	3f40624d 	.word	0x3f40624d
 80062f8:	47ae147b 	.word	0x47ae147b
 80062fc:	3f747ae1 	.word	0x3f747ae1
 8006300:	d2f1a9fc 	.word	0xd2f1a9fc
 8006304:	3f50624d 	.word	0x3f50624d
 8006308:	9999999a 	.word	0x9999999a
 800630c:	3fd99999 	.word	0x3fd99999
 8006310:	9999999a 	.word	0x9999999a
 8006314:	bfc99999 	.word	0xbfc99999
 8006318:	00000000 	.word	0x00000000
 800631c:	40d38800 	.word	0x40d38800
 8006320:	20000018 	.word	0x20000018
 8006324:	20000020 	.word	0x20000020
 8006328:	20000028 	.word	0x20000028
 800632c:	20001b98 	.word	0x20001b98
 8006330:	20001ba0 	.word	0x20001ba0
 8006334:	20001bb0 	.word	0x20001bb0
 8006338:	20001ba8 	.word	0x20001ba8
 800633c:	3ff00000 	.word	0x3ff00000
 8006340:	bff00000 	.word	0xbff00000
 8006344:	40020800 	.word	0x40020800
 8006348:	200002d4 	.word	0x200002d4
 800634c:	20001b90 	.word	0x20001b90

08006350 <_Z5Resetv>:
int num = 0;
int first = 1;
int reset_hz = 0.0;
int reset_ev = 0.0;

void Reset(){
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
//		__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,0);
//		angle_hz = 0;
//	}

	//elevation angle
	enc_ev = __HAL_TIM_GetCounter(&htim3);
 8006354:	4b4b      	ldr	r3, [pc, #300]	; (8006484 <_Z5Resetv+0x134>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	b21a      	sxth	r2, r3
 800635c:	4b4a      	ldr	r3, [pc, #296]	; (8006488 <_Z5Resetv+0x138>)
 800635e:	801a      	strh	r2, [r3, #0]
	angle_ev += 360*((double)enc_ev/(4*resolution_ev*ratio_ev))*2;	//PV
 8006360:	4b49      	ldr	r3, [pc, #292]	; (8006488 <_Z5Resetv+0x138>)
 8006362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006366:	4618      	mov	r0, r3
 8006368:	f7fa f8a8 	bl	80004bc <__aeabi_i2d>
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	4b46      	ldr	r3, [pc, #280]	; (800648c <_Z5Resetv+0x13c>)
 8006372:	f7fa fa37 	bl	80007e4 <__aeabi_ddiv>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4610      	mov	r0, r2
 800637c:	4619      	mov	r1, r3
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	4b43      	ldr	r3, [pc, #268]	; (8006490 <_Z5Resetv+0x140>)
 8006384:	f7fa f904 	bl	8000590 <__aeabi_dmul>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4610      	mov	r0, r2
 800638e:	4619      	mov	r1, r3
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	f7f9 ff46 	bl	8000224 <__adddf3>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4610      	mov	r0, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	4b3c      	ldr	r3, [pc, #240]	; (8006494 <_Z5Resetv+0x144>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7f9 ff3d 	bl	8000224 <__adddf3>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4939      	ldr	r1, [pc, #228]	; (8006494 <_Z5Resetv+0x144>)
 80063b0:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCounter(&htim3, 0);
 80063b4:	4b33      	ldr	r3, [pc, #204]	; (8006484 <_Z5Resetv+0x134>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2200      	movs	r2, #0
 80063ba:	625a      	str	r2, [r3, #36]	; 0x24

	if(hz_origin == 0){
 80063bc:	4b36      	ldr	r3, [pc, #216]	; (8006498 <_Z5Resetv+0x148>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d128      	bne.n	8006416 <_Z5Resetv+0xc6>
		if(ev_origin == 0){
 80063c4:	4b35      	ldr	r3, [pc, #212]	; (800649c <_Z5Resetv+0x14c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10f      	bne.n	80063ec <_Z5Resetv+0x9c>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 80063cc:	2201      	movs	r2, #1
 80063ce:	2101      	movs	r1, #1
 80063d0:	4833      	ldr	r0, [pc, #204]	; (80064a0 <_Z5Resetv+0x150>)
 80063d2:	f001 ffcb 	bl	800836c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80063d6:	2200      	movs	r2, #0
 80063d8:	2102      	movs	r1, #2
 80063da:	4831      	ldr	r0, [pc, #196]	; (80064a0 <_Z5Resetv+0x150>)
 80063dc:	f001 ffc6 	bl	800836c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,1.0*20000);
 80063e0:	4b30      	ldr	r3, [pc, #192]	; (80064a4 <_Z5Resetv+0x154>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80063e8:	635a      	str	r2, [r3, #52]	; 0x34
 80063ea:	e014      	b.n	8006416 <_Z5Resetv+0xc6>
		}
		else{
			angle_ev = 0;
 80063ec:	4929      	ldr	r1, [pc, #164]	; (8006494 <_Z5Resetv+0x144>)
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80063fa:	2200      	movs	r2, #0
 80063fc:	2101      	movs	r1, #1
 80063fe:	4828      	ldr	r0, [pc, #160]	; (80064a0 <_Z5Resetv+0x150>)
 8006400:	f001 ffb4 	bl	800836c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8006404:	2200      	movs	r2, #0
 8006406:	2102      	movs	r1, #2
 8006408:	4825      	ldr	r0, [pc, #148]	; (80064a0 <_Z5Resetv+0x150>)
 800640a:	f001 ffaf 	bl	800836c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 800640e:	4b25      	ldr	r3, [pc, #148]	; (80064a4 <_Z5Resetv+0x154>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2200      	movs	r2, #0
 8006414:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}

	if(first == 1)	UART_Send_SetMotorPosition(1, 1550, 300); //Fire -> 1550
 8006416:	4b24      	ldr	r3, [pc, #144]	; (80064a8 <_Z5Resetv+0x158>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d106      	bne.n	800642c <_Z5Resetv+0xdc>
 800641e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006422:	f240 610e 	movw	r1, #1550	; 0x60e
 8006426:	2001      	movs	r0, #1
 8006428:	f7ff f864 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>

	if(hz_origin == 0 && ev_origin == 1){
 800642c:	4b1a      	ldr	r3, [pc, #104]	; (8006498 <_Z5Resetv+0x148>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d125      	bne.n	8006480 <_Z5Resetv+0x130>
 8006434:	4b19      	ldr	r3, [pc, #100]	; (800649c <_Z5Resetv+0x14c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d121      	bne.n	8006480 <_Z5Resetv+0x130>
//		reset_hz = 0;
//		reset_ev = 0;
//		target_hz = 0;
		target_ev = 0;
 800643c:	491b      	ldr	r1, [pc, #108]	; (80064ac <_Z5Resetv+0x15c>)
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	e9c1 2300 	strd	r2, r3, [r1]
		ros_ev = 0;
 800644a:	4919      	ldr	r1, [pc, #100]	; (80064b0 <_Z5Resetv+0x160>)
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	e9c1 2300 	strd	r2, r3, [r1]
		num = 0;
 8006458:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <_Z5Resetv+0x164>)
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
		if(first == 1)	UART_Send_SetMotorPosition(1, 1400, 300); //Fire -> 1400
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <_Z5Resetv+0x158>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d106      	bne.n	8006474 <_Z5Resetv+0x124>
 8006466:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800646a:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800646e:	2001      	movs	r0, #1
 8006470:	f7ff f840 	bl	80054f4 <_Z26UART_Send_SetMotorPositionttt>
//		//buffer
//		buffer_time++;
//		if(buffer_time >= 500){
//			buffer_time = 0;
			first = 0;
 8006474:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <_Z5Resetv+0x158>)
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
			reset = 0;
 800647a:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <_Z5Resetv+0x168>)
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
//		}
	}
}
 8006480:	bf00      	nop
 8006482:	bd80      	pop	{r7, pc}
 8006484:	200001b4 	.word	0x200001b4
 8006488:	20001b70 	.word	0x20001b70
 800648c:	40af4000 	.word	0x40af4000
 8006490:	40768000 	.word	0x40768000
 8006494:	20001b88 	.word	0x20001b88
 8006498:	20001bbc 	.word	0x20001bbc
 800649c:	20001bc0 	.word	0x20001bc0
 80064a0:	40020800 	.word	0x40020800
 80064a4:	200002d4 	.word	0x200002d4
 80064a8:	20000048 	.word	0x20000048
 80064ac:	20001b80 	.word	0x20001b80
 80064b0:	20001bd8 	.word	0x20001bd8
 80064b4:	20001bc4 	.word	0x20001bc4
 80064b8:	20001bb8 	.word	0x20001bb8

080064bc <_Z10base_limitv>:
//-------------------------------------------------------------------------
//limit
void base_limit(){
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
	//elevation angle limit
	if(target_ev <= 0)	target_ev = 0;
 80064c0:	4b25      	ldr	r3, [pc, #148]	; (8006558 <_Z10base_limitv+0x9c>)
 80064c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	f04f 0300 	mov.w	r3, #0
 80064ce:	f7fa fadb 	bl	8000a88 <__aeabi_dcmple>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d007      	beq.n	80064e8 <_Z10base_limitv+0x2c>
 80064d8:	491f      	ldr	r1, [pc, #124]	; (8006558 <_Z10base_limitv+0x9c>)
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	e9c1 2300 	strd	r2, r3, [r1]
 80064e6:	e010      	b.n	800650a <_Z10base_limitv+0x4e>
	else if (target_ev >= ev_limit)	target_ev = ev_limit;
 80064e8:	4b1b      	ldr	r3, [pc, #108]	; (8006558 <_Z10base_limitv+0x9c>)
 80064ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064ee:	4b1b      	ldr	r3, [pc, #108]	; (800655c <_Z10base_limitv+0xa0>)
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f7fa fad2 	bl	8000a9c <__aeabi_dcmpge>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <_Z10base_limitv+0x4e>
 80064fe:	4b17      	ldr	r3, [pc, #92]	; (800655c <_Z10base_limitv+0xa0>)
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	4914      	ldr	r1, [pc, #80]	; (8006558 <_Z10base_limitv+0x9c>)
 8006506:	e9c1 2300 	strd	r2, r3, [r1]
	//horizontal angle limit
	if(target_hz >= hz_pos_limit)	target_hz = hz_pos_limit;
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <_Z10base_limitv+0xa4>)
 800650c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006510:	4b14      	ldr	r3, [pc, #80]	; (8006564 <_Z10base_limitv+0xa8>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f7fa fac1 	bl	8000a9c <__aeabi_dcmpge>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d006      	beq.n	800652e <_Z10base_limitv+0x72>
 8006520:	4b10      	ldr	r3, [pc, #64]	; (8006564 <_Z10base_limitv+0xa8>)
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	490e      	ldr	r1, [pc, #56]	; (8006560 <_Z10base_limitv+0xa4>)
 8006528:	e9c1 2300 	strd	r2, r3, [r1]
	else if(target_hz <= hz_neg_limit)	target_hz = hz_neg_limit;
}
 800652c:	e011      	b.n	8006552 <_Z10base_limitv+0x96>
	else if(target_hz <= hz_neg_limit)	target_hz = hz_neg_limit;
 800652e:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <_Z10base_limitv+0xa4>)
 8006530:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <_Z10base_limitv+0xac>)
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f7fa faa5 	bl	8000a88 <__aeabi_dcmple>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d100      	bne.n	8006546 <_Z10base_limitv+0x8a>
}
 8006544:	e005      	b.n	8006552 <_Z10base_limitv+0x96>
	else if(target_hz <= hz_neg_limit)	target_hz = hz_neg_limit;
 8006546:	4b08      	ldr	r3, [pc, #32]	; (8006568 <_Z10base_limitv+0xac>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	4904      	ldr	r1, [pc, #16]	; (8006560 <_Z10base_limitv+0xa4>)
 800654e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006552:	bf00      	nop
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20001b80 	.word	0x20001b80
 800655c:	20000040 	.word	0x20000040
 8006560:	20001b78 	.word	0x20001b78
 8006564:	20000030 	.word	0x20000030
 8006568:	20000038 	.word	0x20000038

0800656c <_Z6Scriptv>:
double ros_ev = 0.0;
int script_clock = 0;

//-------------------------------------------------------------------------
//Script
void Script(){
 800656c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006570:	af00      	add	r7, sp, #0
	switch(step){
 8006572:	4b98      	ldr	r3, [pc, #608]	; (80067d4 <_Z6Scriptv+0x268>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	2b09      	cmp	r3, #9
 800657a:	f200 8172 	bhi.w	8006862 <_Z6Scriptv+0x2f6>
 800657e:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <_Z6Scriptv+0x18>)
 8006580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006584:	08006833 	.word	0x08006833
 8006588:	0800680d 	.word	0x0800680d
 800658c:	080065ad 	.word	0x080065ad
 8006590:	080065dd 	.word	0x080065dd
 8006594:	08006619 	.word	0x08006619
 8006598:	08006683 	.word	0x08006683
 800659c:	080066cd 	.word	0x080066cd
 80065a0:	0800672b 	.word	0x0800672b
 80065a4:	0800676f 	.word	0x0800676f
 80065a8:	080067b9 	.word	0x080067b9
		case 1:
			if(script_clock>500){
 80065ac:	4b8a      	ldr	r3, [pc, #552]	; (80067d8 <_Z6Scriptv+0x26c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80065b4:	dd0c      	ble.n	80065d0 <_Z6Scriptv+0x64>
				target_length = 45;
 80065b6:	4989      	ldr	r1, [pc, #548]	; (80067dc <_Z6Scriptv+0x270>)
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	4b88      	ldr	r3, [pc, #544]	; (80067e0 <_Z6Scriptv+0x274>)
 80065be:	e9c1 2300 	strd	r2, r3, [r1]
				script_clock = 0;
 80065c2:	4b85      	ldr	r3, [pc, #532]	; (80067d8 <_Z6Scriptv+0x26c>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
				step = 2;
 80065c8:	4b82      	ldr	r3, [pc, #520]	; (80067d4 <_Z6Scriptv+0x268>)
 80065ca:	2202      	movs	r2, #2
 80065cc:	601a      	str	r2, [r3, #0]
			}
			else script_clock++;
			break;
 80065ce:	e151      	b.n	8006874 <_Z6Scriptv+0x308>
			else script_clock++;
 80065d0:	4b81      	ldr	r3, [pc, #516]	; (80067d8 <_Z6Scriptv+0x26c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	4a80      	ldr	r2, [pc, #512]	; (80067d8 <_Z6Scriptv+0x26c>)
 80065d8:	6013      	str	r3, [r2, #0]
			break;
 80065da:	e14b      	b.n	8006874 <_Z6Scriptv+0x308>
		case 2:
			if(script_clock>500)	Reset();
 80065dc:	4b7e      	ldr	r3, [pc, #504]	; (80067d8 <_Z6Scriptv+0x26c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80065e4:	dd02      	ble.n	80065ec <_Z6Scriptv+0x80>
 80065e6:	f7ff feb3 	bl	8006350 <_Z5Resetv>
 80065ea:	e004      	b.n	80065f6 <_Z6Scriptv+0x8a>
			else script_clock++;
 80065ec:	4b7a      	ldr	r3, [pc, #488]	; (80067d8 <_Z6Scriptv+0x26c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	4a79      	ldr	r2, [pc, #484]	; (80067d8 <_Z6Scriptv+0x26c>)
 80065f4:	6013      	str	r3, [r2, #0]
			if(hz_origin == 0 && ev_origin == 1){
 80065f6:	4b7b      	ldr	r3, [pc, #492]	; (80067e4 <_Z6Scriptv+0x278>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f040 8133 	bne.w	8006866 <_Z6Scriptv+0x2fa>
 8006600:	4b79      	ldr	r3, [pc, #484]	; (80067e8 <_Z6Scriptv+0x27c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	f040 812e 	bne.w	8006866 <_Z6Scriptv+0x2fa>
				script_clock = 0;
 800660a:	4b73      	ldr	r3, [pc, #460]	; (80067d8 <_Z6Scriptv+0x26c>)
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
				step = 3;
 8006610:	4b70      	ldr	r3, [pc, #448]	; (80067d4 <_Z6Scriptv+0x268>)
 8006612:	2203      	movs	r2, #3
 8006614:	601a      	str	r2, [r3, #0]
			}
			break;
 8006616:	e126      	b.n	8006866 <_Z6Scriptv+0x2fa>
		case 3:
			if(script_clock>500)	target_ev = 60;
 8006618:	4b6f      	ldr	r3, [pc, #444]	; (80067d8 <_Z6Scriptv+0x26c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006620:	dd06      	ble.n	8006630 <_Z6Scriptv+0xc4>
 8006622:	4972      	ldr	r1, [pc, #456]	; (80067ec <_Z6Scriptv+0x280>)
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	4b71      	ldr	r3, [pc, #452]	; (80067f0 <_Z6Scriptv+0x284>)
 800662a:	e9c1 2300 	strd	r2, r3, [r1]
 800662e:	e004      	b.n	800663a <_Z6Scriptv+0xce>
			else script_clock++;
 8006630:	4b69      	ldr	r3, [pc, #420]	; (80067d8 <_Z6Scriptv+0x26c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3301      	adds	r3, #1
 8006636:	4a68      	ldr	r2, [pc, #416]	; (80067d8 <_Z6Scriptv+0x26c>)
 8006638:	6013      	str	r3, [r2, #0]
			if(st_set == 1 && fabs(target_ev - angle_ev) < 3){
 800663a:	4b6e      	ldr	r3, [pc, #440]	; (80067f4 <_Z6Scriptv+0x288>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b01      	cmp	r3, #1
 8006640:	f040 8113 	bne.w	800686a <_Z6Scriptv+0x2fe>
 8006644:	4b69      	ldr	r3, [pc, #420]	; (80067ec <_Z6Scriptv+0x280>)
 8006646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800664a:	4b6b      	ldr	r3, [pc, #428]	; (80067f8 <_Z6Scriptv+0x28c>)
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f7f9 fde6 	bl	8000220 <__aeabi_dsub>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4690      	mov	r8, r2
 800665a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800665e:	f04f 0200 	mov.w	r2, #0
 8006662:	4b66      	ldr	r3, [pc, #408]	; (80067fc <_Z6Scriptv+0x290>)
 8006664:	4640      	mov	r0, r8
 8006666:	4649      	mov	r1, r9
 8006668:	f7fa fa04 	bl	8000a74 <__aeabi_dcmplt>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d100      	bne.n	8006674 <_Z6Scriptv+0x108>
				script_clock = 0;
				step = 4;
			}
			break;
 8006672:	e0fa      	b.n	800686a <_Z6Scriptv+0x2fe>
				script_clock = 0;
 8006674:	4b58      	ldr	r3, [pc, #352]	; (80067d8 <_Z6Scriptv+0x26c>)
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
				step = 4;
 800667a:	4b56      	ldr	r3, [pc, #344]	; (80067d4 <_Z6Scriptv+0x268>)
 800667c:	2204      	movs	r2, #4
 800667e:	601a      	str	r2, [r3, #0]
			break;
 8006680:	e0f3      	b.n	800686a <_Z6Scriptv+0x2fe>
		case 4:
			if(script_clock>300 && script_clock<=800)	seat_mode = 2;
 8006682:	4b55      	ldr	r3, [pc, #340]	; (80067d8 <_Z6Scriptv+0x26c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800668a:	dd08      	ble.n	800669e <_Z6Scriptv+0x132>
 800668c:	4b52      	ldr	r3, [pc, #328]	; (80067d8 <_Z6Scriptv+0x26c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006694:	dc03      	bgt.n	800669e <_Z6Scriptv+0x132>
 8006696:	4b5a      	ldr	r3, [pc, #360]	; (8006800 <_Z6Scriptv+0x294>)
 8006698:	2202      	movs	r2, #2
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e00a      	b.n	80066b4 <_Z6Scriptv+0x148>
			else if(script_clock > 800){
 800669e:	4b4e      	ldr	r3, [pc, #312]	; (80067d8 <_Z6Scriptv+0x26c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80066a6:	dd05      	ble.n	80066b4 <_Z6Scriptv+0x148>
				script_clock = 0;
 80066a8:	4b4b      	ldr	r3, [pc, #300]	; (80067d8 <_Z6Scriptv+0x26c>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
				step = 5;
 80066ae:	4b49      	ldr	r3, [pc, #292]	; (80067d4 <_Z6Scriptv+0x268>)
 80066b0:	2205      	movs	r2, #5
 80066b2:	601a      	str	r2, [r3, #0]
			}
			if(script_clock <= 800) script_clock++;
 80066b4:	4b48      	ldr	r3, [pc, #288]	; (80067d8 <_Z6Scriptv+0x26c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80066bc:	f300 80d7 	bgt.w	800686e <_Z6Scriptv+0x302>
 80066c0:	4b45      	ldr	r3, [pc, #276]	; (80067d8 <_Z6Scriptv+0x26c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	4a44      	ldr	r2, [pc, #272]	; (80067d8 <_Z6Scriptv+0x26c>)
 80066c8:	6013      	str	r3, [r2, #0]
			break;
 80066ca:	e0d0      	b.n	800686e <_Z6Scriptv+0x302>
		case 5:
			//ball drop
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,600+10*go);
 80066cc:	4b4d      	ldr	r3, [pc, #308]	; (8006804 <_Z6Scriptv+0x298>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80066d4:	635a      	str	r2, [r3, #52]	; 0x34
			if(script_clock>1000 && script_clock<=1500){
 80066d6:	4b40      	ldr	r3, [pc, #256]	; (80067d8 <_Z6Scriptv+0x26c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066de:	dd11      	ble.n	8006704 <_Z6Scriptv+0x198>
 80066e0:	4b3d      	ldr	r3, [pc, #244]	; (80067d8 <_Z6Scriptv+0x26c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80066e8:	4293      	cmp	r3, r2
 80066ea:	dc0b      	bgt.n	8006704 <_Z6Scriptv+0x198>
				script_clock++;
 80066ec:	4b3a      	ldr	r3, [pc, #232]	; (80067d8 <_Z6Scriptv+0x26c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3301      	adds	r3, #1
 80066f2:	4a39      	ldr	r2, [pc, #228]	; (80067d8 <_Z6Scriptv+0x26c>)
 80066f4:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,600+10*stop);
 80066f6:	4b43      	ldr	r3, [pc, #268]	; (8006804 <_Z6Scriptv+0x298>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80066fe:	635a      	str	r2, [r3, #52]	; 0x34
 8006700:	bf00      	nop
			else if(script_clock>1500){
				script_clock = 0;
				step = 6;
			}
			else script_clock++;
			break;
 8006702:	e0b7      	b.n	8006874 <_Z6Scriptv+0x308>
			else if(script_clock>1500){
 8006704:	4b34      	ldr	r3, [pc, #208]	; (80067d8 <_Z6Scriptv+0x26c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800670c:	4293      	cmp	r3, r2
 800670e:	dd06      	ble.n	800671e <_Z6Scriptv+0x1b2>
				script_clock = 0;
 8006710:	4b31      	ldr	r3, [pc, #196]	; (80067d8 <_Z6Scriptv+0x26c>)
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
				step = 6;
 8006716:	4b2f      	ldr	r3, [pc, #188]	; (80067d4 <_Z6Scriptv+0x268>)
 8006718:	2206      	movs	r2, #6
 800671a:	601a      	str	r2, [r3, #0]
			break;
 800671c:	e0aa      	b.n	8006874 <_Z6Scriptv+0x308>
			else script_clock++;
 800671e:	4b2e      	ldr	r3, [pc, #184]	; (80067d8 <_Z6Scriptv+0x26c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	4a2c      	ldr	r2, [pc, #176]	; (80067d8 <_Z6Scriptv+0x26c>)
 8006726:	6013      	str	r3, [r2, #0]
			break;
 8006728:	e0a4      	b.n	8006874 <_Z6Scriptv+0x308>
		case 6:
			target_ev = 30;
 800672a:	4930      	ldr	r1, [pc, #192]	; (80067ec <_Z6Scriptv+0x280>)
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	4b35      	ldr	r3, [pc, #212]	; (8006808 <_Z6Scriptv+0x29c>)
 8006732:	e9c1 2300 	strd	r2, r3, [r1]
			if(fabs(target_ev - angle_ev) < 3)	step = 7;
 8006736:	4b2d      	ldr	r3, [pc, #180]	; (80067ec <_Z6Scriptv+0x280>)
 8006738:	e9d3 0100 	ldrd	r0, r1, [r3]
 800673c:	4b2e      	ldr	r3, [pc, #184]	; (80067f8 <_Z6Scriptv+0x28c>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f7f9 fd6d 	bl	8000220 <__aeabi_dsub>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4614      	mov	r4, r2
 800674c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	4b29      	ldr	r3, [pc, #164]	; (80067fc <_Z6Scriptv+0x290>)
 8006756:	4620      	mov	r0, r4
 8006758:	4629      	mov	r1, r5
 800675a:	f7fa f98b 	bl	8000a74 <__aeabi_dcmplt>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d100      	bne.n	8006766 <_Z6Scriptv+0x1fa>
			break;
 8006764:	e086      	b.n	8006874 <_Z6Scriptv+0x308>
			if(fabs(target_ev - angle_ev) < 3)	step = 7;
 8006766:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <_Z6Scriptv+0x268>)
 8006768:	2207      	movs	r2, #7
 800676a:	601a      	str	r2, [r3, #0]
			break;
 800676c:	e082      	b.n	8006874 <_Z6Scriptv+0x308>
		case 7:
			if(script_clock>500 && script_clock<=700){
 800676e:	4b1a      	ldr	r3, [pc, #104]	; (80067d8 <_Z6Scriptv+0x26c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006776:	dd0d      	ble.n	8006794 <_Z6Scriptv+0x228>
 8006778:	4b17      	ldr	r3, [pc, #92]	; (80067d8 <_Z6Scriptv+0x26c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006780:	dc08      	bgt.n	8006794 <_Z6Scriptv+0x228>
				script_clock++;
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <_Z6Scriptv+0x26c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3301      	adds	r3, #1
 8006788:	4a13      	ldr	r2, [pc, #76]	; (80067d8 <_Z6Scriptv+0x26c>)
 800678a:	6013      	str	r3, [r2, #0]
				seat_mode = 1;
 800678c:	4b1c      	ldr	r3, [pc, #112]	; (8006800 <_Z6Scriptv+0x294>)
 800678e:	2201      	movs	r2, #1
 8006790:	601a      	str	r2, [r3, #0]
			else if(script_clock > 700){
				script_clock = 0;
				step = 8;
			}
			else script_clock++;
			break;
 8006792:	e06f      	b.n	8006874 <_Z6Scriptv+0x308>
			else if(script_clock > 700){
 8006794:	4b10      	ldr	r3, [pc, #64]	; (80067d8 <_Z6Scriptv+0x26c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800679c:	dd06      	ble.n	80067ac <_Z6Scriptv+0x240>
				script_clock = 0;
 800679e:	4b0e      	ldr	r3, [pc, #56]	; (80067d8 <_Z6Scriptv+0x26c>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]
				step = 8;
 80067a4:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <_Z6Scriptv+0x268>)
 80067a6:	2208      	movs	r2, #8
 80067a8:	601a      	str	r2, [r3, #0]
			break;
 80067aa:	e063      	b.n	8006874 <_Z6Scriptv+0x308>
			else script_clock++;
 80067ac:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <_Z6Scriptv+0x26c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3301      	adds	r3, #1
 80067b2:	4a09      	ldr	r2, [pc, #36]	; (80067d8 <_Z6Scriptv+0x26c>)
 80067b4:	6013      	str	r3, [r2, #0]
			break;
 80067b6:	e05d      	b.n	8006874 <_Z6Scriptv+0x308>
		case 8:
			Reset();
 80067b8:	f7ff fdca 	bl	8006350 <_Z5Resetv>
			if(hz_origin == 0 && ev_origin == 1)	step = 0;
 80067bc:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <_Z6Scriptv+0x278>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d156      	bne.n	8006872 <_Z6Scriptv+0x306>
 80067c4:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <_Z6Scriptv+0x27c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d152      	bne.n	8006872 <_Z6Scriptv+0x306>
 80067cc:	4b01      	ldr	r3, [pc, #4]	; (80067d4 <_Z6Scriptv+0x268>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
			break;
 80067d2:	e04e      	b.n	8006872 <_Z6Scriptv+0x306>
 80067d4:	2000004c 	.word	0x2000004c
 80067d8:	20001be0 	.word	0x20001be0
 80067dc:	20001b38 	.word	0x20001b38
 80067e0:	40468000 	.word	0x40468000
 80067e4:	20001bbc 	.word	0x20001bbc
 80067e8:	20001bc0 	.word	0x20001bc0
 80067ec:	20001b80 	.word	0x20001b80
 80067f0:	404e0000 	.word	0x404e0000
 80067f4:	20001b6c 	.word	0x20001b6c
 80067f8:	20001b88 	.word	0x20001b88
 80067fc:	40080000 	.word	0x40080000
 8006800:	20000008 	.word	0x20000008
 8006804:	2000028c 	.word	0x2000028c
 8006808:	403e0000 	.word	0x403e0000
		case 0:
			target_length = ros_st;
 800680c:	4b1b      	ldr	r3, [pc, #108]	; (800687c <_Z6Scriptv+0x310>)
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	491b      	ldr	r1, [pc, #108]	; (8006880 <_Z6Scriptv+0x314>)
 8006814:	e9c1 2300 	strd	r2, r3, [r1]
			target_hz = ros_hz;
 8006818:	4b1a      	ldr	r3, [pc, #104]	; (8006884 <_Z6Scriptv+0x318>)
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	491a      	ldr	r1, [pc, #104]	; (8006888 <_Z6Scriptv+0x31c>)
 8006820:	e9c1 2300 	strd	r2, r3, [r1]
			target_ev = ros_ev;
 8006824:	4b19      	ldr	r3, [pc, #100]	; (800688c <_Z6Scriptv+0x320>)
 8006826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682a:	4919      	ldr	r1, [pc, #100]	; (8006890 <_Z6Scriptv+0x324>)
 800682c:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8006830:	e020      	b.n	8006874 <_Z6Scriptv+0x308>
		case -1:
			if(first == 0 && (flag == 8 || ros_hz == 2))	step = 1;
 8006832:	4b18      	ldr	r3, [pc, #96]	; (8006894 <_Z6Scriptv+0x328>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d113      	bne.n	8006862 <_Z6Scriptv+0x2f6>
 800683a:	4b17      	ldr	r3, [pc, #92]	; (8006898 <_Z6Scriptv+0x32c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b08      	cmp	r3, #8
 8006840:	d00c      	beq.n	800685c <_Z6Scriptv+0x2f0>
 8006842:	4b10      	ldr	r3, [pc, #64]	; (8006884 <_Z6Scriptv+0x318>)
 8006844:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006850:	f7fa f906 	bl	8000a60 <__aeabi_dcmpeq>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d100      	bne.n	800685c <_Z6Scriptv+0x2f0>
		default:
			break;
 800685a:	e002      	b.n	8006862 <_Z6Scriptv+0x2f6>
			if(first == 0 && (flag == 8 || ros_hz == 2))	step = 1;
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <_Z6Scriptv+0x330>)
 800685e:	2201      	movs	r2, #1
 8006860:	601a      	str	r2, [r3, #0]
			break;
 8006862:	bf00      	nop
 8006864:	e006      	b.n	8006874 <_Z6Scriptv+0x308>
			break;
 8006866:	bf00      	nop
 8006868:	e004      	b.n	8006874 <_Z6Scriptv+0x308>
			break;
 800686a:	bf00      	nop
 800686c:	e002      	b.n	8006874 <_Z6Scriptv+0x308>
			break;
 800686e:	bf00      	nop
 8006870:	e000      	b.n	8006874 <_Z6Scriptv+0x308>
			break;
 8006872:	bf00      	nop
	}
}
 8006874:	bf00      	nop
 8006876:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800687a:	bf00      	nop
 800687c:	20001bc8 	.word	0x20001bc8
 8006880:	20001b38 	.word	0x20001b38
 8006884:	20001bd0 	.word	0x20001bd0
 8006888:	20001b78 	.word	0x20001b78
 800688c:	20001bd8 	.word	0x20001bd8
 8006890:	20001b80 	.word	0x20001b80
 8006894:	20000048 	.word	0x20000048
 8006898:	200004bc 	.word	0x200004bc
 800689c:	2000004c 	.word	0x2000004c

080068a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068a6:	2300      	movs	r3, #0
 80068a8:	607b      	str	r3, [r7, #4]
 80068aa:	4b10      	ldr	r3, [pc, #64]	; (80068ec <HAL_MspInit+0x4c>)
 80068ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ae:	4a0f      	ldr	r2, [pc, #60]	; (80068ec <HAL_MspInit+0x4c>)
 80068b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068b4:	6453      	str	r3, [r2, #68]	; 0x44
 80068b6:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <HAL_MspInit+0x4c>)
 80068b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068be:	607b      	str	r3, [r7, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80068c2:	2300      	movs	r3, #0
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <HAL_MspInit+0x4c>)
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	4a08      	ldr	r2, [pc, #32]	; (80068ec <HAL_MspInit+0x4c>)
 80068cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d0:	6413      	str	r3, [r2, #64]	; 0x40
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_MspInit+0x4c>)
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40023800 	.word	0x40023800

080068f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08e      	sub	sp, #56	; 0x38
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	605a      	str	r2, [r3, #4]
 8006902:	609a      	str	r2, [r3, #8]
 8006904:	60da      	str	r2, [r3, #12]
 8006906:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a5e      	ldr	r2, [pc, #376]	; (8006a88 <HAL_TIM_Encoder_MspInit+0x198>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d135      	bne.n	800697e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006912:	2300      	movs	r3, #0
 8006914:	623b      	str	r3, [r7, #32]
 8006916:	4b5d      	ldr	r3, [pc, #372]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691a:	4a5c      	ldr	r2, [pc, #368]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 800691c:	f043 0301 	orr.w	r3, r3, #1
 8006920:	6453      	str	r3, [r2, #68]	; 0x44
 8006922:	4b5a      	ldr	r3, [pc, #360]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	623b      	str	r3, [r7, #32]
 800692c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800692e:	2300      	movs	r3, #0
 8006930:	61fb      	str	r3, [r7, #28]
 8006932:	4b56      	ldr	r3, [pc, #344]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	4a55      	ldr	r2, [pc, #340]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006938:	f043 0301 	orr.w	r3, r3, #1
 800693c:	6313      	str	r3, [r2, #48]	; 0x30
 800693e:	4b53      	ldr	r3, [pc, #332]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800694a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006950:	2302      	movs	r3, #2
 8006952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006954:	2300      	movs	r3, #0
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006958:	2300      	movs	r3, #0
 800695a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800695c:	2301      	movs	r3, #1
 800695e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006964:	4619      	mov	r1, r3
 8006966:	484a      	ldr	r0, [pc, #296]	; (8006a90 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8006968:	f001 fa60 	bl	8007e2c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800696c:	2200      	movs	r2, #0
 800696e:	2100      	movs	r1, #0
 8006970:	2018      	movs	r0, #24
 8006972:	f000 fdb2 	bl	80074da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8006976:	2018      	movs	r0, #24
 8006978:	f000 fdcb 	bl	8007512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800697c:	e080      	b.n	8006a80 <HAL_TIM_Encoder_MspInit+0x190>
  else if(htim_encoder->Instance==TIM2)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006986:	d14a      	bne.n	8006a1e <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006988:	2300      	movs	r3, #0
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	4b3f      	ldr	r3, [pc, #252]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 800698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006990:	4a3e      	ldr	r2, [pc, #248]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	6413      	str	r3, [r2, #64]	; 0x40
 8006998:	4b3c      	ldr	r3, [pc, #240]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	61bb      	str	r3, [r7, #24]
 80069a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	4b38      	ldr	r3, [pc, #224]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	4a37      	ldr	r2, [pc, #220]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	6313      	str	r3, [r2, #48]	; 0x30
 80069b4:	4b35      	ldr	r3, [pc, #212]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 80069b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069c0:	2300      	movs	r3, #0
 80069c2:	613b      	str	r3, [r7, #16]
 80069c4:	4b31      	ldr	r3, [pc, #196]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 80069c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c8:	4a30      	ldr	r2, [pc, #192]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 80069ca:	f043 0302 	orr.w	r3, r3, #2
 80069ce:	6313      	str	r3, [r2, #48]	; 0x30
 80069d0:	4b2e      	ldr	r3, [pc, #184]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 80069d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80069dc:	2320      	movs	r3, #32
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e0:	2302      	movs	r3, #2
 80069e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069e8:	2300      	movs	r3, #0
 80069ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80069ec:	2301      	movs	r3, #1
 80069ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069f4:	4619      	mov	r1, r3
 80069f6:	4826      	ldr	r0, [pc, #152]	; (8006a90 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80069f8:	f001 fa18 	bl	8007e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80069fc:	2308      	movs	r3, #8
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a00:	2302      	movs	r3, #2
 8006a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a14:	4619      	mov	r1, r3
 8006a16:	481f      	ldr	r0, [pc, #124]	; (8006a94 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8006a18:	f001 fa08 	bl	8007e2c <HAL_GPIO_Init>
}
 8006a1c:	e030      	b.n	8006a80 <HAL_TIM_Encoder_MspInit+0x190>
  else if(htim_encoder->Instance==TIM3)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a1d      	ldr	r2, [pc, #116]	; (8006a98 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d12b      	bne.n	8006a80 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	4b17      	ldr	r3, [pc, #92]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	4a16      	ldr	r2, [pc, #88]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006a32:	f043 0302 	orr.w	r3, r3, #2
 8006a36:	6413      	str	r3, [r2, #64]	; 0x40
 8006a38:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a44:	2300      	movs	r3, #0
 8006a46:	60bb      	str	r3, [r7, #8]
 8006a48:	4b10      	ldr	r3, [pc, #64]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	4a0f      	ldr	r2, [pc, #60]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006a4e:	f043 0301 	orr.w	r3, r3, #1
 8006a52:	6313      	str	r3, [r2, #48]	; 0x30
 8006a54:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006a60:	23c0      	movs	r3, #192	; 0xc0
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a64:	2302      	movs	r3, #2
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a70:	2302      	movs	r3, #2
 8006a72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4805      	ldr	r0, [pc, #20]	; (8006a90 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8006a7c:	f001 f9d6 	bl	8007e2c <HAL_GPIO_Init>
}
 8006a80:	bf00      	nop
 8006a82:	3738      	adds	r7, #56	; 0x38
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	40020000 	.word	0x40020000
 8006a94:	40020400 	.word	0x40020400
 8006a98:	40000400 	.word	0x40000400

08006a9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a26      	ldr	r2, [pc, #152]	; (8006b44 <HAL_TIM_PWM_MspInit+0xa8>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d10e      	bne.n	8006acc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	4b25      	ldr	r3, [pc, #148]	; (8006b48 <HAL_TIM_PWM_MspInit+0xac>)
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	4a24      	ldr	r2, [pc, #144]	; (8006b48 <HAL_TIM_PWM_MspInit+0xac>)
 8006ab8:	f043 0304 	orr.w	r3, r3, #4
 8006abc:	6413      	str	r3, [r2, #64]	; 0x40
 8006abe:	4b22      	ldr	r3, [pc, #136]	; (8006b48 <HAL_TIM_PWM_MspInit+0xac>)
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8006aca:	e036      	b.n	8006b3a <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM8)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a1e      	ldr	r2, [pc, #120]	; (8006b4c <HAL_TIM_PWM_MspInit+0xb0>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d116      	bne.n	8006b04 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	4b1b      	ldr	r3, [pc, #108]	; (8006b48 <HAL_TIM_PWM_MspInit+0xac>)
 8006adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ade:	4a1a      	ldr	r2, [pc, #104]	; (8006b48 <HAL_TIM_PWM_MspInit+0xac>)
 8006ae0:	f043 0302 	orr.w	r3, r3, #2
 8006ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ae6:	4b18      	ldr	r3, [pc, #96]	; (8006b48 <HAL_TIM_PWM_MspInit+0xac>)
 8006ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8006af2:	2200      	movs	r2, #0
 8006af4:	2100      	movs	r1, #0
 8006af6:	202b      	movs	r0, #43	; 0x2b
 8006af8:	f000 fcef 	bl	80074da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8006afc:	202b      	movs	r0, #43	; 0x2b
 8006afe:	f000 fd08 	bl	8007512 <HAL_NVIC_EnableIRQ>
}
 8006b02:	e01a      	b.n	8006b3a <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM12)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a11      	ldr	r2, [pc, #68]	; (8006b50 <HAL_TIM_PWM_MspInit+0xb4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d115      	bne.n	8006b3a <HAL_TIM_PWM_MspInit+0x9e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	4b0d      	ldr	r3, [pc, #52]	; (8006b48 <HAL_TIM_PWM_MspInit+0xac>)
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	4a0c      	ldr	r2, [pc, #48]	; (8006b48 <HAL_TIM_PWM_MspInit+0xac>)
 8006b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b1e:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <HAL_TIM_PWM_MspInit+0xac>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	202b      	movs	r0, #43	; 0x2b
 8006b30:	f000 fcd3 	bl	80074da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8006b34:	202b      	movs	r0, #43	; 0x2b
 8006b36:	f000 fcec 	bl	8007512 <HAL_NVIC_EnableIRQ>
}
 8006b3a:	bf00      	nop
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	40000800 	.word	0x40000800
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	40010400 	.word	0x40010400
 8006b50:	40001800 	.word	0x40001800

08006b54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a0e      	ldr	r2, [pc, #56]	; (8006b9c <HAL_TIM_Base_MspInit+0x48>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d115      	bne.n	8006b92 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <HAL_TIM_Base_MspInit+0x4c>)
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ba0 <HAL_TIM_Base_MspInit+0x4c>)
 8006b70:	f043 0308 	orr.w	r3, r3, #8
 8006b74:	6413      	str	r3, [r2, #64]	; 0x40
 8006b76:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <HAL_TIM_Base_MspInit+0x4c>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	f003 0308 	and.w	r3, r3, #8
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006b82:	2200      	movs	r2, #0
 8006b84:	2100      	movs	r1, #0
 8006b86:	2032      	movs	r0, #50	; 0x32
 8006b88:	f000 fca7 	bl	80074da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006b8c:	2032      	movs	r0, #50	; 0x32
 8006b8e:	f000 fcc0 	bl	8007512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40023800 	.word	0x40023800

08006ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bac:	f107 0314 	add.w	r3, r7, #20
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	609a      	str	r2, [r3, #8]
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a37      	ldr	r2, [pc, #220]	; (8006ca0 <HAL_TIM_MspPostInit+0xfc>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d11e      	bne.n	8006c04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	4b36      	ldr	r3, [pc, #216]	; (8006ca4 <HAL_TIM_MspPostInit+0x100>)
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bce:	4a35      	ldr	r2, [pc, #212]	; (8006ca4 <HAL_TIM_MspPostInit+0x100>)
 8006bd0:	f043 0302 	orr.w	r3, r3, #2
 8006bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8006bd6:	4b33      	ldr	r3, [pc, #204]	; (8006ca4 <HAL_TIM_MspPostInit+0x100>)
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006be2:	23c0      	movs	r3, #192	; 0xc0
 8006be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006be6:	2302      	movs	r3, #2
 8006be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bf6:	f107 0314 	add.w	r3, r7, #20
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	482a      	ldr	r0, [pc, #168]	; (8006ca8 <HAL_TIM_MspPostInit+0x104>)
 8006bfe:	f001 f915 	bl	8007e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8006c02:	e048      	b.n	8006c96 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a28      	ldr	r2, [pc, #160]	; (8006cac <HAL_TIM_MspPostInit+0x108>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d11f      	bne.n	8006c4e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	4b24      	ldr	r3, [pc, #144]	; (8006ca4 <HAL_TIM_MspPostInit+0x100>)
 8006c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c16:	4a23      	ldr	r2, [pc, #140]	; (8006ca4 <HAL_TIM_MspPostInit+0x100>)
 8006c18:	f043 0304 	orr.w	r3, r3, #4
 8006c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c1e:	4b21      	ldr	r3, [pc, #132]	; (8006ca4 <HAL_TIM_MspPostInit+0x100>)
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	60fb      	str	r3, [r7, #12]
 8006c28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8006c2a:	f44f 7350 	mov.w	r3, #832	; 0x340
 8006c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c30:	2302      	movs	r3, #2
 8006c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c40:	f107 0314 	add.w	r3, r7, #20
 8006c44:	4619      	mov	r1, r3
 8006c46:	481a      	ldr	r0, [pc, #104]	; (8006cb0 <HAL_TIM_MspPostInit+0x10c>)
 8006c48:	f001 f8f0 	bl	8007e2c <HAL_GPIO_Init>
}
 8006c4c:	e023      	b.n	8006c96 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a18      	ldr	r2, [pc, #96]	; (8006cb4 <HAL_TIM_MspPostInit+0x110>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d11e      	bne.n	8006c96 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60bb      	str	r3, [r7, #8]
 8006c5c:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <HAL_TIM_MspPostInit+0x100>)
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	4a10      	ldr	r2, [pc, #64]	; (8006ca4 <HAL_TIM_MspPostInit+0x100>)
 8006c62:	f043 0302 	orr.w	r3, r3, #2
 8006c66:	6313      	str	r3, [r2, #48]	; 0x30
 8006c68:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <HAL_TIM_MspPostInit+0x100>)
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006c74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c82:	2300      	movs	r3, #0
 8006c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006c86:	2309      	movs	r3, #9
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c8a:	f107 0314 	add.w	r3, r7, #20
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4805      	ldr	r0, [pc, #20]	; (8006ca8 <HAL_TIM_MspPostInit+0x104>)
 8006c92:	f001 f8cb 	bl	8007e2c <HAL_GPIO_Init>
}
 8006c96:	bf00      	nop
 8006c98:	3728      	adds	r7, #40	; 0x28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40000800 	.word	0x40000800
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	40020400 	.word	0x40020400
 8006cac:	40010400 	.word	0x40010400
 8006cb0:	40020800 	.word	0x40020800
 8006cb4:	40001800 	.word	0x40001800

08006cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08c      	sub	sp, #48	; 0x30
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc0:	f107 031c 	add.w	r3, r7, #28
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	605a      	str	r2, [r3, #4]
 8006cca:	609a      	str	r2, [r3, #8]
 8006ccc:	60da      	str	r2, [r3, #12]
 8006cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a79      	ldr	r2, [pc, #484]	; (8006ebc <HAL_UART_MspInit+0x204>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	f040 8094 	bne.w	8006e04 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006cdc:	2300      	movs	r3, #0
 8006cde:	61bb      	str	r3, [r7, #24]
 8006ce0:	4b77      	ldr	r3, [pc, #476]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	4a76      	ldr	r2, [pc, #472]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cea:	6413      	str	r3, [r2, #64]	; 0x40
 8006cec:	4b74      	ldr	r3, [pc, #464]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	4b70      	ldr	r3, [pc, #448]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	4a6f      	ldr	r2, [pc, #444]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006d02:	f043 0301 	orr.w	r3, r3, #1
 8006d06:	6313      	str	r3, [r2, #48]	; 0x30
 8006d08:	4b6d      	ldr	r3, [pc, #436]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006d14:	230c      	movs	r3, #12
 8006d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d20:	2303      	movs	r3, #3
 8006d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006d24:	2307      	movs	r3, #7
 8006d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d28:	f107 031c 	add.w	r3, r7, #28
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4865      	ldr	r0, [pc, #404]	; (8006ec4 <HAL_UART_MspInit+0x20c>)
 8006d30:	f001 f87c 	bl	8007e2c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006d34:	4b64      	ldr	r3, [pc, #400]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d36:	4a65      	ldr	r2, [pc, #404]	; (8006ecc <HAL_UART_MspInit+0x214>)
 8006d38:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006d3a:	4b63      	ldr	r3, [pc, #396]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d40:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d42:	4b61      	ldr	r3, [pc, #388]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d48:	4b5f      	ldr	r3, [pc, #380]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d4e:	4b5e      	ldr	r3, [pc, #376]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d54:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d56:	4b5c      	ldr	r3, [pc, #368]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d5c:	4b5a      	ldr	r3, [pc, #360]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006d62:	4b59      	ldr	r3, [pc, #356]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d68:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006d6a:	4b57      	ldr	r3, [pc, #348]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d70:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d72:	4b55      	ldr	r3, [pc, #340]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006d78:	4853      	ldr	r0, [pc, #332]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d7a:	f000 fbf7 	bl	800756c <HAL_DMA_Init>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8006d84:	f7fb f8b8 	bl	8001ef8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a4f      	ldr	r2, [pc, #316]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d8c:	639a      	str	r2, [r3, #56]	; 0x38
 8006d8e:	4a4e      	ldr	r2, [pc, #312]	; (8006ec8 <HAL_UART_MspInit+0x210>)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006d94:	4b4e      	ldr	r3, [pc, #312]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006d96:	4a4f      	ldr	r2, [pc, #316]	; (8006ed4 <HAL_UART_MspInit+0x21c>)
 8006d98:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006d9a:	4b4d      	ldr	r3, [pc, #308]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006d9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006da0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006da2:	4b4b      	ldr	r3, [pc, #300]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006da4:	2240      	movs	r2, #64	; 0x40
 8006da6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006da8:	4b49      	ldr	r3, [pc, #292]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006dae:	4b48      	ldr	r3, [pc, #288]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006db4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006db6:	4b46      	ldr	r3, [pc, #280]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dbc:	4b44      	ldr	r3, [pc, #272]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006dc2:	4b43      	ldr	r3, [pc, #268]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006dc8:	4b41      	ldr	r3, [pc, #260]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006dce:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006dd0:	4b3f      	ldr	r3, [pc, #252]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006dd6:	483e      	ldr	r0, [pc, #248]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006dd8:	f000 fbc8 	bl	800756c <HAL_DMA_Init>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8006de2:	f7fb f889 	bl	8001ef8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a39      	ldr	r2, [pc, #228]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006dea:	635a      	str	r2, [r3, #52]	; 0x34
 8006dec:	4a38      	ldr	r2, [pc, #224]	; (8006ed0 <HAL_UART_MspInit+0x218>)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006df2:	2200      	movs	r2, #0
 8006df4:	2100      	movs	r1, #0
 8006df6:	2026      	movs	r0, #38	; 0x26
 8006df8:	f000 fb6f 	bl	80074da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006dfc:	2026      	movs	r0, #38	; 0x26
 8006dfe:	f000 fb88 	bl	8007512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006e02:	e057      	b.n	8006eb4 <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART3)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a33      	ldr	r2, [pc, #204]	; (8006ed8 <HAL_UART_MspInit+0x220>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d152      	bne.n	8006eb4 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e0e:	2300      	movs	r3, #0
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	4b2b      	ldr	r3, [pc, #172]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	4a2a      	ldr	r2, [pc, #168]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e1e:	4b28      	ldr	r3, [pc, #160]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	4b24      	ldr	r3, [pc, #144]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e32:	4a23      	ldr	r2, [pc, #140]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006e34:	f043 0304 	orr.w	r3, r3, #4
 8006e38:	6313      	str	r3, [r2, #48]	; 0x30
 8006e3a:	4b21      	ldr	r3, [pc, #132]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e46:	2300      	movs	r3, #0
 8006e48:	60bb      	str	r3, [r7, #8]
 8006e4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	4a1c      	ldr	r2, [pc, #112]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006e50:	f043 0302 	orr.w	r3, r3, #2
 8006e54:	6313      	str	r3, [r2, #48]	; 0x30
 8006e56:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <HAL_UART_MspInit+0x208>)
 8006e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	60bb      	str	r3, [r7, #8]
 8006e60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006e62:	2320      	movs	r3, #32
 8006e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e66:	2302      	movs	r3, #2
 8006e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006e72:	2307      	movs	r3, #7
 8006e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e76:	f107 031c 	add.w	r3, r7, #28
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4817      	ldr	r0, [pc, #92]	; (8006edc <HAL_UART_MspInit+0x224>)
 8006e7e:	f000 ffd5 	bl	8007e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e90:	2303      	movs	r3, #3
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006e94:	2307      	movs	r3, #7
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e98:	f107 031c 	add.w	r3, r7, #28
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4810      	ldr	r0, [pc, #64]	; (8006ee0 <HAL_UART_MspInit+0x228>)
 8006ea0:	f000 ffc4 	bl	8007e2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	2027      	movs	r0, #39	; 0x27
 8006eaa:	f000 fb16 	bl	80074da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006eae:	2027      	movs	r0, #39	; 0x27
 8006eb0:	f000 fb2f 	bl	8007512 <HAL_NVIC_EnableIRQ>
}
 8006eb4:	bf00      	nop
 8006eb6:	3730      	adds	r7, #48	; 0x30
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40004400 	.word	0x40004400
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	40020000 	.word	0x40020000
 8006ec8:	200003a4 	.word	0x200003a4
 8006ecc:	40026088 	.word	0x40026088
 8006ed0:	20000404 	.word	0x20000404
 8006ed4:	400260a0 	.word	0x400260a0
 8006ed8:	40004800 	.word	0x40004800
 8006edc:	40020800 	.word	0x40020800
 8006ee0:	40020400 	.word	0x40020400

08006ee4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1a      	ldr	r2, [pc, #104]	; (8006f5c <HAL_UART_MspDeInit+0x78>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d117      	bne.n	8006f26 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8006ef6:	4b1a      	ldr	r3, [pc, #104]	; (8006f60 <HAL_UART_MspDeInit+0x7c>)
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	4a19      	ldr	r2, [pc, #100]	; (8006f60 <HAL_UART_MspDeInit+0x7c>)
 8006efc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f00:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8006f02:	210c      	movs	r1, #12
 8006f04:	4817      	ldr	r0, [pc, #92]	; (8006f64 <HAL_UART_MspDeInit+0x80>)
 8006f06:	f001 f925 	bl	8008154 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fbda 	bl	80076c8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fbd5 	bl	80076c8 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006f1e:	2026      	movs	r0, #38	; 0x26
 8006f20:	f000 fb05 	bl	800752e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8006f24:	e016      	b.n	8006f54 <HAL_UART_MspDeInit+0x70>
  else if(huart->Instance==USART3)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a0f      	ldr	r2, [pc, #60]	; (8006f68 <HAL_UART_MspDeInit+0x84>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d111      	bne.n	8006f54 <HAL_UART_MspDeInit+0x70>
    __HAL_RCC_USART3_CLK_DISABLE();
 8006f30:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <HAL_UART_MspDeInit+0x7c>)
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	4a0a      	ldr	r2, [pc, #40]	; (8006f60 <HAL_UART_MspDeInit+0x7c>)
 8006f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f3a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 8006f3c:	2120      	movs	r1, #32
 8006f3e:	480b      	ldr	r0, [pc, #44]	; (8006f6c <HAL_UART_MspDeInit+0x88>)
 8006f40:	f001 f908 	bl	8008154 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8006f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f48:	4809      	ldr	r0, [pc, #36]	; (8006f70 <HAL_UART_MspDeInit+0x8c>)
 8006f4a:	f001 f903 	bl	8008154 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8006f4e:	2027      	movs	r0, #39	; 0x27
 8006f50:	f000 faed 	bl	800752e <HAL_NVIC_DisableIRQ>
}
 8006f54:	bf00      	nop
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40004400 	.word	0x40004400
 8006f60:	40023800 	.word	0x40023800
 8006f64:	40020000 	.word	0x40020000
 8006f68:	40004800 	.word	0x40004800
 8006f6c:	40020800 	.word	0x40020800
 8006f70:	40020400 	.word	0x40020400

08006f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006f78:	e7fe      	b.n	8006f78 <NMI_Handler+0x4>

08006f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f7e:	e7fe      	b.n	8006f7e <HardFault_Handler+0x4>

08006f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f84:	e7fe      	b.n	8006f84 <MemManage_Handler+0x4>

08006f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f86:	b480      	push	{r7}
 8006f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f8a:	e7fe      	b.n	8006f8a <BusFault_Handler+0x4>

08006f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f90:	e7fe      	b.n	8006f90 <UsageFault_Handler+0x4>

08006f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f92:	b480      	push	{r7}
 8006f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f96:	bf00      	nop
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006fa4:	bf00      	nop
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006fb2:	bf00      	nop
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006fc0:	f000 f932 	bl	8007228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fc4:	bf00      	nop
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006fcc:	4802      	ldr	r0, [pc, #8]	; (8006fd8 <DMA1_Stream5_IRQHandler+0x10>)
 8006fce:	f000 fcc3 	bl	8007958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006fd2:	bf00      	nop
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	200003a4 	.word	0x200003a4

08006fdc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006fe0:	4802      	ldr	r0, [pc, #8]	; (8006fec <DMA1_Stream6_IRQHandler+0x10>)
 8006fe2:	f000 fcb9 	bl	8007958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006fe6:	bf00      	nop
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000404 	.word	0x20000404

08006ff0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006ff4:	4802      	ldr	r0, [pc, #8]	; (8007000 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8006ff6:	f002 fb1f 	bl	8009638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8006ffa:	bf00      	nop
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	20000124 	.word	0x20000124

08007004 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007008:	4802      	ldr	r0, [pc, #8]	; (8007014 <USART2_IRQHandler+0x10>)
 800700a:	f003 fbd9 	bl	800a7c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800700e:	bf00      	nop
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	2000031c 	.word	0x2000031c

08007018 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800701c:	4802      	ldr	r0, [pc, #8]	; (8007028 <USART3_IRQHandler+0x10>)
 800701e:	f003 fbcf 	bl	800a7c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007022:	bf00      	nop
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20000360 	.word	0x20000360

0800702c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007030:	4803      	ldr	r0, [pc, #12]	; (8007040 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8007032:	f002 fb01 	bl	8009638 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8007036:	4803      	ldr	r0, [pc, #12]	; (8007044 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8007038:	f002 fafe 	bl	8009638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800703c:	bf00      	nop
 800703e:	bd80      	pop	{r7, pc}
 8007040:	2000028c 	.word	0x2000028c
 8007044:	200002d4 	.word	0x200002d4

08007048 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800704c:	4802      	ldr	r0, [pc, #8]	; (8007058 <TIM5_IRQHandler+0x10>)
 800704e:	f002 faf3 	bl	8009638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007052:	bf00      	nop
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000244 	.word	0x20000244

0800705c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
	return 1;
 8007060:	2301      	movs	r3, #1
}
 8007062:	4618      	mov	r0, r3
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <_kill>:

int _kill(int pid, int sig)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007076:	f004 fd0d 	bl	800ba94 <__errno>
 800707a:	4603      	mov	r3, r0
 800707c:	2216      	movs	r2, #22
 800707e:	601a      	str	r2, [r3, #0]
	return -1;
 8007080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <_exit>:

void _exit (int status)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007094:	f04f 31ff 	mov.w	r1, #4294967295
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff ffe7 	bl	800706c <_kill>
	while (1) {}		/* Make sure we hang here */
 800709e:	e7fe      	b.n	800709e <_exit+0x12>

080070a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80070a8:	4a14      	ldr	r2, [pc, #80]	; (80070fc <_sbrk+0x5c>)
 80070aa:	4b15      	ldr	r3, [pc, #84]	; (8007100 <_sbrk+0x60>)
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80070b4:	4b13      	ldr	r3, [pc, #76]	; (8007104 <_sbrk+0x64>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80070bc:	4b11      	ldr	r3, [pc, #68]	; (8007104 <_sbrk+0x64>)
 80070be:	4a12      	ldr	r2, [pc, #72]	; (8007108 <_sbrk+0x68>)
 80070c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80070c2:	4b10      	ldr	r3, [pc, #64]	; (8007104 <_sbrk+0x64>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4413      	add	r3, r2
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d207      	bcs.n	80070e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80070d0:	f004 fce0 	bl	800ba94 <__errno>
 80070d4:	4603      	mov	r3, r0
 80070d6:	220c      	movs	r2, #12
 80070d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80070da:	f04f 33ff 	mov.w	r3, #4294967295
 80070de:	e009      	b.n	80070f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80070e0:	4b08      	ldr	r3, [pc, #32]	; (8007104 <_sbrk+0x64>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80070e6:	4b07      	ldr	r3, [pc, #28]	; (8007104 <_sbrk+0x64>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4413      	add	r3, r2
 80070ee:	4a05      	ldr	r2, [pc, #20]	; (8007104 <_sbrk+0x64>)
 80070f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80070f2:	68fb      	ldr	r3, [r7, #12]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20020000 	.word	0x20020000
 8007100:	00000400 	.word	0x00000400
 8007104:	20001be4 	.word	0x20001be4
 8007108:	20001c00 	.word	0x20001c00

0800710c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007110:	4b06      	ldr	r3, [pc, #24]	; (800712c <SystemInit+0x20>)
 8007112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007116:	4a05      	ldr	r2, [pc, #20]	; (800712c <SystemInit+0x20>)
 8007118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800711c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007120:	bf00      	nop
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	e000ed00 	.word	0xe000ed00

08007130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007134:	480d      	ldr	r0, [pc, #52]	; (800716c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007136:	490e      	ldr	r1, [pc, #56]	; (8007170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007138:	4a0e      	ldr	r2, [pc, #56]	; (8007174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800713a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800713c:	e002      	b.n	8007144 <LoopCopyDataInit>

0800713e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800713e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007142:	3304      	adds	r3, #4

08007144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007148:	d3f9      	bcc.n	800713e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800714a:	4a0b      	ldr	r2, [pc, #44]	; (8007178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800714c:	4c0b      	ldr	r4, [pc, #44]	; (800717c <LoopFillZerobss+0x26>)
  movs r3, #0
 800714e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007150:	e001      	b.n	8007156 <LoopFillZerobss>

08007152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007154:	3204      	adds	r2, #4

08007156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007158:	d3fb      	bcc.n	8007152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800715a:	f7ff ffd7 	bl	800710c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800715e:	f004 fc9f 	bl	800baa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007162:	f7fa fa5f 	bl	8001624 <main>
  bx  lr    
 8007166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800716c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007170:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8007174:	0800c1b8 	.word	0x0800c1b8
  ldr r2, =_sbss
 8007178:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 800717c:	20001bfc 	.word	0x20001bfc

08007180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007180:	e7fe      	b.n	8007180 <ADC_IRQHandler>
	...

08007184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007188:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <HAL_Init+0x40>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a0d      	ldr	r2, [pc, #52]	; (80071c4 <HAL_Init+0x40>)
 800718e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007194:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <HAL_Init+0x40>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a0a      	ldr	r2, [pc, #40]	; (80071c4 <HAL_Init+0x40>)
 800719a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800719e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071a0:	4b08      	ldr	r3, [pc, #32]	; (80071c4 <HAL_Init+0x40>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a07      	ldr	r2, [pc, #28]	; (80071c4 <HAL_Init+0x40>)
 80071a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071ac:	2003      	movs	r0, #3
 80071ae:	f000 f989 	bl	80074c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80071b2:	200f      	movs	r0, #15
 80071b4:	f000 f808 	bl	80071c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80071b8:	f7ff fb72 	bl	80068a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40023c00 	.word	0x40023c00

080071c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80071d0:	4b12      	ldr	r3, [pc, #72]	; (800721c <HAL_InitTick+0x54>)
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	4b12      	ldr	r3, [pc, #72]	; (8007220 <HAL_InitTick+0x58>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	4619      	mov	r1, r3
 80071da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071de:	fbb3 f3f1 	udiv	r3, r3, r1
 80071e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 f9b3 	bl	8007552 <HAL_SYSTICK_Config>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e00e      	b.n	8007214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b0f      	cmp	r3, #15
 80071fa:	d80a      	bhi.n	8007212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80071fc:	2200      	movs	r2, #0
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	f000 f969 	bl	80074da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007208:	4a06      	ldr	r2, [pc, #24]	; (8007224 <HAL_InitTick+0x5c>)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e000      	b.n	8007214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000050 	.word	0x20000050
 8007220:	20000058 	.word	0x20000058
 8007224:	20000054 	.word	0x20000054

08007228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800722c:	4b06      	ldr	r3, [pc, #24]	; (8007248 <HAL_IncTick+0x20>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	4b06      	ldr	r3, [pc, #24]	; (800724c <HAL_IncTick+0x24>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4413      	add	r3, r2
 8007238:	4a04      	ldr	r2, [pc, #16]	; (800724c <HAL_IncTick+0x24>)
 800723a:	6013      	str	r3, [r2, #0]
}
 800723c:	bf00      	nop
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20000058 	.word	0x20000058
 800724c:	20001be8 	.word	0x20001be8

08007250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  return uwTick;
 8007254:	4b03      	ldr	r3, [pc, #12]	; (8007264 <HAL_GetTick+0x14>)
 8007256:	681b      	ldr	r3, [r3, #0]
}
 8007258:	4618      	mov	r0, r3
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20001be8 	.word	0x20001be8

08007268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007270:	f7ff ffee 	bl	8007250 <HAL_GetTick>
 8007274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d005      	beq.n	800728e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007282:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <HAL_Delay+0x44>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800728e:	bf00      	nop
 8007290:	f7ff ffde 	bl	8007250 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	429a      	cmp	r2, r3
 800729e:	d8f7      	bhi.n	8007290 <HAL_Delay+0x28>
  {
  }
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20000058 	.word	0x20000058

080072b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f003 0307 	and.w	r3, r3, #7
 80072be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072c0:	4b0c      	ldr	r3, [pc, #48]	; (80072f4 <__NVIC_SetPriorityGrouping+0x44>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072cc:	4013      	ands	r3, r2
 80072ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80072dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072e2:	4a04      	ldr	r2, [pc, #16]	; (80072f4 <__NVIC_SetPriorityGrouping+0x44>)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	60d3      	str	r3, [r2, #12]
}
 80072e8:	bf00      	nop
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	e000ed00 	.word	0xe000ed00

080072f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072fc:	4b04      	ldr	r3, [pc, #16]	; (8007310 <__NVIC_GetPriorityGrouping+0x18>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	0a1b      	lsrs	r3, r3, #8
 8007302:	f003 0307 	and.w	r3, r3, #7
}
 8007306:	4618      	mov	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	e000ed00 	.word	0xe000ed00

08007314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800731e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007322:	2b00      	cmp	r3, #0
 8007324:	db0b      	blt.n	800733e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	f003 021f 	and.w	r2, r3, #31
 800732c:	4907      	ldr	r1, [pc, #28]	; (800734c <__NVIC_EnableIRQ+0x38>)
 800732e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	2001      	movs	r0, #1
 8007336:	fa00 f202 	lsl.w	r2, r0, r2
 800733a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	e000e100 	.word	0xe000e100

08007350 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800735a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800735e:	2b00      	cmp	r3, #0
 8007360:	db12      	blt.n	8007388 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007362:	79fb      	ldrb	r3, [r7, #7]
 8007364:	f003 021f 	and.w	r2, r3, #31
 8007368:	490a      	ldr	r1, [pc, #40]	; (8007394 <__NVIC_DisableIRQ+0x44>)
 800736a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800736e:	095b      	lsrs	r3, r3, #5
 8007370:	2001      	movs	r0, #1
 8007372:	fa00 f202 	lsl.w	r2, r0, r2
 8007376:	3320      	adds	r3, #32
 8007378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800737c:	f3bf 8f4f 	dsb	sy
}
 8007380:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007382:	f3bf 8f6f 	isb	sy
}
 8007386:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	e000e100 	.word	0xe000e100

08007398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	6039      	str	r1, [r7, #0]
 80073a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	db0a      	blt.n	80073c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	490c      	ldr	r1, [pc, #48]	; (80073e4 <__NVIC_SetPriority+0x4c>)
 80073b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073b6:	0112      	lsls	r2, r2, #4
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	440b      	add	r3, r1
 80073bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80073c0:	e00a      	b.n	80073d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	4908      	ldr	r1, [pc, #32]	; (80073e8 <__NVIC_SetPriority+0x50>)
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	3b04      	subs	r3, #4
 80073d0:	0112      	lsls	r2, r2, #4
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	440b      	add	r3, r1
 80073d6:	761a      	strb	r2, [r3, #24]
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	e000e100 	.word	0xe000e100
 80073e8:	e000ed00 	.word	0xe000ed00

080073ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b089      	sub	sp, #36	; 0x24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	f1c3 0307 	rsb	r3, r3, #7
 8007406:	2b04      	cmp	r3, #4
 8007408:	bf28      	it	cs
 800740a:	2304      	movcs	r3, #4
 800740c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	3304      	adds	r3, #4
 8007412:	2b06      	cmp	r3, #6
 8007414:	d902      	bls.n	800741c <NVIC_EncodePriority+0x30>
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	3b03      	subs	r3, #3
 800741a:	e000      	b.n	800741e <NVIC_EncodePriority+0x32>
 800741c:	2300      	movs	r3, #0
 800741e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007420:	f04f 32ff 	mov.w	r2, #4294967295
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	43da      	mvns	r2, r3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	401a      	ands	r2, r3
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007434:	f04f 31ff 	mov.w	r1, #4294967295
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	fa01 f303 	lsl.w	r3, r1, r3
 800743e:	43d9      	mvns	r1, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007444:	4313      	orrs	r3, r2
         );
}
 8007446:	4618      	mov	r0, r3
 8007448:	3724      	adds	r7, #36	; 0x24
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007458:	f3bf 8f4f 	dsb	sy
}
 800745c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800745e:	4b06      	ldr	r3, [pc, #24]	; (8007478 <__NVIC_SystemReset+0x24>)
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007466:	4904      	ldr	r1, [pc, #16]	; (8007478 <__NVIC_SystemReset+0x24>)
 8007468:	4b04      	ldr	r3, [pc, #16]	; (800747c <__NVIC_SystemReset+0x28>)
 800746a:	4313      	orrs	r3, r2
 800746c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800746e:	f3bf 8f4f 	dsb	sy
}
 8007472:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007474:	bf00      	nop
 8007476:	e7fd      	b.n	8007474 <__NVIC_SystemReset+0x20>
 8007478:	e000ed00 	.word	0xe000ed00
 800747c:	05fa0004 	.word	0x05fa0004

08007480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3b01      	subs	r3, #1
 800748c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007490:	d301      	bcc.n	8007496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007492:	2301      	movs	r3, #1
 8007494:	e00f      	b.n	80074b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007496:	4a0a      	ldr	r2, [pc, #40]	; (80074c0 <SysTick_Config+0x40>)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3b01      	subs	r3, #1
 800749c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800749e:	210f      	movs	r1, #15
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	f7ff ff78 	bl	8007398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80074a8:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <SysTick_Config+0x40>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074ae:	4b04      	ldr	r3, [pc, #16]	; (80074c0 <SysTick_Config+0x40>)
 80074b0:	2207      	movs	r2, #7
 80074b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	e000e010 	.word	0xe000e010

080074c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff feef 	bl	80072b0 <__NVIC_SetPriorityGrouping>
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80074da:	b580      	push	{r7, lr}
 80074dc:	b086      	sub	sp, #24
 80074de:	af00      	add	r7, sp, #0
 80074e0:	4603      	mov	r3, r0
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80074ec:	f7ff ff04 	bl	80072f8 <__NVIC_GetPriorityGrouping>
 80074f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	6978      	ldr	r0, [r7, #20]
 80074f8:	f7ff ff78 	bl	80073ec <NVIC_EncodePriority>
 80074fc:	4602      	mov	r2, r0
 80074fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007502:	4611      	mov	r1, r2
 8007504:	4618      	mov	r0, r3
 8007506:	f7ff ff47 	bl	8007398 <__NVIC_SetPriority>
}
 800750a:	bf00      	nop
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	af00      	add	r7, sp, #0
 8007518:	4603      	mov	r3, r0
 800751a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800751c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff fef7 	bl	8007314 <__NVIC_EnableIRQ>
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	4603      	mov	r3, r0
 8007536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff ff07 	bl	8007350 <__NVIC_DisableIRQ>
}
 8007542:	bf00      	nop
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800754e:	f7ff ff81 	bl	8007454 <__NVIC_SystemReset>

08007552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff ff90 	bl	8007480 <SysTick_Config>
 8007560:	4603      	mov	r3, r0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007578:	f7ff fe6a 	bl	8007250 <HAL_GetTick>
 800757c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e099      	b.n	80076bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0201 	bic.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075a8:	e00f      	b.n	80075ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075aa:	f7ff fe51 	bl	8007250 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b05      	cmp	r3, #5
 80075b6:	d908      	bls.n	80075ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2203      	movs	r2, #3
 80075c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e078      	b.n	80076bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e8      	bne.n	80075aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	4b38      	ldr	r3, [pc, #224]	; (80076c4 <HAL_DMA_Init+0x158>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007602:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800760e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	2b04      	cmp	r3, #4
 8007622:	d107      	bne.n	8007634 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762c:	4313      	orrs	r3, r2
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	4313      	orrs	r3, r2
 8007632:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f023 0307 	bic.w	r3, r3, #7
 800764a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	2b04      	cmp	r3, #4
 800765c:	d117      	bne.n	800768e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00e      	beq.n	800768e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fb5f 	bl	8007d34 <DMA_CheckFifoParam>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d008      	beq.n	800768e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2240      	movs	r2, #64	; 0x40
 8007680:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800768a:	2301      	movs	r3, #1
 800768c:	e016      	b.n	80076bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fb16 	bl	8007cc8 <DMA_CalcBaseAndBitshift>
 800769c:	4603      	mov	r3, r0
 800769e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a4:	223f      	movs	r2, #63	; 0x3f
 80076a6:	409a      	lsls	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	f010803f 	.word	0xf010803f

080076c8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e050      	b.n	800777c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d101      	bne.n	80076ea <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80076e6:	2302      	movs	r3, #2
 80076e8:	e048      	b.n	800777c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0201 	bic.w	r2, r2, #1
 80076f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2200      	movs	r2, #0
 8007708:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2200      	movs	r2, #0
 8007710:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2200      	movs	r2, #0
 8007718:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2200      	movs	r2, #0
 8007720:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2221      	movs	r2, #33	; 0x21
 8007728:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 facc 	bl	8007cc8 <DMA_CalcBaseAndBitshift>
 8007730:	4603      	mov	r3, r0
 8007732:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775c:	223f      	movs	r2, #63	; 0x3f
 800775e:	409a      	lsls	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_DMA_Start_IT+0x26>
 80077a6:	2302      	movs	r3, #2
 80077a8:	e040      	b.n	800782c <HAL_DMA_Start_IT+0xa8>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d12f      	bne.n	800781e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2202      	movs	r2, #2
 80077c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 fa4a 	bl	8007c6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077dc:	223f      	movs	r2, #63	; 0x3f
 80077de:	409a      	lsls	r2, r3
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0216 	orr.w	r2, r2, #22
 80077f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d007      	beq.n	800780c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0208 	orr.w	r2, r2, #8
 800780a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0201 	orr.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	e005      	b.n	800782a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007826:	2302      	movs	r3, #2
 8007828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800782a:	7dfb      	ldrb	r3, [r7, #23]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007840:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007842:	f7ff fd05 	bl	8007250 <HAL_GetTick>
 8007846:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d008      	beq.n	8007866 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2280      	movs	r2, #128	; 0x80
 8007858:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e052      	b.n	800790c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0216 	bic.w	r2, r2, #22
 8007874:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007884:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d103      	bne.n	8007896 <HAL_DMA_Abort+0x62>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007892:	2b00      	cmp	r3, #0
 8007894:	d007      	beq.n	80078a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0208 	bic.w	r2, r2, #8
 80078a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0201 	bic.w	r2, r2, #1
 80078b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078b6:	e013      	b.n	80078e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078b8:	f7ff fcca 	bl	8007250 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b05      	cmp	r3, #5
 80078c4:	d90c      	bls.n	80078e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2220      	movs	r2, #32
 80078ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2203      	movs	r2, #3
 80078d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e015      	b.n	800790c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e4      	bne.n	80078b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f2:	223f      	movs	r2, #63	; 0x3f
 80078f4:	409a      	lsls	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d004      	beq.n	8007932 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2280      	movs	r2, #128	; 0x80
 800792c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e00c      	b.n	800794c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2205      	movs	r2, #5
 8007936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0201 	bic.w	r2, r2, #1
 8007948:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007964:	4b8e      	ldr	r3, [pc, #568]	; (8007ba0 <HAL_DMA_IRQHandler+0x248>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a8e      	ldr	r2, [pc, #568]	; (8007ba4 <HAL_DMA_IRQHandler+0x24c>)
 800796a:	fba2 2303 	umull	r2, r3, r2, r3
 800796e:	0a9b      	lsrs	r3, r3, #10
 8007970:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007976:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007982:	2208      	movs	r2, #8
 8007984:	409a      	lsls	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4013      	ands	r3, r2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01a      	beq.n	80079c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d013      	beq.n	80079c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0204 	bic.w	r2, r2, #4
 80079aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b0:	2208      	movs	r2, #8
 80079b2:	409a      	lsls	r2, r3
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079bc:	f043 0201 	orr.w	r2, r3, #1
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c8:	2201      	movs	r2, #1
 80079ca:	409a      	lsls	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d012      	beq.n	80079fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e6:	2201      	movs	r2, #1
 80079e8:	409a      	lsls	r2, r3
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	f043 0202 	orr.w	r2, r3, #2
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079fe:	2204      	movs	r2, #4
 8007a00:	409a      	lsls	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4013      	ands	r3, r2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d012      	beq.n	8007a30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	409a      	lsls	r2, r3
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a28:	f043 0204 	orr.w	r2, r3, #4
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a34:	2210      	movs	r2, #16
 8007a36:	409a      	lsls	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d043      	beq.n	8007ac8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0308 	and.w	r3, r3, #8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d03c      	beq.n	8007ac8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a52:	2210      	movs	r2, #16
 8007a54:	409a      	lsls	r2, r3
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d018      	beq.n	8007a9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d108      	bne.n	8007a88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d024      	beq.n	8007ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	4798      	blx	r3
 8007a86:	e01f      	b.n	8007ac8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01b      	beq.n	8007ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
 8007a98:	e016      	b.n	8007ac8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d107      	bne.n	8007ab8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0208 	bic.w	r2, r2, #8
 8007ab6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007acc:	2220      	movs	r2, #32
 8007ace:	409a      	lsls	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 808f 	beq.w	8007bf8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0310 	and.w	r3, r3, #16
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 8087 	beq.w	8007bf8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aee:	2220      	movs	r2, #32
 8007af0:	409a      	lsls	r2, r3
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b05      	cmp	r3, #5
 8007b00:	d136      	bne.n	8007b70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0216 	bic.w	r2, r2, #22
 8007b10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	695a      	ldr	r2, [r3, #20]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d103      	bne.n	8007b32 <HAL_DMA_IRQHandler+0x1da>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d007      	beq.n	8007b42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f022 0208 	bic.w	r2, r2, #8
 8007b40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b46:	223f      	movs	r2, #63	; 0x3f
 8007b48:	409a      	lsls	r2, r3
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d07e      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
        }
        return;
 8007b6e:	e079      	b.n	8007c64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d01d      	beq.n	8007bba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10d      	bne.n	8007ba8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d031      	beq.n	8007bf8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	4798      	blx	r3
 8007b9c:	e02c      	b.n	8007bf8 <HAL_DMA_IRQHandler+0x2a0>
 8007b9e:	bf00      	nop
 8007ba0:	20000050 	.word	0x20000050
 8007ba4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d023      	beq.n	8007bf8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	4798      	blx	r3
 8007bb8:	e01e      	b.n	8007bf8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10f      	bne.n	8007be8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0210 	bic.w	r2, r2, #16
 8007bd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d032      	beq.n	8007c66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d022      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2205      	movs	r2, #5
 8007c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0201 	bic.w	r2, r2, #1
 8007c22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60bb      	str	r3, [r7, #8]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d307      	bcc.n	8007c40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1f2      	bne.n	8007c24 <HAL_DMA_IRQHandler+0x2cc>
 8007c3e:	e000      	b.n	8007c42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007c40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
 8007c62:	e000      	b.n	8007c66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007c64:	bf00      	nop
    }
  }
}
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	2b40      	cmp	r3, #64	; 0x40
 8007c98:	d108      	bne.n	8007cac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007caa:	e007      	b.n	8007cbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	60da      	str	r2, [r3, #12]
}
 8007cbc:	bf00      	nop
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	3b10      	subs	r3, #16
 8007cd8:	4a14      	ldr	r2, [pc, #80]	; (8007d2c <DMA_CalcBaseAndBitshift+0x64>)
 8007cda:	fba2 2303 	umull	r2, r3, r2, r3
 8007cde:	091b      	lsrs	r3, r3, #4
 8007ce0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007ce2:	4a13      	ldr	r2, [pc, #76]	; (8007d30 <DMA_CalcBaseAndBitshift+0x68>)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d909      	bls.n	8007d0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007cfe:	f023 0303 	bic.w	r3, r3, #3
 8007d02:	1d1a      	adds	r2, r3, #4
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	659a      	str	r2, [r3, #88]	; 0x58
 8007d08:	e007      	b.n	8007d1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007d12:	f023 0303 	bic.w	r3, r3, #3
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	aaaaaaab 	.word	0xaaaaaaab
 8007d30:	0800c19c 	.word	0x0800c19c

08007d34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d11f      	bne.n	8007d8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d856      	bhi.n	8007e02 <DMA_CheckFifoParam+0xce>
 8007d54:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <DMA_CheckFifoParam+0x28>)
 8007d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5a:	bf00      	nop
 8007d5c:	08007d6d 	.word	0x08007d6d
 8007d60:	08007d7f 	.word	0x08007d7f
 8007d64:	08007d6d 	.word	0x08007d6d
 8007d68:	08007e03 	.word	0x08007e03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d046      	beq.n	8007e06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d7c:	e043      	b.n	8007e06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d86:	d140      	bne.n	8007e0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d8c:	e03d      	b.n	8007e0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d96:	d121      	bne.n	8007ddc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d837      	bhi.n	8007e0e <DMA_CheckFifoParam+0xda>
 8007d9e:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <DMA_CheckFifoParam+0x70>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007db5 	.word	0x08007db5
 8007da8:	08007dbb 	.word	0x08007dbb
 8007dac:	08007db5 	.word	0x08007db5
 8007db0:	08007dcd 	.word	0x08007dcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	73fb      	strb	r3, [r7, #15]
      break;
 8007db8:	e030      	b.n	8007e1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d025      	beq.n	8007e12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dca:	e022      	b.n	8007e12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007dd4:	d11f      	bne.n	8007e16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007dda:	e01c      	b.n	8007e16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d903      	bls.n	8007dea <DMA_CheckFifoParam+0xb6>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d003      	beq.n	8007df0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007de8:	e018      	b.n	8007e1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	73fb      	strb	r3, [r7, #15]
      break;
 8007dee:	e015      	b.n	8007e1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00e      	beq.n	8007e1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007e00:	e00b      	b.n	8007e1a <DMA_CheckFifoParam+0xe6>
      break;
 8007e02:	bf00      	nop
 8007e04:	e00a      	b.n	8007e1c <DMA_CheckFifoParam+0xe8>
      break;
 8007e06:	bf00      	nop
 8007e08:	e008      	b.n	8007e1c <DMA_CheckFifoParam+0xe8>
      break;
 8007e0a:	bf00      	nop
 8007e0c:	e006      	b.n	8007e1c <DMA_CheckFifoParam+0xe8>
      break;
 8007e0e:	bf00      	nop
 8007e10:	e004      	b.n	8007e1c <DMA_CheckFifoParam+0xe8>
      break;
 8007e12:	bf00      	nop
 8007e14:	e002      	b.n	8007e1c <DMA_CheckFifoParam+0xe8>
      break;   
 8007e16:	bf00      	nop
 8007e18:	e000      	b.n	8007e1c <DMA_CheckFifoParam+0xe8>
      break;
 8007e1a:	bf00      	nop
    }
  } 
  
  return status; 
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop

08007e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b089      	sub	sp, #36	; 0x24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e42:	2300      	movs	r3, #0
 8007e44:	61fb      	str	r3, [r7, #28]
 8007e46:	e165      	b.n	8008114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007e48:	2201      	movs	r2, #1
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	f040 8154 	bne.w	800810e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f003 0303 	and.w	r3, r3, #3
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d005      	beq.n	8007e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d130      	bne.n	8007ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	2203      	movs	r2, #3
 8007e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8e:	43db      	mvns	r3, r3
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	4013      	ands	r3, r2
 8007e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	091b      	lsrs	r3, r3, #4
 8007eca:	f003 0201 	and.w	r2, r3, #1
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f003 0303 	and.w	r3, r3, #3
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d017      	beq.n	8007f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	2203      	movs	r2, #3
 8007ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8007efc:	43db      	mvns	r3, r3
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	4013      	ands	r3, r2
 8007f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f003 0303 	and.w	r3, r3, #3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d123      	bne.n	8007f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	08da      	lsrs	r2, r3, #3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3208      	adds	r2, #8
 8007f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	220f      	movs	r2, #15
 8007f40:	fa02 f303 	lsl.w	r3, r2, r3
 8007f44:	43db      	mvns	r3, r3
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	4013      	ands	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	08da      	lsrs	r2, r3, #3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3208      	adds	r2, #8
 8007f6a:	69b9      	ldr	r1, [r7, #24]
 8007f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	005b      	lsls	r3, r3, #1
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	43db      	mvns	r3, r3
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	4013      	ands	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f003 0203 	and.w	r2, r3, #3
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	fa02 f303 	lsl.w	r3, r2, r3
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 80ae 	beq.w	800810e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60fb      	str	r3, [r7, #12]
 8007fb6:	4b5d      	ldr	r3, [pc, #372]	; (800812c <HAL_GPIO_Init+0x300>)
 8007fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fba:	4a5c      	ldr	r2, [pc, #368]	; (800812c <HAL_GPIO_Init+0x300>)
 8007fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8007fc2:	4b5a      	ldr	r3, [pc, #360]	; (800812c <HAL_GPIO_Init+0x300>)
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fce:	4a58      	ldr	r2, [pc, #352]	; (8008130 <HAL_GPIO_Init+0x304>)
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	089b      	lsrs	r3, r3, #2
 8007fd4:	3302      	adds	r3, #2
 8007fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	220f      	movs	r2, #15
 8007fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fea:	43db      	mvns	r3, r3
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a4f      	ldr	r2, [pc, #316]	; (8008134 <HAL_GPIO_Init+0x308>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d025      	beq.n	8008046 <HAL_GPIO_Init+0x21a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a4e      	ldr	r2, [pc, #312]	; (8008138 <HAL_GPIO_Init+0x30c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d01f      	beq.n	8008042 <HAL_GPIO_Init+0x216>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a4d      	ldr	r2, [pc, #308]	; (800813c <HAL_GPIO_Init+0x310>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d019      	beq.n	800803e <HAL_GPIO_Init+0x212>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a4c      	ldr	r2, [pc, #304]	; (8008140 <HAL_GPIO_Init+0x314>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d013      	beq.n	800803a <HAL_GPIO_Init+0x20e>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a4b      	ldr	r2, [pc, #300]	; (8008144 <HAL_GPIO_Init+0x318>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00d      	beq.n	8008036 <HAL_GPIO_Init+0x20a>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a4a      	ldr	r2, [pc, #296]	; (8008148 <HAL_GPIO_Init+0x31c>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d007      	beq.n	8008032 <HAL_GPIO_Init+0x206>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a49      	ldr	r2, [pc, #292]	; (800814c <HAL_GPIO_Init+0x320>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d101      	bne.n	800802e <HAL_GPIO_Init+0x202>
 800802a:	2306      	movs	r3, #6
 800802c:	e00c      	b.n	8008048 <HAL_GPIO_Init+0x21c>
 800802e:	2307      	movs	r3, #7
 8008030:	e00a      	b.n	8008048 <HAL_GPIO_Init+0x21c>
 8008032:	2305      	movs	r3, #5
 8008034:	e008      	b.n	8008048 <HAL_GPIO_Init+0x21c>
 8008036:	2304      	movs	r3, #4
 8008038:	e006      	b.n	8008048 <HAL_GPIO_Init+0x21c>
 800803a:	2303      	movs	r3, #3
 800803c:	e004      	b.n	8008048 <HAL_GPIO_Init+0x21c>
 800803e:	2302      	movs	r3, #2
 8008040:	e002      	b.n	8008048 <HAL_GPIO_Init+0x21c>
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <HAL_GPIO_Init+0x21c>
 8008046:	2300      	movs	r3, #0
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	f002 0203 	and.w	r2, r2, #3
 800804e:	0092      	lsls	r2, r2, #2
 8008050:	4093      	lsls	r3, r2
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	4313      	orrs	r3, r2
 8008056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008058:	4935      	ldr	r1, [pc, #212]	; (8008130 <HAL_GPIO_Init+0x304>)
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	089b      	lsrs	r3, r3, #2
 800805e:	3302      	adds	r3, #2
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008066:	4b3a      	ldr	r3, [pc, #232]	; (8008150 <HAL_GPIO_Init+0x324>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	43db      	mvns	r3, r3
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	4013      	ands	r3, r2
 8008074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800808a:	4a31      	ldr	r2, [pc, #196]	; (8008150 <HAL_GPIO_Init+0x324>)
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008090:	4b2f      	ldr	r3, [pc, #188]	; (8008150 <HAL_GPIO_Init+0x324>)
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	43db      	mvns	r3, r3
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	4013      	ands	r3, r2
 800809e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080b4:	4a26      	ldr	r2, [pc, #152]	; (8008150 <HAL_GPIO_Init+0x324>)
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80080ba:	4b25      	ldr	r3, [pc, #148]	; (8008150 <HAL_GPIO_Init+0x324>)
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	43db      	mvns	r3, r3
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	4013      	ands	r3, r2
 80080c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	4313      	orrs	r3, r2
 80080dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80080de:	4a1c      	ldr	r2, [pc, #112]	; (8008150 <HAL_GPIO_Init+0x324>)
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80080e4:	4b1a      	ldr	r3, [pc, #104]	; (8008150 <HAL_GPIO_Init+0x324>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	43db      	mvns	r3, r3
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	4013      	ands	r3, r2
 80080f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008108:	4a11      	ldr	r2, [pc, #68]	; (8008150 <HAL_GPIO_Init+0x324>)
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	3301      	adds	r3, #1
 8008112:	61fb      	str	r3, [r7, #28]
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	2b0f      	cmp	r3, #15
 8008118:	f67f ae96 	bls.w	8007e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	3724      	adds	r7, #36	; 0x24
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	40023800 	.word	0x40023800
 8008130:	40013800 	.word	0x40013800
 8008134:	40020000 	.word	0x40020000
 8008138:	40020400 	.word	0x40020400
 800813c:	40020800 	.word	0x40020800
 8008140:	40020c00 	.word	0x40020c00
 8008144:	40021000 	.word	0x40021000
 8008148:	40021400 	.word	0x40021400
 800814c:	40021800 	.word	0x40021800
 8008150:	40013c00 	.word	0x40013c00

08008154 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800815e:	2300      	movs	r3, #0
 8008160:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8008166:	2300      	movs	r3, #0
 8008168:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	e0c7      	b.n	8008300 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008170:	2201      	movs	r2, #1
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	fa02 f303 	lsl.w	r3, r2, r3
 8008178:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	4013      	ands	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	429a      	cmp	r2, r3
 8008188:	f040 80b7 	bne.w	80082fa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800818c:	4a62      	ldr	r2, [pc, #392]	; (8008318 <HAL_GPIO_DeInit+0x1c4>)
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	089b      	lsrs	r3, r3, #2
 8008192:	3302      	adds	r3, #2
 8008194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008198:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	220f      	movs	r2, #15
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	4013      	ands	r3, r2
 80081ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a5a      	ldr	r2, [pc, #360]	; (800831c <HAL_GPIO_DeInit+0x1c8>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d025      	beq.n	8008202 <HAL_GPIO_DeInit+0xae>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a59      	ldr	r2, [pc, #356]	; (8008320 <HAL_GPIO_DeInit+0x1cc>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d01f      	beq.n	80081fe <HAL_GPIO_DeInit+0xaa>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a58      	ldr	r2, [pc, #352]	; (8008324 <HAL_GPIO_DeInit+0x1d0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d019      	beq.n	80081fa <HAL_GPIO_DeInit+0xa6>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a57      	ldr	r2, [pc, #348]	; (8008328 <HAL_GPIO_DeInit+0x1d4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d013      	beq.n	80081f6 <HAL_GPIO_DeInit+0xa2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a56      	ldr	r2, [pc, #344]	; (800832c <HAL_GPIO_DeInit+0x1d8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d00d      	beq.n	80081f2 <HAL_GPIO_DeInit+0x9e>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a55      	ldr	r2, [pc, #340]	; (8008330 <HAL_GPIO_DeInit+0x1dc>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d007      	beq.n	80081ee <HAL_GPIO_DeInit+0x9a>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a54      	ldr	r2, [pc, #336]	; (8008334 <HAL_GPIO_DeInit+0x1e0>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d101      	bne.n	80081ea <HAL_GPIO_DeInit+0x96>
 80081e6:	2306      	movs	r3, #6
 80081e8:	e00c      	b.n	8008204 <HAL_GPIO_DeInit+0xb0>
 80081ea:	2307      	movs	r3, #7
 80081ec:	e00a      	b.n	8008204 <HAL_GPIO_DeInit+0xb0>
 80081ee:	2305      	movs	r3, #5
 80081f0:	e008      	b.n	8008204 <HAL_GPIO_DeInit+0xb0>
 80081f2:	2304      	movs	r3, #4
 80081f4:	e006      	b.n	8008204 <HAL_GPIO_DeInit+0xb0>
 80081f6:	2303      	movs	r3, #3
 80081f8:	e004      	b.n	8008204 <HAL_GPIO_DeInit+0xb0>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e002      	b.n	8008204 <HAL_GPIO_DeInit+0xb0>
 80081fe:	2301      	movs	r3, #1
 8008200:	e000      	b.n	8008204 <HAL_GPIO_DeInit+0xb0>
 8008202:	2300      	movs	r3, #0
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	f002 0203 	and.w	r2, r2, #3
 800820a:	0092      	lsls	r2, r2, #2
 800820c:	4093      	lsls	r3, r2
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	429a      	cmp	r2, r3
 8008212:	d132      	bne.n	800827a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008214:	4b48      	ldr	r3, [pc, #288]	; (8008338 <HAL_GPIO_DeInit+0x1e4>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	43db      	mvns	r3, r3
 800821c:	4946      	ldr	r1, [pc, #280]	; (8008338 <HAL_GPIO_DeInit+0x1e4>)
 800821e:	4013      	ands	r3, r2
 8008220:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008222:	4b45      	ldr	r3, [pc, #276]	; (8008338 <HAL_GPIO_DeInit+0x1e4>)
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	43db      	mvns	r3, r3
 800822a:	4943      	ldr	r1, [pc, #268]	; (8008338 <HAL_GPIO_DeInit+0x1e4>)
 800822c:	4013      	ands	r3, r2
 800822e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008230:	4b41      	ldr	r3, [pc, #260]	; (8008338 <HAL_GPIO_DeInit+0x1e4>)
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	43db      	mvns	r3, r3
 8008238:	493f      	ldr	r1, [pc, #252]	; (8008338 <HAL_GPIO_DeInit+0x1e4>)
 800823a:	4013      	ands	r3, r2
 800823c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800823e:	4b3e      	ldr	r3, [pc, #248]	; (8008338 <HAL_GPIO_DeInit+0x1e4>)
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	43db      	mvns	r3, r3
 8008246:	493c      	ldr	r1, [pc, #240]	; (8008338 <HAL_GPIO_DeInit+0x1e4>)
 8008248:	4013      	ands	r3, r2
 800824a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	220f      	movs	r2, #15
 8008256:	fa02 f303 	lsl.w	r3, r2, r3
 800825a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800825c:	4a2e      	ldr	r2, [pc, #184]	; (8008318 <HAL_GPIO_DeInit+0x1c4>)
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	089b      	lsrs	r3, r3, #2
 8008262:	3302      	adds	r3, #2
 8008264:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	43da      	mvns	r2, r3
 800826c:	482a      	ldr	r0, [pc, #168]	; (8008318 <HAL_GPIO_DeInit+0x1c4>)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	089b      	lsrs	r3, r3, #2
 8008272:	400a      	ands	r2, r1
 8008274:	3302      	adds	r3, #2
 8008276:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	2103      	movs	r1, #3
 8008284:	fa01 f303 	lsl.w	r3, r1, r3
 8008288:	43db      	mvns	r3, r3
 800828a:	401a      	ands	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	08da      	lsrs	r2, r3, #3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3208      	adds	r2, #8
 8008298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f003 0307 	and.w	r3, r3, #7
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	220f      	movs	r2, #15
 80082a6:	fa02 f303 	lsl.w	r3, r2, r3
 80082aa:	43db      	mvns	r3, r3
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	08d2      	lsrs	r2, r2, #3
 80082b0:	4019      	ands	r1, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3208      	adds	r2, #8
 80082b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68da      	ldr	r2, [r3, #12]
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	005b      	lsls	r3, r3, #1
 80082c2:	2103      	movs	r1, #3
 80082c4:	fa01 f303 	lsl.w	r3, r1, r3
 80082c8:	43db      	mvns	r3, r3
 80082ca:	401a      	ands	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	2101      	movs	r1, #1
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	fa01 f303 	lsl.w	r3, r1, r3
 80082dc:	43db      	mvns	r3, r3
 80082de:	401a      	ands	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	2103      	movs	r1, #3
 80082ee:	fa01 f303 	lsl.w	r3, r1, r3
 80082f2:	43db      	mvns	r3, r3
 80082f4:	401a      	ands	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	3301      	adds	r3, #1
 80082fe:	617b      	str	r3, [r7, #20]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2b0f      	cmp	r3, #15
 8008304:	f67f af34 	bls.w	8008170 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008308:	bf00      	nop
 800830a:	bf00      	nop
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	40013800 	.word	0x40013800
 800831c:	40020000 	.word	0x40020000
 8008320:	40020400 	.word	0x40020400
 8008324:	40020800 	.word	0x40020800
 8008328:	40020c00 	.word	0x40020c00
 800832c:	40021000 	.word	0x40021000
 8008330:	40021400 	.word	0x40021400
 8008334:	40021800 	.word	0x40021800
 8008338:	40013c00 	.word	0x40013c00

0800833c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	887b      	ldrh	r3, [r7, #2]
 800834e:	4013      	ands	r3, r2
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008354:	2301      	movs	r3, #1
 8008356:	73fb      	strb	r3, [r7, #15]
 8008358:	e001      	b.n	800835e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800835e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	807b      	strh	r3, [r7, #2]
 8008378:	4613      	mov	r3, r2
 800837a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800837c:	787b      	ldrb	r3, [r7, #1]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008382:	887a      	ldrh	r2, [r7, #2]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008388:	e003      	b.n	8008392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800838a:	887b      	ldrh	r3, [r7, #2]
 800838c:	041a      	lsls	r2, r3, #16
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	619a      	str	r2, [r3, #24]
}
 8008392:	bf00      	nop
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
	...

080083a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e0cc      	b.n	800854e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083b4:	4b68      	ldr	r3, [pc, #416]	; (8008558 <HAL_RCC_ClockConfig+0x1b8>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 030f 	and.w	r3, r3, #15
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d90c      	bls.n	80083dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083c2:	4b65      	ldr	r3, [pc, #404]	; (8008558 <HAL_RCC_ClockConfig+0x1b8>)
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ca:	4b63      	ldr	r3, [pc, #396]	; (8008558 <HAL_RCC_ClockConfig+0x1b8>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 030f 	and.w	r3, r3, #15
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d001      	beq.n	80083dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e0b8      	b.n	800854e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0302 	and.w	r3, r3, #2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d020      	beq.n	800842a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083f4:	4b59      	ldr	r3, [pc, #356]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	4a58      	ldr	r2, [pc, #352]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 80083fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80083fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800840c:	4b53      	ldr	r3, [pc, #332]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	4a52      	ldr	r2, [pc, #328]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 8008412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008418:	4b50      	ldr	r3, [pc, #320]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	494d      	ldr	r1, [pc, #308]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 8008426:	4313      	orrs	r3, r2
 8008428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d044      	beq.n	80084c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d107      	bne.n	800844e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800843e:	4b47      	ldr	r3, [pc, #284]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d119      	bne.n	800847e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e07f      	b.n	800854e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d003      	beq.n	800845e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800845a:	2b03      	cmp	r3, #3
 800845c:	d107      	bne.n	800846e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800845e:	4b3f      	ldr	r3, [pc, #252]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d109      	bne.n	800847e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e06f      	b.n	800854e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800846e:	4b3b      	ldr	r3, [pc, #236]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e067      	b.n	800854e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800847e:	4b37      	ldr	r3, [pc, #220]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f023 0203 	bic.w	r2, r3, #3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	4934      	ldr	r1, [pc, #208]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 800848c:	4313      	orrs	r3, r2
 800848e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008490:	f7fe fede 	bl	8007250 <HAL_GetTick>
 8008494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008496:	e00a      	b.n	80084ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008498:	f7fe feda 	bl	8007250 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d901      	bls.n	80084ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e04f      	b.n	800854e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ae:	4b2b      	ldr	r3, [pc, #172]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f003 020c 	and.w	r2, r3, #12
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	429a      	cmp	r2, r3
 80084be:	d1eb      	bne.n	8008498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084c0:	4b25      	ldr	r3, [pc, #148]	; (8008558 <HAL_RCC_ClockConfig+0x1b8>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d20c      	bcs.n	80084e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ce:	4b22      	ldr	r3, [pc, #136]	; (8008558 <HAL_RCC_ClockConfig+0x1b8>)
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	b2d2      	uxtb	r2, r2
 80084d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084d6:	4b20      	ldr	r3, [pc, #128]	; (8008558 <HAL_RCC_ClockConfig+0x1b8>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 030f 	and.w	r3, r3, #15
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d001      	beq.n	80084e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e032      	b.n	800854e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d008      	beq.n	8008506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084f4:	4b19      	ldr	r3, [pc, #100]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	4916      	ldr	r1, [pc, #88]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 8008502:	4313      	orrs	r3, r2
 8008504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0308 	and.w	r3, r3, #8
 800850e:	2b00      	cmp	r3, #0
 8008510:	d009      	beq.n	8008526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008512:	4b12      	ldr	r3, [pc, #72]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	00db      	lsls	r3, r3, #3
 8008520:	490e      	ldr	r1, [pc, #56]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 8008522:	4313      	orrs	r3, r2
 8008524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008526:	f000 f855 	bl	80085d4 <HAL_RCC_GetSysClockFreq>
 800852a:	4602      	mov	r2, r0
 800852c:	4b0b      	ldr	r3, [pc, #44]	; (800855c <HAL_RCC_ClockConfig+0x1bc>)
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	091b      	lsrs	r3, r3, #4
 8008532:	f003 030f 	and.w	r3, r3, #15
 8008536:	490a      	ldr	r1, [pc, #40]	; (8008560 <HAL_RCC_ClockConfig+0x1c0>)
 8008538:	5ccb      	ldrb	r3, [r1, r3]
 800853a:	fa22 f303 	lsr.w	r3, r2, r3
 800853e:	4a09      	ldr	r2, [pc, #36]	; (8008564 <HAL_RCC_ClockConfig+0x1c4>)
 8008540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <HAL_RCC_ClockConfig+0x1c8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fe3e 	bl	80071c8 <HAL_InitTick>

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	40023c00 	.word	0x40023c00
 800855c:	40023800 	.word	0x40023800
 8008560:	0800c184 	.word	0x0800c184
 8008564:	20000050 	.word	0x20000050
 8008568:	20000054 	.word	0x20000054

0800856c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008570:	4b03      	ldr	r3, [pc, #12]	; (8008580 <HAL_RCC_GetHCLKFreq+0x14>)
 8008572:	681b      	ldr	r3, [r3, #0]
}
 8008574:	4618      	mov	r0, r3
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20000050 	.word	0x20000050

08008584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008588:	f7ff fff0 	bl	800856c <HAL_RCC_GetHCLKFreq>
 800858c:	4602      	mov	r2, r0
 800858e:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	0a9b      	lsrs	r3, r3, #10
 8008594:	f003 0307 	and.w	r3, r3, #7
 8008598:	4903      	ldr	r1, [pc, #12]	; (80085a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800859a:	5ccb      	ldrb	r3, [r1, r3]
 800859c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	40023800 	.word	0x40023800
 80085a8:	0800c194 	.word	0x0800c194

080085ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085b0:	f7ff ffdc 	bl	800856c <HAL_RCC_GetHCLKFreq>
 80085b4:	4602      	mov	r2, r0
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	0b5b      	lsrs	r3, r3, #13
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	4903      	ldr	r1, [pc, #12]	; (80085d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085c2:	5ccb      	ldrb	r3, [r1, r3]
 80085c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	40023800 	.word	0x40023800
 80085d0:	0800c194 	.word	0x0800c194

080085d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085d8:	b0ae      	sub	sp, #184	; 0xb8
 80085da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085fa:	4bcb      	ldr	r3, [pc, #812]	; (8008928 <HAL_RCC_GetSysClockFreq+0x354>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f003 030c 	and.w	r3, r3, #12
 8008602:	2b0c      	cmp	r3, #12
 8008604:	f200 8206 	bhi.w	8008a14 <HAL_RCC_GetSysClockFreq+0x440>
 8008608:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <HAL_RCC_GetSysClockFreq+0x3c>)
 800860a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860e:	bf00      	nop
 8008610:	08008645 	.word	0x08008645
 8008614:	08008a15 	.word	0x08008a15
 8008618:	08008a15 	.word	0x08008a15
 800861c:	08008a15 	.word	0x08008a15
 8008620:	0800864d 	.word	0x0800864d
 8008624:	08008a15 	.word	0x08008a15
 8008628:	08008a15 	.word	0x08008a15
 800862c:	08008a15 	.word	0x08008a15
 8008630:	08008655 	.word	0x08008655
 8008634:	08008a15 	.word	0x08008a15
 8008638:	08008a15 	.word	0x08008a15
 800863c:	08008a15 	.word	0x08008a15
 8008640:	08008845 	.word	0x08008845
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008644:	4bb9      	ldr	r3, [pc, #740]	; (800892c <HAL_RCC_GetSysClockFreq+0x358>)
 8008646:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800864a:	e1e7      	b.n	8008a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800864c:	4bb8      	ldr	r3, [pc, #736]	; (8008930 <HAL_RCC_GetSysClockFreq+0x35c>)
 800864e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008652:	e1e3      	b.n	8008a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008654:	4bb4      	ldr	r3, [pc, #720]	; (8008928 <HAL_RCC_GetSysClockFreq+0x354>)
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800865c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008660:	4bb1      	ldr	r3, [pc, #708]	; (8008928 <HAL_RCC_GetSysClockFreq+0x354>)
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d071      	beq.n	8008750 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800866c:	4bae      	ldr	r3, [pc, #696]	; (8008928 <HAL_RCC_GetSysClockFreq+0x354>)
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	099b      	lsrs	r3, r3, #6
 8008672:	2200      	movs	r2, #0
 8008674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008678:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800867c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008688:	2300      	movs	r3, #0
 800868a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800868e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008692:	4622      	mov	r2, r4
 8008694:	462b      	mov	r3, r5
 8008696:	f04f 0000 	mov.w	r0, #0
 800869a:	f04f 0100 	mov.w	r1, #0
 800869e:	0159      	lsls	r1, r3, #5
 80086a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086a4:	0150      	lsls	r0, r2, #5
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	4621      	mov	r1, r4
 80086ac:	1a51      	subs	r1, r2, r1
 80086ae:	6439      	str	r1, [r7, #64]	; 0x40
 80086b0:	4629      	mov	r1, r5
 80086b2:	eb63 0301 	sbc.w	r3, r3, r1
 80086b6:	647b      	str	r3, [r7, #68]	; 0x44
 80086b8:	f04f 0200 	mov.w	r2, #0
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80086c4:	4649      	mov	r1, r9
 80086c6:	018b      	lsls	r3, r1, #6
 80086c8:	4641      	mov	r1, r8
 80086ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80086ce:	4641      	mov	r1, r8
 80086d0:	018a      	lsls	r2, r1, #6
 80086d2:	4641      	mov	r1, r8
 80086d4:	1a51      	subs	r1, r2, r1
 80086d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80086d8:	4649      	mov	r1, r9
 80086da:	eb63 0301 	sbc.w	r3, r3, r1
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086e0:	f04f 0200 	mov.w	r2, #0
 80086e4:	f04f 0300 	mov.w	r3, #0
 80086e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80086ec:	4649      	mov	r1, r9
 80086ee:	00cb      	lsls	r3, r1, #3
 80086f0:	4641      	mov	r1, r8
 80086f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086f6:	4641      	mov	r1, r8
 80086f8:	00ca      	lsls	r2, r1, #3
 80086fa:	4610      	mov	r0, r2
 80086fc:	4619      	mov	r1, r3
 80086fe:	4603      	mov	r3, r0
 8008700:	4622      	mov	r2, r4
 8008702:	189b      	adds	r3, r3, r2
 8008704:	633b      	str	r3, [r7, #48]	; 0x30
 8008706:	462b      	mov	r3, r5
 8008708:	460a      	mov	r2, r1
 800870a:	eb42 0303 	adc.w	r3, r2, r3
 800870e:	637b      	str	r3, [r7, #52]	; 0x34
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	f04f 0300 	mov.w	r3, #0
 8008718:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800871c:	4629      	mov	r1, r5
 800871e:	024b      	lsls	r3, r1, #9
 8008720:	4621      	mov	r1, r4
 8008722:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008726:	4621      	mov	r1, r4
 8008728:	024a      	lsls	r2, r1, #9
 800872a:	4610      	mov	r0, r2
 800872c:	4619      	mov	r1, r3
 800872e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008732:	2200      	movs	r2, #0
 8008734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008738:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800873c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008740:	f7f8 f9e0 	bl	8000b04 <__aeabi_uldivmod>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4613      	mov	r3, r2
 800874a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800874e:	e067      	b.n	8008820 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008750:	4b75      	ldr	r3, [pc, #468]	; (8008928 <HAL_RCC_GetSysClockFreq+0x354>)
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	099b      	lsrs	r3, r3, #6
 8008756:	2200      	movs	r2, #0
 8008758:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800875c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008760:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008768:	67bb      	str	r3, [r7, #120]	; 0x78
 800876a:	2300      	movs	r3, #0
 800876c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800876e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008772:	4622      	mov	r2, r4
 8008774:	462b      	mov	r3, r5
 8008776:	f04f 0000 	mov.w	r0, #0
 800877a:	f04f 0100 	mov.w	r1, #0
 800877e:	0159      	lsls	r1, r3, #5
 8008780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008784:	0150      	lsls	r0, r2, #5
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4621      	mov	r1, r4
 800878c:	1a51      	subs	r1, r2, r1
 800878e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008790:	4629      	mov	r1, r5
 8008792:	eb63 0301 	sbc.w	r3, r3, r1
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008798:	f04f 0200 	mov.w	r2, #0
 800879c:	f04f 0300 	mov.w	r3, #0
 80087a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80087a4:	4649      	mov	r1, r9
 80087a6:	018b      	lsls	r3, r1, #6
 80087a8:	4641      	mov	r1, r8
 80087aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80087ae:	4641      	mov	r1, r8
 80087b0:	018a      	lsls	r2, r1, #6
 80087b2:	4641      	mov	r1, r8
 80087b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80087b8:	4649      	mov	r1, r9
 80087ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80087be:	f04f 0200 	mov.w	r2, #0
 80087c2:	f04f 0300 	mov.w	r3, #0
 80087c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087d2:	4692      	mov	sl, r2
 80087d4:	469b      	mov	fp, r3
 80087d6:	4623      	mov	r3, r4
 80087d8:	eb1a 0303 	adds.w	r3, sl, r3
 80087dc:	623b      	str	r3, [r7, #32]
 80087de:	462b      	mov	r3, r5
 80087e0:	eb4b 0303 	adc.w	r3, fp, r3
 80087e4:	627b      	str	r3, [r7, #36]	; 0x24
 80087e6:	f04f 0200 	mov.w	r2, #0
 80087ea:	f04f 0300 	mov.w	r3, #0
 80087ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80087f2:	4629      	mov	r1, r5
 80087f4:	028b      	lsls	r3, r1, #10
 80087f6:	4621      	mov	r1, r4
 80087f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087fc:	4621      	mov	r1, r4
 80087fe:	028a      	lsls	r2, r1, #10
 8008800:	4610      	mov	r0, r2
 8008802:	4619      	mov	r1, r3
 8008804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008808:	2200      	movs	r2, #0
 800880a:	673b      	str	r3, [r7, #112]	; 0x70
 800880c:	677a      	str	r2, [r7, #116]	; 0x74
 800880e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008812:	f7f8 f977 	bl	8000b04 <__aeabi_uldivmod>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4613      	mov	r3, r2
 800881c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008820:	4b41      	ldr	r3, [pc, #260]	; (8008928 <HAL_RCC_GetSysClockFreq+0x354>)
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	0c1b      	lsrs	r3, r3, #16
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	3301      	adds	r3, #1
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008836:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800883a:	fbb2 f3f3 	udiv	r3, r2, r3
 800883e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008842:	e0eb      	b.n	8008a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008844:	4b38      	ldr	r3, [pc, #224]	; (8008928 <HAL_RCC_GetSysClockFreq+0x354>)
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800884c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008850:	4b35      	ldr	r3, [pc, #212]	; (8008928 <HAL_RCC_GetSysClockFreq+0x354>)
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d06b      	beq.n	8008934 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800885c:	4b32      	ldr	r3, [pc, #200]	; (8008928 <HAL_RCC_GetSysClockFreq+0x354>)
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	099b      	lsrs	r3, r3, #6
 8008862:	2200      	movs	r2, #0
 8008864:	66bb      	str	r3, [r7, #104]	; 0x68
 8008866:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800886a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886e:	663b      	str	r3, [r7, #96]	; 0x60
 8008870:	2300      	movs	r3, #0
 8008872:	667b      	str	r3, [r7, #100]	; 0x64
 8008874:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008878:	4622      	mov	r2, r4
 800887a:	462b      	mov	r3, r5
 800887c:	f04f 0000 	mov.w	r0, #0
 8008880:	f04f 0100 	mov.w	r1, #0
 8008884:	0159      	lsls	r1, r3, #5
 8008886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800888a:	0150      	lsls	r0, r2, #5
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4621      	mov	r1, r4
 8008892:	1a51      	subs	r1, r2, r1
 8008894:	61b9      	str	r1, [r7, #24]
 8008896:	4629      	mov	r1, r5
 8008898:	eb63 0301 	sbc.w	r3, r3, r1
 800889c:	61fb      	str	r3, [r7, #28]
 800889e:	f04f 0200 	mov.w	r2, #0
 80088a2:	f04f 0300 	mov.w	r3, #0
 80088a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80088aa:	4659      	mov	r1, fp
 80088ac:	018b      	lsls	r3, r1, #6
 80088ae:	4651      	mov	r1, sl
 80088b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80088b4:	4651      	mov	r1, sl
 80088b6:	018a      	lsls	r2, r1, #6
 80088b8:	4651      	mov	r1, sl
 80088ba:	ebb2 0801 	subs.w	r8, r2, r1
 80088be:	4659      	mov	r1, fp
 80088c0:	eb63 0901 	sbc.w	r9, r3, r1
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	f04f 0300 	mov.w	r3, #0
 80088cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088d8:	4690      	mov	r8, r2
 80088da:	4699      	mov	r9, r3
 80088dc:	4623      	mov	r3, r4
 80088de:	eb18 0303 	adds.w	r3, r8, r3
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	462b      	mov	r3, r5
 80088e6:	eb49 0303 	adc.w	r3, r9, r3
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80088f8:	4629      	mov	r1, r5
 80088fa:	024b      	lsls	r3, r1, #9
 80088fc:	4621      	mov	r1, r4
 80088fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008902:	4621      	mov	r1, r4
 8008904:	024a      	lsls	r2, r1, #9
 8008906:	4610      	mov	r0, r2
 8008908:	4619      	mov	r1, r3
 800890a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800890e:	2200      	movs	r2, #0
 8008910:	65bb      	str	r3, [r7, #88]	; 0x58
 8008912:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008914:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008918:	f7f8 f8f4 	bl	8000b04 <__aeabi_uldivmod>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4613      	mov	r3, r2
 8008922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008926:	e065      	b.n	80089f4 <HAL_RCC_GetSysClockFreq+0x420>
 8008928:	40023800 	.word	0x40023800
 800892c:	00f42400 	.word	0x00f42400
 8008930:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008934:	4b3d      	ldr	r3, [pc, #244]	; (8008a2c <HAL_RCC_GetSysClockFreq+0x458>)
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	099b      	lsrs	r3, r3, #6
 800893a:	2200      	movs	r2, #0
 800893c:	4618      	mov	r0, r3
 800893e:	4611      	mov	r1, r2
 8008940:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008944:	653b      	str	r3, [r7, #80]	; 0x50
 8008946:	2300      	movs	r3, #0
 8008948:	657b      	str	r3, [r7, #84]	; 0x54
 800894a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800894e:	4642      	mov	r2, r8
 8008950:	464b      	mov	r3, r9
 8008952:	f04f 0000 	mov.w	r0, #0
 8008956:	f04f 0100 	mov.w	r1, #0
 800895a:	0159      	lsls	r1, r3, #5
 800895c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008960:	0150      	lsls	r0, r2, #5
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	4641      	mov	r1, r8
 8008968:	1a51      	subs	r1, r2, r1
 800896a:	60b9      	str	r1, [r7, #8]
 800896c:	4649      	mov	r1, r9
 800896e:	eb63 0301 	sbc.w	r3, r3, r1
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	f04f 0300 	mov.w	r3, #0
 800897c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008980:	4659      	mov	r1, fp
 8008982:	018b      	lsls	r3, r1, #6
 8008984:	4651      	mov	r1, sl
 8008986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800898a:	4651      	mov	r1, sl
 800898c:	018a      	lsls	r2, r1, #6
 800898e:	4651      	mov	r1, sl
 8008990:	1a54      	subs	r4, r2, r1
 8008992:	4659      	mov	r1, fp
 8008994:	eb63 0501 	sbc.w	r5, r3, r1
 8008998:	f04f 0200 	mov.w	r2, #0
 800899c:	f04f 0300 	mov.w	r3, #0
 80089a0:	00eb      	lsls	r3, r5, #3
 80089a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089a6:	00e2      	lsls	r2, r4, #3
 80089a8:	4614      	mov	r4, r2
 80089aa:	461d      	mov	r5, r3
 80089ac:	4643      	mov	r3, r8
 80089ae:	18e3      	adds	r3, r4, r3
 80089b0:	603b      	str	r3, [r7, #0]
 80089b2:	464b      	mov	r3, r9
 80089b4:	eb45 0303 	adc.w	r3, r5, r3
 80089b8:	607b      	str	r3, [r7, #4]
 80089ba:	f04f 0200 	mov.w	r2, #0
 80089be:	f04f 0300 	mov.w	r3, #0
 80089c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80089c6:	4629      	mov	r1, r5
 80089c8:	028b      	lsls	r3, r1, #10
 80089ca:	4621      	mov	r1, r4
 80089cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80089d0:	4621      	mov	r1, r4
 80089d2:	028a      	lsls	r2, r1, #10
 80089d4:	4610      	mov	r0, r2
 80089d6:	4619      	mov	r1, r3
 80089d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089dc:	2200      	movs	r2, #0
 80089de:	64bb      	str	r3, [r7, #72]	; 0x48
 80089e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80089e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80089e6:	f7f8 f88d 	bl	8000b04 <__aeabi_uldivmod>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4613      	mov	r3, r2
 80089f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80089f4:	4b0d      	ldr	r3, [pc, #52]	; (8008a2c <HAL_RCC_GetSysClockFreq+0x458>)
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	0f1b      	lsrs	r3, r3, #28
 80089fa:	f003 0307 	and.w	r3, r3, #7
 80089fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008a12:	e003      	b.n	8008a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a14:	4b06      	ldr	r3, [pc, #24]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008a1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	37b8      	adds	r7, #184	; 0xb8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a2a:	bf00      	nop
 8008a2c:	40023800 	.word	0x40023800
 8008a30:	00f42400 	.word	0x00f42400

08008a34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e28d      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 8083 	beq.w	8008b5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008a54:	4b94      	ldr	r3, [pc, #592]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f003 030c 	and.w	r3, r3, #12
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d019      	beq.n	8008a94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a60:	4b91      	ldr	r3, [pc, #580]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d106      	bne.n	8008a7a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a6c:	4b8e      	ldr	r3, [pc, #568]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a78:	d00c      	beq.n	8008a94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a7a:	4b8b      	ldr	r3, [pc, #556]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a82:	2b0c      	cmp	r3, #12
 8008a84:	d112      	bne.n	8008aac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a86:	4b88      	ldr	r3, [pc, #544]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a92:	d10b      	bne.n	8008aac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a94:	4b84      	ldr	r3, [pc, #528]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d05b      	beq.n	8008b58 <HAL_RCC_OscConfig+0x124>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d157      	bne.n	8008b58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e25a      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ab4:	d106      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x90>
 8008ab6:	4b7c      	ldr	r3, [pc, #496]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a7b      	ldr	r2, [pc, #492]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ac0:	6013      	str	r3, [r2, #0]
 8008ac2:	e01d      	b.n	8008b00 <HAL_RCC_OscConfig+0xcc>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008acc:	d10c      	bne.n	8008ae8 <HAL_RCC_OscConfig+0xb4>
 8008ace:	4b76      	ldr	r3, [pc, #472]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a75      	ldr	r2, [pc, #468]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	4b73      	ldr	r3, [pc, #460]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a72      	ldr	r2, [pc, #456]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	e00b      	b.n	8008b00 <HAL_RCC_OscConfig+0xcc>
 8008ae8:	4b6f      	ldr	r3, [pc, #444]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a6e      	ldr	r2, [pc, #440]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	4b6c      	ldr	r3, [pc, #432]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a6b      	ldr	r2, [pc, #428]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d013      	beq.n	8008b30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b08:	f7fe fba2 	bl	8007250 <HAL_GetTick>
 8008b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b0e:	e008      	b.n	8008b22 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b10:	f7fe fb9e 	bl	8007250 <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b64      	cmp	r3, #100	; 0x64
 8008b1c:	d901      	bls.n	8008b22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e21f      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b22:	4b61      	ldr	r3, [pc, #388]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0f0      	beq.n	8008b10 <HAL_RCC_OscConfig+0xdc>
 8008b2e:	e014      	b.n	8008b5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b30:	f7fe fb8e 	bl	8007250 <HAL_GetTick>
 8008b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b36:	e008      	b.n	8008b4a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b38:	f7fe fb8a 	bl	8007250 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b64      	cmp	r3, #100	; 0x64
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e20b      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b4a:	4b57      	ldr	r3, [pc, #348]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1f0      	bne.n	8008b38 <HAL_RCC_OscConfig+0x104>
 8008b56:	e000      	b.n	8008b5a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d06f      	beq.n	8008c46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008b66:	4b50      	ldr	r3, [pc, #320]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f003 030c 	and.w	r3, r3, #12
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d017      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b72:	4b4d      	ldr	r3, [pc, #308]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008b7a:	2b08      	cmp	r3, #8
 8008b7c:	d105      	bne.n	8008b8a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b7e:	4b4a      	ldr	r3, [pc, #296]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00b      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b8a:	4b47      	ldr	r3, [pc, #284]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b92:	2b0c      	cmp	r3, #12
 8008b94:	d11c      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b96:	4b44      	ldr	r3, [pc, #272]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d116      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ba2:	4b41      	ldr	r3, [pc, #260]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d005      	beq.n	8008bba <HAL_RCC_OscConfig+0x186>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d001      	beq.n	8008bba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e1d3      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bba:	4b3b      	ldr	r3, [pc, #236]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	00db      	lsls	r3, r3, #3
 8008bc8:	4937      	ldr	r1, [pc, #220]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bce:	e03a      	b.n	8008c46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d020      	beq.n	8008c1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bd8:	4b34      	ldr	r3, [pc, #208]	; (8008cac <HAL_RCC_OscConfig+0x278>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bde:	f7fe fb37 	bl	8007250 <HAL_GetTick>
 8008be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008be4:	e008      	b.n	8008bf8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008be6:	f7fe fb33 	bl	8007250 <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d901      	bls.n	8008bf8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e1b4      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bf8:	4b2b      	ldr	r3, [pc, #172]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0302 	and.w	r3, r3, #2
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0f0      	beq.n	8008be6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c04:	4b28      	ldr	r3, [pc, #160]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	4925      	ldr	r1, [pc, #148]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	600b      	str	r3, [r1, #0]
 8008c18:	e015      	b.n	8008c46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c1a:	4b24      	ldr	r3, [pc, #144]	; (8008cac <HAL_RCC_OscConfig+0x278>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c20:	f7fe fb16 	bl	8007250 <HAL_GetTick>
 8008c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c26:	e008      	b.n	8008c3a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c28:	f7fe fb12 	bl	8007250 <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d901      	bls.n	8008c3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e193      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0302 	and.w	r3, r3, #2
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f0      	bne.n	8008c28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d036      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d016      	beq.n	8008c88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c5a:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <HAL_RCC_OscConfig+0x27c>)
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c60:	f7fe faf6 	bl	8007250 <HAL_GetTick>
 8008c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c66:	e008      	b.n	8008c7a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c68:	f7fe faf2 	bl	8007250 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e173      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <HAL_RCC_OscConfig+0x274>)
 8008c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0f0      	beq.n	8008c68 <HAL_RCC_OscConfig+0x234>
 8008c86:	e01b      	b.n	8008cc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c88:	4b09      	ldr	r3, [pc, #36]	; (8008cb0 <HAL_RCC_OscConfig+0x27c>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c8e:	f7fe fadf 	bl	8007250 <HAL_GetTick>
 8008c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c94:	e00e      	b.n	8008cb4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c96:	f7fe fadb 	bl	8007250 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d907      	bls.n	8008cb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e15c      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
 8008ca8:	40023800 	.word	0x40023800
 8008cac:	42470000 	.word	0x42470000
 8008cb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cb4:	4b8a      	ldr	r3, [pc, #552]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1ea      	bne.n	8008c96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 8097 	beq.w	8008dfc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cd2:	4b83      	ldr	r3, [pc, #524]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10f      	bne.n	8008cfe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60bb      	str	r3, [r7, #8]
 8008ce2:	4b7f      	ldr	r3, [pc, #508]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	4a7e      	ldr	r2, [pc, #504]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cec:	6413      	str	r3, [r2, #64]	; 0x40
 8008cee:	4b7c      	ldr	r3, [pc, #496]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cf6:	60bb      	str	r3, [r7, #8]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cfe:	4b79      	ldr	r3, [pc, #484]	; (8008ee4 <HAL_RCC_OscConfig+0x4b0>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d118      	bne.n	8008d3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d0a:	4b76      	ldr	r3, [pc, #472]	; (8008ee4 <HAL_RCC_OscConfig+0x4b0>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a75      	ldr	r2, [pc, #468]	; (8008ee4 <HAL_RCC_OscConfig+0x4b0>)
 8008d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d16:	f7fe fa9b 	bl	8007250 <HAL_GetTick>
 8008d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d1c:	e008      	b.n	8008d30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d1e:	f7fe fa97 	bl	8007250 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d901      	bls.n	8008d30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e118      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d30:	4b6c      	ldr	r3, [pc, #432]	; (8008ee4 <HAL_RCC_OscConfig+0x4b0>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0f0      	beq.n	8008d1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d106      	bne.n	8008d52 <HAL_RCC_OscConfig+0x31e>
 8008d44:	4b66      	ldr	r3, [pc, #408]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d48:	4a65      	ldr	r2, [pc, #404]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008d4a:	f043 0301 	orr.w	r3, r3, #1
 8008d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8008d50:	e01c      	b.n	8008d8c <HAL_RCC_OscConfig+0x358>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	2b05      	cmp	r3, #5
 8008d58:	d10c      	bne.n	8008d74 <HAL_RCC_OscConfig+0x340>
 8008d5a:	4b61      	ldr	r3, [pc, #388]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5e:	4a60      	ldr	r2, [pc, #384]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008d60:	f043 0304 	orr.w	r3, r3, #4
 8008d64:	6713      	str	r3, [r2, #112]	; 0x70
 8008d66:	4b5e      	ldr	r3, [pc, #376]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6a:	4a5d      	ldr	r2, [pc, #372]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008d6c:	f043 0301 	orr.w	r3, r3, #1
 8008d70:	6713      	str	r3, [r2, #112]	; 0x70
 8008d72:	e00b      	b.n	8008d8c <HAL_RCC_OscConfig+0x358>
 8008d74:	4b5a      	ldr	r3, [pc, #360]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d78:	4a59      	ldr	r2, [pc, #356]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008d7a:	f023 0301 	bic.w	r3, r3, #1
 8008d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8008d80:	4b57      	ldr	r3, [pc, #348]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d84:	4a56      	ldr	r2, [pc, #344]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008d86:	f023 0304 	bic.w	r3, r3, #4
 8008d8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d015      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d94:	f7fe fa5c 	bl	8007250 <HAL_GetTick>
 8008d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d9a:	e00a      	b.n	8008db2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d9c:	f7fe fa58 	bl	8007250 <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d901      	bls.n	8008db2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e0d7      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008db2:	4b4b      	ldr	r3, [pc, #300]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0ee      	beq.n	8008d9c <HAL_RCC_OscConfig+0x368>
 8008dbe:	e014      	b.n	8008dea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dc0:	f7fe fa46 	bl	8007250 <HAL_GetTick>
 8008dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dc6:	e00a      	b.n	8008dde <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dc8:	f7fe fa42 	bl	8007250 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d901      	bls.n	8008dde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e0c1      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dde:	4b40      	ldr	r3, [pc, #256]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1ee      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d105      	bne.n	8008dfc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008df0:	4b3b      	ldr	r3, [pc, #236]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df4:	4a3a      	ldr	r2, [pc, #232]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 80ad 	beq.w	8008f60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e06:	4b36      	ldr	r3, [pc, #216]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f003 030c 	and.w	r3, r3, #12
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	d060      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d145      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e1a:	4b33      	ldr	r3, [pc, #204]	; (8008ee8 <HAL_RCC_OscConfig+0x4b4>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e20:	f7fe fa16 	bl	8007250 <HAL_GetTick>
 8008e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e26:	e008      	b.n	8008e3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e28:	f7fe fa12 	bl	8007250 <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e093      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e3a:	4b29      	ldr	r3, [pc, #164]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1f0      	bne.n	8008e28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	69da      	ldr	r2, [r3, #28]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	019b      	lsls	r3, r3, #6
 8008e56:	431a      	orrs	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	085b      	lsrs	r3, r3, #1
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	041b      	lsls	r3, r3, #16
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e68:	061b      	lsls	r3, r3, #24
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e70:	071b      	lsls	r3, r3, #28
 8008e72:	491b      	ldr	r1, [pc, #108]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008e74:	4313      	orrs	r3, r2
 8008e76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e78:	4b1b      	ldr	r3, [pc, #108]	; (8008ee8 <HAL_RCC_OscConfig+0x4b4>)
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e7e:	f7fe f9e7 	bl	8007250 <HAL_GetTick>
 8008e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e84:	e008      	b.n	8008e98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e86:	f7fe f9e3 	bl	8007250 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d901      	bls.n	8008e98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e064      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e98:	4b11      	ldr	r3, [pc, #68]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0f0      	beq.n	8008e86 <HAL_RCC_OscConfig+0x452>
 8008ea4:	e05c      	b.n	8008f60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ea6:	4b10      	ldr	r3, [pc, #64]	; (8008ee8 <HAL_RCC_OscConfig+0x4b4>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eac:	f7fe f9d0 	bl	8007250 <HAL_GetTick>
 8008eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eb2:	e008      	b.n	8008ec6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eb4:	f7fe f9cc 	bl	8007250 <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e04d      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ec6:	4b06      	ldr	r3, [pc, #24]	; (8008ee0 <HAL_RCC_OscConfig+0x4ac>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1f0      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x480>
 8008ed2:	e045      	b.n	8008f60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d107      	bne.n	8008eec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e040      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
 8008ee0:	40023800 	.word	0x40023800
 8008ee4:	40007000 	.word	0x40007000
 8008ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008eec:	4b1f      	ldr	r3, [pc, #124]	; (8008f6c <HAL_RCC_OscConfig+0x538>)
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d030      	beq.n	8008f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d129      	bne.n	8008f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d122      	bne.n	8008f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d119      	bne.n	8008f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f32:	085b      	lsrs	r3, r3, #1
 8008f34:	3b01      	subs	r3, #1
 8008f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d10f      	bne.n	8008f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d107      	bne.n	8008f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d001      	beq.n	8008f60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e000      	b.n	8008f62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	40023800 	.word	0x40023800

08008f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e041      	b.n	8009006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d106      	bne.n	8008f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7fd fddc 	bl	8006b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f000 fe58 	bl	8009c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
	...

08009010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	d001      	beq.n	8009028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e04e      	b.n	80090c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68da      	ldr	r2, [r3, #12]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f042 0201 	orr.w	r2, r2, #1
 800903e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a23      	ldr	r2, [pc, #140]	; (80090d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d022      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0x80>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009052:	d01d      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0x80>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a1f      	ldr	r2, [pc, #124]	; (80090d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d018      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0x80>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a1e      	ldr	r2, [pc, #120]	; (80090dc <HAL_TIM_Base_Start_IT+0xcc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d013      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0x80>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a1c      	ldr	r2, [pc, #112]	; (80090e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d00e      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0x80>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a1b      	ldr	r2, [pc, #108]	; (80090e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d009      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0x80>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a19      	ldr	r2, [pc, #100]	; (80090e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d004      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0x80>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a18      	ldr	r2, [pc, #96]	; (80090ec <HAL_TIM_Base_Start_IT+0xdc>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d111      	bne.n	80090b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2b06      	cmp	r3, #6
 80090a0:	d010      	beq.n	80090c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f042 0201 	orr.w	r2, r2, #1
 80090b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b2:	e007      	b.n	80090c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0201 	orr.w	r2, r2, #1
 80090c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	40010000 	.word	0x40010000
 80090d8:	40000400 	.word	0x40000400
 80090dc:	40000800 	.word	0x40000800
 80090e0:	40000c00 	.word	0x40000c00
 80090e4:	40010400 	.word	0x40010400
 80090e8:	40014000 	.word	0x40014000
 80090ec:	40001800 	.word	0x40001800

080090f0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e041      	b.n	8009186 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d106      	bne.n	800911c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f839 	bl	800918e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2202      	movs	r2, #2
 8009120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f000 fd98 	bl	8009c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009196:	bf00      	nop
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e041      	b.n	8009238 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d106      	bne.n	80091ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7fd fc67 	bl	8006a9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2202      	movs	r2, #2
 80091d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	3304      	adds	r3, #4
 80091de:	4619      	mov	r1, r3
 80091e0:	4610      	mov	r0, r2
 80091e2:	f000 fd3f 	bl	8009c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d109      	bne.n	8009264 <HAL_TIM_PWM_Start+0x24>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b01      	cmp	r3, #1
 800925a:	bf14      	ite	ne
 800925c:	2301      	movne	r3, #1
 800925e:	2300      	moveq	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	e022      	b.n	80092aa <HAL_TIM_PWM_Start+0x6a>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b04      	cmp	r3, #4
 8009268:	d109      	bne.n	800927e <HAL_TIM_PWM_Start+0x3e>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b01      	cmp	r3, #1
 8009274:	bf14      	ite	ne
 8009276:	2301      	movne	r3, #1
 8009278:	2300      	moveq	r3, #0
 800927a:	b2db      	uxtb	r3, r3
 800927c:	e015      	b.n	80092aa <HAL_TIM_PWM_Start+0x6a>
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2b08      	cmp	r3, #8
 8009282:	d109      	bne.n	8009298 <HAL_TIM_PWM_Start+0x58>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b01      	cmp	r3, #1
 800928e:	bf14      	ite	ne
 8009290:	2301      	movne	r3, #1
 8009292:	2300      	moveq	r3, #0
 8009294:	b2db      	uxtb	r3, r3
 8009296:	e008      	b.n	80092aa <HAL_TIM_PWM_Start+0x6a>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	bf14      	ite	ne
 80092a4:	2301      	movne	r3, #1
 80092a6:	2300      	moveq	r3, #0
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e07c      	b.n	80093ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d104      	bne.n	80092c2 <HAL_TIM_PWM_Start+0x82>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092c0:	e013      	b.n	80092ea <HAL_TIM_PWM_Start+0xaa>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d104      	bne.n	80092d2 <HAL_TIM_PWM_Start+0x92>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092d0:	e00b      	b.n	80092ea <HAL_TIM_PWM_Start+0xaa>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d104      	bne.n	80092e2 <HAL_TIM_PWM_Start+0xa2>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092e0:	e003      	b.n	80092ea <HAL_TIM_PWM_Start+0xaa>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2202      	movs	r2, #2
 80092e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2201      	movs	r2, #1
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 ffa0 	bl	800a238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a2d      	ldr	r2, [pc, #180]	; (80093b4 <HAL_TIM_PWM_Start+0x174>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d004      	beq.n	800930c <HAL_TIM_PWM_Start+0xcc>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a2c      	ldr	r2, [pc, #176]	; (80093b8 <HAL_TIM_PWM_Start+0x178>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d101      	bne.n	8009310 <HAL_TIM_PWM_Start+0xd0>
 800930c:	2301      	movs	r3, #1
 800930e:	e000      	b.n	8009312 <HAL_TIM_PWM_Start+0xd2>
 8009310:	2300      	movs	r3, #0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d007      	beq.n	8009326 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009324:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a22      	ldr	r2, [pc, #136]	; (80093b4 <HAL_TIM_PWM_Start+0x174>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d022      	beq.n	8009376 <HAL_TIM_PWM_Start+0x136>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009338:	d01d      	beq.n	8009376 <HAL_TIM_PWM_Start+0x136>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a1f      	ldr	r2, [pc, #124]	; (80093bc <HAL_TIM_PWM_Start+0x17c>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d018      	beq.n	8009376 <HAL_TIM_PWM_Start+0x136>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a1d      	ldr	r2, [pc, #116]	; (80093c0 <HAL_TIM_PWM_Start+0x180>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d013      	beq.n	8009376 <HAL_TIM_PWM_Start+0x136>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1c      	ldr	r2, [pc, #112]	; (80093c4 <HAL_TIM_PWM_Start+0x184>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d00e      	beq.n	8009376 <HAL_TIM_PWM_Start+0x136>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a16      	ldr	r2, [pc, #88]	; (80093b8 <HAL_TIM_PWM_Start+0x178>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d009      	beq.n	8009376 <HAL_TIM_PWM_Start+0x136>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a18      	ldr	r2, [pc, #96]	; (80093c8 <HAL_TIM_PWM_Start+0x188>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d004      	beq.n	8009376 <HAL_TIM_PWM_Start+0x136>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a16      	ldr	r2, [pc, #88]	; (80093cc <HAL_TIM_PWM_Start+0x18c>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d111      	bne.n	800939a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f003 0307 	and.w	r3, r3, #7
 8009380:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b06      	cmp	r3, #6
 8009386:	d010      	beq.n	80093aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f042 0201 	orr.w	r2, r2, #1
 8009396:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009398:	e007      	b.n	80093aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f042 0201 	orr.w	r2, r2, #1
 80093a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	40010000 	.word	0x40010000
 80093b8:	40010400 	.word	0x40010400
 80093bc:	40000400 	.word	0x40000400
 80093c0:	40000800 	.word	0x40000800
 80093c4:	40000c00 	.word	0x40000c00
 80093c8:	40014000 	.word	0x40014000
 80093cc:	40001800 	.word	0x40001800

080093d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e097      	b.n	8009514 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d106      	bne.n	80093fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7fd fa79 	bl	80068f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2202      	movs	r2, #2
 8009402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	6812      	ldr	r2, [r2, #0]
 8009410:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009414:	f023 0307 	bic.w	r3, r3, #7
 8009418:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	3304      	adds	r3, #4
 8009422:	4619      	mov	r1, r3
 8009424:	4610      	mov	r0, r2
 8009426:	f000 fc1d 	bl	8009c64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	4313      	orrs	r3, r2
 800944a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009452:	f023 0303 	bic.w	r3, r3, #3
 8009456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	021b      	lsls	r3, r3, #8
 8009462:	4313      	orrs	r3, r2
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	4313      	orrs	r3, r2
 8009468:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009470:	f023 030c 	bic.w	r3, r3, #12
 8009474:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800947c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009480:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	68da      	ldr	r2, [r3, #12]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	4313      	orrs	r3, r2
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	4313      	orrs	r3, r2
 8009492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	011a      	lsls	r2, r3, #4
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	031b      	lsls	r3, r3, #12
 80094a0:	4313      	orrs	r3, r2
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80094ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80094b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	011b      	lsls	r3, r3, #4
 80094c2:	4313      	orrs	r3, r2
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3718      	adds	r7, #24
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800952c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009534:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800953c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009544:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d110      	bne.n	800956e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800954c:	7bfb      	ldrb	r3, [r7, #15]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d102      	bne.n	8009558 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009552:	7b7b      	ldrb	r3, [r7, #13]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d001      	beq.n	800955c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e069      	b.n	8009630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2202      	movs	r2, #2
 8009568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800956c:	e031      	b.n	80095d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b04      	cmp	r3, #4
 8009572:	d110      	bne.n	8009596 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d102      	bne.n	8009580 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800957a:	7b3b      	ldrb	r3, [r7, #12]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d001      	beq.n	8009584 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e055      	b.n	8009630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2202      	movs	r2, #2
 8009588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2202      	movs	r2, #2
 8009590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009594:	e01d      	b.n	80095d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d108      	bne.n	80095ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d105      	bne.n	80095ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095a2:	7b7b      	ldrb	r3, [r7, #13]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d102      	bne.n	80095ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80095a8:	7b3b      	ldrb	r3, [r7, #12]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d001      	beq.n	80095b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e03e      	b.n	8009630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2202      	movs	r2, #2
 80095b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2202      	movs	r2, #2
 80095be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2202      	movs	r2, #2
 80095c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2202      	movs	r2, #2
 80095ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d003      	beq.n	80095e0 <HAL_TIM_Encoder_Start+0xc4>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2b04      	cmp	r3, #4
 80095dc:	d008      	beq.n	80095f0 <HAL_TIM_Encoder_Start+0xd4>
 80095de:	e00f      	b.n	8009600 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2201      	movs	r2, #1
 80095e6:	2100      	movs	r1, #0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fe25 	bl	800a238 <TIM_CCxChannelCmd>
      break;
 80095ee:	e016      	b.n	800961e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2201      	movs	r2, #1
 80095f6:	2104      	movs	r1, #4
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fe1d 	bl	800a238 <TIM_CCxChannelCmd>
      break;
 80095fe:	e00e      	b.n	800961e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2201      	movs	r2, #1
 8009606:	2100      	movs	r1, #0
 8009608:	4618      	mov	r0, r3
 800960a:	f000 fe15 	bl	800a238 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2201      	movs	r2, #1
 8009614:	2104      	movs	r1, #4
 8009616:	4618      	mov	r0, r3
 8009618:	f000 fe0e 	bl	800a238 <TIM_CCxChannelCmd>
      break;
 800961c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f042 0201 	orr.w	r2, r2, #1
 800962c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	f003 0302 	and.w	r3, r3, #2
 800964a:	2b02      	cmp	r3, #2
 800964c:	d122      	bne.n	8009694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	f003 0302 	and.w	r3, r3, #2
 8009658:	2b02      	cmp	r3, #2
 800965a:	d11b      	bne.n	8009694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f06f 0202 	mvn.w	r2, #2
 8009664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d003      	beq.n	8009682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fad3 	bl	8009c26 <HAL_TIM_IC_CaptureCallback>
 8009680:	e005      	b.n	800968e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fac5 	bl	8009c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fad6 	bl	8009c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	f003 0304 	and.w	r3, r3, #4
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d122      	bne.n	80096e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	d11b      	bne.n	80096e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f06f 0204 	mvn.w	r2, #4
 80096b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2202      	movs	r2, #2
 80096be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 faa9 	bl	8009c26 <HAL_TIM_IC_CaptureCallback>
 80096d4:	e005      	b.n	80096e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fa9b 	bl	8009c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 faac 	bl	8009c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	f003 0308 	and.w	r3, r3, #8
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	d122      	bne.n	800973c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f003 0308 	and.w	r3, r3, #8
 8009700:	2b08      	cmp	r3, #8
 8009702:	d11b      	bne.n	800973c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f06f 0208 	mvn.w	r2, #8
 800970c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2204      	movs	r2, #4
 8009712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fa7f 	bl	8009c26 <HAL_TIM_IC_CaptureCallback>
 8009728:	e005      	b.n	8009736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fa71 	bl	8009c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fa82 	bl	8009c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f003 0310 	and.w	r3, r3, #16
 8009746:	2b10      	cmp	r3, #16
 8009748:	d122      	bne.n	8009790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f003 0310 	and.w	r3, r3, #16
 8009754:	2b10      	cmp	r3, #16
 8009756:	d11b      	bne.n	8009790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f06f 0210 	mvn.w	r2, #16
 8009760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2208      	movs	r2, #8
 8009766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fa55 	bl	8009c26 <HAL_TIM_IC_CaptureCallback>
 800977c:	e005      	b.n	800978a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa47 	bl	8009c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fa58 	bl	8009c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b01      	cmp	r3, #1
 800979c:	d10e      	bne.n	80097bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d107      	bne.n	80097bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f06f 0201 	mvn.w	r2, #1
 80097b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7f7 fb52 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c6:	2b80      	cmp	r3, #128	; 0x80
 80097c8:	d10e      	bne.n	80097e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097d4:	2b80      	cmp	r3, #128	; 0x80
 80097d6:	d107      	bne.n	80097e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fe26 	bl	800a434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f2:	2b40      	cmp	r3, #64	; 0x40
 80097f4:	d10e      	bne.n	8009814 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009800:	2b40      	cmp	r3, #64	; 0x40
 8009802:	d107      	bne.n	8009814 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800980c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fa1d 	bl	8009c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b20      	cmp	r3, #32
 8009820:	d10e      	bne.n	8009840 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	f003 0320 	and.w	r3, r3, #32
 800982c:	2b20      	cmp	r3, #32
 800982e:	d107      	bne.n	8009840 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f06f 0220 	mvn.w	r2, #32
 8009838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fdf0 	bl	800a420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800985e:	2b01      	cmp	r3, #1
 8009860:	d101      	bne.n	8009866 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009862:	2302      	movs	r3, #2
 8009864:	e048      	b.n	80098f8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b0c      	cmp	r3, #12
 8009872:	d839      	bhi.n	80098e8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009874:	a201      	add	r2, pc, #4	; (adr r2, 800987c <HAL_TIM_OC_ConfigChannel+0x34>)
 8009876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987a:	bf00      	nop
 800987c:	080098b1 	.word	0x080098b1
 8009880:	080098e9 	.word	0x080098e9
 8009884:	080098e9 	.word	0x080098e9
 8009888:	080098e9 	.word	0x080098e9
 800988c:	080098bf 	.word	0x080098bf
 8009890:	080098e9 	.word	0x080098e9
 8009894:	080098e9 	.word	0x080098e9
 8009898:	080098e9 	.word	0x080098e9
 800989c:	080098cd 	.word	0x080098cd
 80098a0:	080098e9 	.word	0x080098e9
 80098a4:	080098e9 	.word	0x080098e9
 80098a8:	080098e9 	.word	0x080098e9
 80098ac:	080098db 	.word	0x080098db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68b9      	ldr	r1, [r7, #8]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fa74 	bl	8009da4 <TIM_OC1_SetConfig>
      break;
 80098bc:	e017      	b.n	80098ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68b9      	ldr	r1, [r7, #8]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f000 fadd 	bl	8009e84 <TIM_OC2_SetConfig>
      break;
 80098ca:	e010      	b.n	80098ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68b9      	ldr	r1, [r7, #8]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 fb4c 	bl	8009f70 <TIM_OC3_SetConfig>
      break;
 80098d8:	e009      	b.n	80098ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68b9      	ldr	r1, [r7, #8]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f000 fbb9 	bl	800a058 <TIM_OC4_SetConfig>
      break;
 80098e6:	e002      	b.n	80098ee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	75fb      	strb	r3, [r7, #23]
      break;
 80098ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009916:	2b01      	cmp	r3, #1
 8009918:	d101      	bne.n	800991e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800991a:	2302      	movs	r3, #2
 800991c:	e0ae      	b.n	8009a7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2b0c      	cmp	r3, #12
 800992a:	f200 809f 	bhi.w	8009a6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800992e:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009934:	08009969 	.word	0x08009969
 8009938:	08009a6d 	.word	0x08009a6d
 800993c:	08009a6d 	.word	0x08009a6d
 8009940:	08009a6d 	.word	0x08009a6d
 8009944:	080099a9 	.word	0x080099a9
 8009948:	08009a6d 	.word	0x08009a6d
 800994c:	08009a6d 	.word	0x08009a6d
 8009950:	08009a6d 	.word	0x08009a6d
 8009954:	080099eb 	.word	0x080099eb
 8009958:	08009a6d 	.word	0x08009a6d
 800995c:	08009a6d 	.word	0x08009a6d
 8009960:	08009a6d 	.word	0x08009a6d
 8009964:	08009a2b 	.word	0x08009a2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68b9      	ldr	r1, [r7, #8]
 800996e:	4618      	mov	r0, r3
 8009970:	f000 fa18 	bl	8009da4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	699a      	ldr	r2, [r3, #24]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f042 0208 	orr.w	r2, r2, #8
 8009982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	699a      	ldr	r2, [r3, #24]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f022 0204 	bic.w	r2, r2, #4
 8009992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6999      	ldr	r1, [r3, #24]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	691a      	ldr	r2, [r3, #16]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	430a      	orrs	r2, r1
 80099a4:	619a      	str	r2, [r3, #24]
      break;
 80099a6:	e064      	b.n	8009a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68b9      	ldr	r1, [r7, #8]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fa68 	bl	8009e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	699a      	ldr	r2, [r3, #24]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	699a      	ldr	r2, [r3, #24]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6999      	ldr	r1, [r3, #24]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	021a      	lsls	r2, r3, #8
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	430a      	orrs	r2, r1
 80099e6:	619a      	str	r2, [r3, #24]
      break;
 80099e8:	e043      	b.n	8009a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68b9      	ldr	r1, [r7, #8]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 fabd 	bl	8009f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	69da      	ldr	r2, [r3, #28]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f042 0208 	orr.w	r2, r2, #8
 8009a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	69da      	ldr	r2, [r3, #28]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 0204 	bic.w	r2, r2, #4
 8009a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	69d9      	ldr	r1, [r3, #28]
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	691a      	ldr	r2, [r3, #16]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	430a      	orrs	r2, r1
 8009a26:	61da      	str	r2, [r3, #28]
      break;
 8009a28:	e023      	b.n	8009a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68b9      	ldr	r1, [r7, #8]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fb11 	bl	800a058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	69da      	ldr	r2, [r3, #28]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	69da      	ldr	r2, [r3, #28]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69d9      	ldr	r1, [r3, #28]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	021a      	lsls	r2, r3, #8
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	430a      	orrs	r2, r1
 8009a68:	61da      	str	r2, [r3, #28]
      break;
 8009a6a:	e002      	b.n	8009a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d101      	bne.n	8009aa0 <HAL_TIM_ConfigClockSource+0x1c>
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	e0b4      	b.n	8009c0a <HAL_TIM_ConfigClockSource+0x186>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2202      	movs	r2, #2
 8009aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad8:	d03e      	beq.n	8009b58 <HAL_TIM_ConfigClockSource+0xd4>
 8009ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ade:	f200 8087 	bhi.w	8009bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae6:	f000 8086 	beq.w	8009bf6 <HAL_TIM_ConfigClockSource+0x172>
 8009aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aee:	d87f      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8009af0:	2b70      	cmp	r3, #112	; 0x70
 8009af2:	d01a      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0xa6>
 8009af4:	2b70      	cmp	r3, #112	; 0x70
 8009af6:	d87b      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8009af8:	2b60      	cmp	r3, #96	; 0x60
 8009afa:	d050      	beq.n	8009b9e <HAL_TIM_ConfigClockSource+0x11a>
 8009afc:	2b60      	cmp	r3, #96	; 0x60
 8009afe:	d877      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8009b00:	2b50      	cmp	r3, #80	; 0x50
 8009b02:	d03c      	beq.n	8009b7e <HAL_TIM_ConfigClockSource+0xfa>
 8009b04:	2b50      	cmp	r3, #80	; 0x50
 8009b06:	d873      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8009b08:	2b40      	cmp	r3, #64	; 0x40
 8009b0a:	d058      	beq.n	8009bbe <HAL_TIM_ConfigClockSource+0x13a>
 8009b0c:	2b40      	cmp	r3, #64	; 0x40
 8009b0e:	d86f      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8009b10:	2b30      	cmp	r3, #48	; 0x30
 8009b12:	d064      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0x15a>
 8009b14:	2b30      	cmp	r3, #48	; 0x30
 8009b16:	d86b      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8009b18:	2b20      	cmp	r3, #32
 8009b1a:	d060      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0x15a>
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	d867      	bhi.n	8009bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d05c      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0x15a>
 8009b24:	2b10      	cmp	r3, #16
 8009b26:	d05a      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0x15a>
 8009b28:	e062      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6818      	ldr	r0, [r3, #0]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	6899      	ldr	r1, [r3, #8]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	f000 fb5d 	bl	800a1f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	609a      	str	r2, [r3, #8]
      break;
 8009b56:	e04f      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	6899      	ldr	r1, [r3, #8]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	f000 fb46 	bl	800a1f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	689a      	ldr	r2, [r3, #8]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b7a:	609a      	str	r2, [r3, #8]
      break;
 8009b7c:	e03c      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6818      	ldr	r0, [r3, #0]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	6859      	ldr	r1, [r3, #4]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	f000 faba 	bl	800a104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2150      	movs	r1, #80	; 0x50
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 fb13 	bl	800a1c2 <TIM_ITRx_SetConfig>
      break;
 8009b9c:	e02c      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6818      	ldr	r0, [r3, #0]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	6859      	ldr	r1, [r3, #4]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	461a      	mov	r2, r3
 8009bac:	f000 fad9 	bl	800a162 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2160      	movs	r1, #96	; 0x60
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 fb03 	bl	800a1c2 <TIM_ITRx_SetConfig>
      break;
 8009bbc:	e01c      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6818      	ldr	r0, [r3, #0]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	6859      	ldr	r1, [r3, #4]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f000 fa9a 	bl	800a104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2140      	movs	r1, #64	; 0x40
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 faf3 	bl	800a1c2 <TIM_ITRx_SetConfig>
      break;
 8009bdc:	e00c      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4619      	mov	r1, r3
 8009be8:	4610      	mov	r0, r2
 8009bea:	f000 faea 	bl	800a1c2 <TIM_ITRx_SetConfig>
      break;
 8009bee:	e003      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf4:	e000      	b.n	8009bf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c1a:	bf00      	nop
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b083      	sub	sp, #12
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c2e:	bf00      	nop
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c42:	bf00      	nop
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b083      	sub	sp, #12
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
	...

08009c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a40      	ldr	r2, [pc, #256]	; (8009d78 <TIM_Base_SetConfig+0x114>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d013      	beq.n	8009ca4 <TIM_Base_SetConfig+0x40>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c82:	d00f      	beq.n	8009ca4 <TIM_Base_SetConfig+0x40>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a3d      	ldr	r2, [pc, #244]	; (8009d7c <TIM_Base_SetConfig+0x118>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d00b      	beq.n	8009ca4 <TIM_Base_SetConfig+0x40>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a3c      	ldr	r2, [pc, #240]	; (8009d80 <TIM_Base_SetConfig+0x11c>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d007      	beq.n	8009ca4 <TIM_Base_SetConfig+0x40>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a3b      	ldr	r2, [pc, #236]	; (8009d84 <TIM_Base_SetConfig+0x120>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d003      	beq.n	8009ca4 <TIM_Base_SetConfig+0x40>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a3a      	ldr	r2, [pc, #232]	; (8009d88 <TIM_Base_SetConfig+0x124>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d108      	bne.n	8009cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a2f      	ldr	r2, [pc, #188]	; (8009d78 <TIM_Base_SetConfig+0x114>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d02b      	beq.n	8009d16 <TIM_Base_SetConfig+0xb2>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cc4:	d027      	beq.n	8009d16 <TIM_Base_SetConfig+0xb2>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a2c      	ldr	r2, [pc, #176]	; (8009d7c <TIM_Base_SetConfig+0x118>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d023      	beq.n	8009d16 <TIM_Base_SetConfig+0xb2>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a2b      	ldr	r2, [pc, #172]	; (8009d80 <TIM_Base_SetConfig+0x11c>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d01f      	beq.n	8009d16 <TIM_Base_SetConfig+0xb2>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a2a      	ldr	r2, [pc, #168]	; (8009d84 <TIM_Base_SetConfig+0x120>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d01b      	beq.n	8009d16 <TIM_Base_SetConfig+0xb2>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a29      	ldr	r2, [pc, #164]	; (8009d88 <TIM_Base_SetConfig+0x124>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d017      	beq.n	8009d16 <TIM_Base_SetConfig+0xb2>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a28      	ldr	r2, [pc, #160]	; (8009d8c <TIM_Base_SetConfig+0x128>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d013      	beq.n	8009d16 <TIM_Base_SetConfig+0xb2>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a27      	ldr	r2, [pc, #156]	; (8009d90 <TIM_Base_SetConfig+0x12c>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d00f      	beq.n	8009d16 <TIM_Base_SetConfig+0xb2>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a26      	ldr	r2, [pc, #152]	; (8009d94 <TIM_Base_SetConfig+0x130>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d00b      	beq.n	8009d16 <TIM_Base_SetConfig+0xb2>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a25      	ldr	r2, [pc, #148]	; (8009d98 <TIM_Base_SetConfig+0x134>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d007      	beq.n	8009d16 <TIM_Base_SetConfig+0xb2>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a24      	ldr	r2, [pc, #144]	; (8009d9c <TIM_Base_SetConfig+0x138>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d003      	beq.n	8009d16 <TIM_Base_SetConfig+0xb2>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a23      	ldr	r2, [pc, #140]	; (8009da0 <TIM_Base_SetConfig+0x13c>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d108      	bne.n	8009d28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	689a      	ldr	r2, [r3, #8]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a0a      	ldr	r2, [pc, #40]	; (8009d78 <TIM_Base_SetConfig+0x114>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d003      	beq.n	8009d5c <TIM_Base_SetConfig+0xf8>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a0c      	ldr	r2, [pc, #48]	; (8009d88 <TIM_Base_SetConfig+0x124>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d103      	bne.n	8009d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	691a      	ldr	r2, [r3, #16]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	615a      	str	r2, [r3, #20]
}
 8009d6a:	bf00      	nop
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	40010000 	.word	0x40010000
 8009d7c:	40000400 	.word	0x40000400
 8009d80:	40000800 	.word	0x40000800
 8009d84:	40000c00 	.word	0x40000c00
 8009d88:	40010400 	.word	0x40010400
 8009d8c:	40014000 	.word	0x40014000
 8009d90:	40014400 	.word	0x40014400
 8009d94:	40014800 	.word	0x40014800
 8009d98:	40001800 	.word	0x40001800
 8009d9c:	40001c00 	.word	0x40001c00
 8009da0:	40002000 	.word	0x40002000

08009da4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	f023 0201 	bic.w	r2, r3, #1
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f023 0303 	bic.w	r3, r3, #3
 8009dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	f023 0302 	bic.w	r3, r3, #2
 8009dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	697a      	ldr	r2, [r7, #20]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a20      	ldr	r2, [pc, #128]	; (8009e7c <TIM_OC1_SetConfig+0xd8>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d003      	beq.n	8009e08 <TIM_OC1_SetConfig+0x64>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a1f      	ldr	r2, [pc, #124]	; (8009e80 <TIM_OC1_SetConfig+0xdc>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d10c      	bne.n	8009e22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	f023 0308 	bic.w	r3, r3, #8
 8009e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	f023 0304 	bic.w	r3, r3, #4
 8009e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a15      	ldr	r2, [pc, #84]	; (8009e7c <TIM_OC1_SetConfig+0xd8>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d003      	beq.n	8009e32 <TIM_OC1_SetConfig+0x8e>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a14      	ldr	r2, [pc, #80]	; (8009e80 <TIM_OC1_SetConfig+0xdc>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d111      	bne.n	8009e56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	693a      	ldr	r2, [r7, #16]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	693a      	ldr	r2, [r7, #16]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	697a      	ldr	r2, [r7, #20]
 8009e6e:	621a      	str	r2, [r3, #32]
}
 8009e70:	bf00      	nop
 8009e72:	371c      	adds	r7, #28
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	40010000 	.word	0x40010000
 8009e80:	40010400 	.word	0x40010400

08009e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b087      	sub	sp, #28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	f023 0210 	bic.w	r2, r3, #16
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	021b      	lsls	r3, r3, #8
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f023 0320 	bic.w	r3, r3, #32
 8009ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	011b      	lsls	r3, r3, #4
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a22      	ldr	r2, [pc, #136]	; (8009f68 <TIM_OC2_SetConfig+0xe4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d003      	beq.n	8009eec <TIM_OC2_SetConfig+0x68>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a21      	ldr	r2, [pc, #132]	; (8009f6c <TIM_OC2_SetConfig+0xe8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d10d      	bne.n	8009f08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	011b      	lsls	r3, r3, #4
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a17      	ldr	r2, [pc, #92]	; (8009f68 <TIM_OC2_SetConfig+0xe4>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d003      	beq.n	8009f18 <TIM_OC2_SetConfig+0x94>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a16      	ldr	r2, [pc, #88]	; (8009f6c <TIM_OC2_SetConfig+0xe8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d113      	bne.n	8009f40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	685a      	ldr	r2, [r3, #4]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	621a      	str	r2, [r3, #32]
}
 8009f5a:	bf00      	nop
 8009f5c:	371c      	adds	r7, #28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	40010000 	.word	0x40010000
 8009f6c:	40010400 	.word	0x40010400

08009f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f023 0303 	bic.w	r3, r3, #3
 8009fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	021b      	lsls	r3, r3, #8
 8009fc0:	697a      	ldr	r2, [r7, #20]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a21      	ldr	r2, [pc, #132]	; (800a050 <TIM_OC3_SetConfig+0xe0>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d003      	beq.n	8009fd6 <TIM_OC3_SetConfig+0x66>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a20      	ldr	r2, [pc, #128]	; (800a054 <TIM_OC3_SetConfig+0xe4>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d10d      	bne.n	8009ff2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	021b      	lsls	r3, r3, #8
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a16      	ldr	r2, [pc, #88]	; (800a050 <TIM_OC3_SetConfig+0xe0>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d003      	beq.n	800a002 <TIM_OC3_SetConfig+0x92>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a15      	ldr	r2, [pc, #84]	; (800a054 <TIM_OC3_SetConfig+0xe4>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d113      	bne.n	800a02a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	011b      	lsls	r3, r3, #4
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	4313      	orrs	r3, r2
 800a028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	697a      	ldr	r2, [r7, #20]
 800a042:	621a      	str	r2, [r3, #32]
}
 800a044:	bf00      	nop
 800a046:	371c      	adds	r7, #28
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	40010000 	.word	0x40010000
 800a054:	40010400 	.word	0x40010400

0800a058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a058:	b480      	push	{r7}
 800a05a:	b087      	sub	sp, #28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	021b      	lsls	r3, r3, #8
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	4313      	orrs	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	031b      	lsls	r3, r3, #12
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a12      	ldr	r2, [pc, #72]	; (800a0fc <TIM_OC4_SetConfig+0xa4>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d003      	beq.n	800a0c0 <TIM_OC4_SetConfig+0x68>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a11      	ldr	r2, [pc, #68]	; (800a100 <TIM_OC4_SetConfig+0xa8>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d109      	bne.n	800a0d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	695b      	ldr	r3, [r3, #20]
 800a0cc:	019b      	lsls	r3, r3, #6
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	621a      	str	r2, [r3, #32]
}
 800a0ee:	bf00      	nop
 800a0f0:	371c      	adds	r7, #28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	40010000 	.word	0x40010000
 800a100:	40010400 	.word	0x40010400

0800a104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	f023 0201 	bic.w	r2, r3, #1
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a12e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	011b      	lsls	r3, r3, #4
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	4313      	orrs	r3, r2
 800a138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f023 030a 	bic.w	r3, r3, #10
 800a140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	4313      	orrs	r3, r2
 800a148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a162:	b480      	push	{r7}
 800a164:	b087      	sub	sp, #28
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	f023 0210 	bic.w	r2, r3, #16
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a1b      	ldr	r3, [r3, #32]
 800a184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a18c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	031b      	lsls	r3, r3, #12
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	4313      	orrs	r3, r2
 800a196:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a19e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	011b      	lsls	r3, r3, #4
 800a1a4:	693a      	ldr	r2, [r7, #16]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	621a      	str	r2, [r3, #32]
}
 800a1b6:	bf00      	nop
 800a1b8:	371c      	adds	r7, #28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b085      	sub	sp, #20
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	f043 0307 	orr.w	r3, r3, #7
 800a1e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	609a      	str	r2, [r3, #8]
}
 800a1ec:	bf00      	nop
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
 800a204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	021a      	lsls	r2, r3, #8
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	431a      	orrs	r2, r3
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	4313      	orrs	r3, r2
 800a220:	697a      	ldr	r2, [r7, #20]
 800a222:	4313      	orrs	r3, r2
 800a224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	609a      	str	r2, [r3, #8]
}
 800a22c:	bf00      	nop
 800a22e:	371c      	adds	r7, #28
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a238:	b480      	push	{r7}
 800a23a:	b087      	sub	sp, #28
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f003 031f 	and.w	r3, r3, #31
 800a24a:	2201      	movs	r2, #1
 800a24c:	fa02 f303 	lsl.w	r3, r2, r3
 800a250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6a1a      	ldr	r2, [r3, #32]
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	43db      	mvns	r3, r3
 800a25a:	401a      	ands	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6a1a      	ldr	r2, [r3, #32]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	f003 031f 	and.w	r3, r3, #31
 800a26a:	6879      	ldr	r1, [r7, #4]
 800a26c:	fa01 f303 	lsl.w	r3, r1, r3
 800a270:	431a      	orrs	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	621a      	str	r2, [r3, #32]
}
 800a276:	bf00      	nop
 800a278:	371c      	adds	r7, #28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
	...

0800a284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a294:	2b01      	cmp	r3, #1
 800a296:	d101      	bne.n	800a29c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a298:	2302      	movs	r3, #2
 800a29a:	e05a      	b.n	800a352 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a21      	ldr	r2, [pc, #132]	; (800a360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d022      	beq.n	800a326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2e8:	d01d      	beq.n	800a326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a1d      	ldr	r2, [pc, #116]	; (800a364 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d018      	beq.n	800a326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a1b      	ldr	r2, [pc, #108]	; (800a368 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d013      	beq.n	800a326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a1a      	ldr	r2, [pc, #104]	; (800a36c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d00e      	beq.n	800a326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a18      	ldr	r2, [pc, #96]	; (800a370 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d009      	beq.n	800a326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a17      	ldr	r2, [pc, #92]	; (800a374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d004      	beq.n	800a326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a15      	ldr	r2, [pc, #84]	; (800a378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d10c      	bne.n	800a340 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a32c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	68ba      	ldr	r2, [r7, #8]
 800a334:	4313      	orrs	r3, r2
 800a336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	40010000 	.word	0x40010000
 800a364:	40000400 	.word	0x40000400
 800a368:	40000800 	.word	0x40000800
 800a36c:	40000c00 	.word	0x40000c00
 800a370:	40010400 	.word	0x40010400
 800a374:	40014000 	.word	0x40014000
 800a378:	40001800 	.word	0x40001800

0800a37c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a390:	2b01      	cmp	r3, #1
 800a392:	d101      	bne.n	800a398 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a394:	2302      	movs	r3, #2
 800a396:	e03d      	b.n	800a414 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	695b      	ldr	r3, [r3, #20]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a43c:	bf00      	nop
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e03f      	b.n	800a4da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b00      	cmp	r3, #0
 800a464:	d106      	bne.n	800a474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7fc fc22 	bl	8006cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2224      	movs	r2, #36	; 0x24
 800a478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a48a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 f871 	bl	800b574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	691a      	ldr	r2, [r3, #16]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	695a      	ldr	r2, [r3, #20]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68da      	ldr	r2, [r3, #12]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e021      	b.n	800a538 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2224      	movs	r2, #36	; 0x24
 800a4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68da      	ldr	r2, [r3, #12]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a50a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7fc fce9 	bl	8006ee4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08a      	sub	sp, #40	; 0x28
 800a544:	af02      	add	r7, sp, #8
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	603b      	str	r3, [r7, #0]
 800a54c:	4613      	mov	r3, r2
 800a54e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a550:	2300      	movs	r3, #0
 800a552:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b20      	cmp	r3, #32
 800a55e:	d17c      	bne.n	800a65a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <HAL_UART_Transmit+0x2c>
 800a566:	88fb      	ldrh	r3, [r7, #6]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e075      	b.n	800a65c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a576:	2b01      	cmp	r3, #1
 800a578:	d101      	bne.n	800a57e <HAL_UART_Transmit+0x3e>
 800a57a:	2302      	movs	r3, #2
 800a57c:	e06e      	b.n	800a65c <HAL_UART_Transmit+0x11c>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2221      	movs	r2, #33	; 0x21
 800a590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a594:	f7fc fe5c 	bl	8007250 <HAL_GetTick>
 800a598:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	88fa      	ldrh	r2, [r7, #6]
 800a59e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	88fa      	ldrh	r2, [r7, #6]
 800a5a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ae:	d108      	bne.n	800a5c2 <HAL_UART_Transmit+0x82>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d104      	bne.n	800a5c2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	61bb      	str	r3, [r7, #24]
 800a5c0:	e003      	b.n	800a5ca <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a5d2:	e02a      	b.n	800a62a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	2180      	movs	r1, #128	; 0x80
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f000 fcf9 	bl	800afd6 <UART_WaitOnFlagUntilTimeout>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e036      	b.n	800a65c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10b      	bne.n	800a60c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a602:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	3302      	adds	r3, #2
 800a608:	61bb      	str	r3, [r7, #24]
 800a60a:	e007      	b.n	800a61c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	781a      	ldrb	r2, [r3, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	3301      	adds	r3, #1
 800a61a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a620:	b29b      	uxth	r3, r3
 800a622:	3b01      	subs	r3, #1
 800a624:	b29a      	uxth	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a62e:	b29b      	uxth	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1cf      	bne.n	800a5d4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	2200      	movs	r2, #0
 800a63c:	2140      	movs	r1, #64	; 0x40
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f000 fcc9 	bl	800afd6 <UART_WaitOnFlagUntilTimeout>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a64a:	2303      	movs	r3, #3
 800a64c:	e006      	b.n	800a65c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2220      	movs	r2, #32
 800a652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a656:	2300      	movs	r3, #0
 800a658:	e000      	b.n	800a65c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a65a:	2302      	movs	r3, #2
  }
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3720      	adds	r7, #32
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08c      	sub	sp, #48	; 0x30
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	4613      	mov	r3, r2
 800a670:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b20      	cmp	r3, #32
 800a67c:	d165      	bne.n	800a74a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <HAL_UART_Transmit_DMA+0x26>
 800a684:	88fb      	ldrh	r3, [r7, #6]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e05e      	b.n	800a74c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a694:	2b01      	cmp	r3, #1
 800a696:	d101      	bne.n	800a69c <HAL_UART_Transmit_DMA+0x38>
 800a698:	2302      	movs	r3, #2
 800a69a:	e057      	b.n	800a74c <HAL_UART_Transmit_DMA+0xe8>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	88fa      	ldrh	r2, [r7, #6]
 800a6ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	88fa      	ldrh	r2, [r7, #6]
 800a6b4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2221      	movs	r2, #33	; 0x21
 800a6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c8:	4a22      	ldr	r2, [pc, #136]	; (800a754 <HAL_UART_Transmit_DMA+0xf0>)
 800a6ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d0:	4a21      	ldr	r2, [pc, #132]	; (800a758 <HAL_UART_Transmit_DMA+0xf4>)
 800a6d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d8:	4a20      	ldr	r2, [pc, #128]	; (800a75c <HAL_UART_Transmit_DMA+0xf8>)
 800a6da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a6e4:	f107 0308 	add.w	r3, r7, #8
 800a6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	6819      	ldr	r1, [r3, #0]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	88fb      	ldrh	r3, [r7, #6]
 800a6fc:	f7fd f842 	bl	8007784 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a708:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3314      	adds	r3, #20
 800a718:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	e853 3f00 	ldrex	r3, [r3]
 800a720:	617b      	str	r3, [r7, #20]
   return(result);
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a728:	62bb      	str	r3, [r7, #40]	; 0x28
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	3314      	adds	r3, #20
 800a730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a732:	627a      	str	r2, [r7, #36]	; 0x24
 800a734:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a736:	6a39      	ldr	r1, [r7, #32]
 800a738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e5      	bne.n	800a712 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	e000      	b.n	800a74c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a74a:	2302      	movs	r3, #2
  }
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3730      	adds	r7, #48	; 0x30
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	0800ad31 	.word	0x0800ad31
 800a758:	0800adcb 	.word	0x0800adcb
 800a75c:	0800af43 	.word	0x0800af43

0800a760 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	4613      	mov	r3, r2
 800a76c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b20      	cmp	r3, #32
 800a778:	d11d      	bne.n	800a7b6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <HAL_UART_Receive_DMA+0x26>
 800a780:	88fb      	ldrh	r3, [r7, #6]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e016      	b.n	800a7b8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a790:	2b01      	cmp	r3, #1
 800a792:	d101      	bne.n	800a798 <HAL_UART_Receive_DMA+0x38>
 800a794:	2302      	movs	r3, #2
 800a796:	e00f      	b.n	800a7b8 <HAL_UART_Receive_DMA+0x58>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a7a6:	88fb      	ldrh	r3, [r7, #6]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	68b9      	ldr	r1, [r7, #8]
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f000 fc81 	bl	800b0b4 <UART_Start_Receive_DMA>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	e000      	b.n	800a7b8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a7b6:	2302      	movs	r3, #2
  }
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b0ba      	sub	sp, #232	; 0xe8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	695b      	ldr	r3, [r3, #20]
 800a7e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f6:	f003 030f 	and.w	r3, r3, #15
 800a7fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a7fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10f      	bne.n	800a826 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a80a:	f003 0320 	and.w	r3, r3, #32
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d009      	beq.n	800a826 <HAL_UART_IRQHandler+0x66>
 800a812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a816:	f003 0320 	and.w	r3, r3, #32
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d003      	beq.n	800a826 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fded 	bl	800b3fe <UART_Receive_IT>
      return;
 800a824:	e256      	b.n	800acd4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f000 80de 	beq.w	800a9ec <HAL_UART_IRQHandler+0x22c>
 800a830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d106      	bne.n	800a84a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a83c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a840:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 80d1 	beq.w	800a9ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a84a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00b      	beq.n	800a86e <HAL_UART_IRQHandler+0xae>
 800a856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a85a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d005      	beq.n	800a86e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a866:	f043 0201 	orr.w	r2, r3, #1
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a872:	f003 0304 	and.w	r3, r3, #4
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00b      	beq.n	800a892 <HAL_UART_IRQHandler+0xd2>
 800a87a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	f043 0202 	orr.w	r2, r3, #2
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a896:	f003 0302 	and.w	r3, r3, #2
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00b      	beq.n	800a8b6 <HAL_UART_IRQHandler+0xf6>
 800a89e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d005      	beq.n	800a8b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	f043 0204 	orr.w	r2, r3, #4
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a8b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ba:	f003 0308 	and.w	r3, r3, #8
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d011      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x126>
 800a8c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8c6:	f003 0320 	and.w	r3, r3, #32
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d105      	bne.n	800a8da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a8ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d005      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	f043 0208 	orr.w	r2, r3, #8
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f000 81ed 	beq.w	800acca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a8f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8f4:	f003 0320 	and.w	r3, r3, #32
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d008      	beq.n	800a90e <HAL_UART_IRQHandler+0x14e>
 800a8fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a900:	f003 0320 	and.w	r3, r3, #32
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fd78 	bl	800b3fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a918:	2b40      	cmp	r3, #64	; 0x40
 800a91a:	bf0c      	ite	eq
 800a91c:	2301      	moveq	r3, #1
 800a91e:	2300      	movne	r3, #0
 800a920:	b2db      	uxtb	r3, r3
 800a922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92a:	f003 0308 	and.w	r3, r3, #8
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d103      	bne.n	800a93a <HAL_UART_IRQHandler+0x17a>
 800a932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a936:	2b00      	cmp	r3, #0
 800a938:	d04f      	beq.n	800a9da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fc80 	bl	800b240 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a94a:	2b40      	cmp	r3, #64	; 0x40
 800a94c:	d141      	bne.n	800a9d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3314      	adds	r3, #20
 800a954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a958:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a95c:	e853 3f00 	ldrex	r3, [r3]
 800a960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a96c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3314      	adds	r3, #20
 800a976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a97a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a97e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a98a:	e841 2300 	strex	r3, r2, [r1]
 800a98e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1d9      	bne.n	800a94e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d013      	beq.n	800a9ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a6:	4a7d      	ldr	r2, [pc, #500]	; (800ab9c <HAL_UART_IRQHandler+0x3dc>)
 800a9a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fc ffb0 	bl	8007914 <HAL_DMA_Abort_IT>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d016      	beq.n	800a9e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9c8:	e00e      	b.n	800a9e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7f9 fd42 	bl	8004454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9d0:	e00a      	b.n	800a9e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7f9 fd3e 	bl	8004454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9d8:	e006      	b.n	800a9e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7f9 fd3a 	bl	8004454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a9e6:	e170      	b.n	800acca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9e8:	bf00      	nop
    return;
 800a9ea:	e16e      	b.n	800acca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	f040 814a 	bne.w	800ac8a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9fa:	f003 0310 	and.w	r3, r3, #16
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 8143 	beq.w	800ac8a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aa04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa08:	f003 0310 	and.w	r3, r3, #16
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f000 813c 	beq.w	800ac8a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa12:	2300      	movs	r3, #0
 800aa14:	60bb      	str	r3, [r7, #8]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	60bb      	str	r3, [r7, #8]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	60bb      	str	r3, [r7, #8]
 800aa26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa32:	2b40      	cmp	r3, #64	; 0x40
 800aa34:	f040 80b4 	bne.w	800aba0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f000 8140 	beq.w	800acce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa56:	429a      	cmp	r2, r3
 800aa58:	f080 8139 	bcs.w	800acce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa68:	69db      	ldr	r3, [r3, #28]
 800aa6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa6e:	f000 8088 	beq.w	800ab82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	330c      	adds	r3, #12
 800aa78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa80:	e853 3f00 	ldrex	r3, [r3]
 800aa84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	330c      	adds	r3, #12
 800aa9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aa9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aaa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aaaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aaae:	e841 2300 	strex	r3, r2, [r1]
 800aab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1d9      	bne.n	800aa72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	3314      	adds	r3, #20
 800aac4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aac8:	e853 3f00 	ldrex	r3, [r3]
 800aacc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aad0:	f023 0301 	bic.w	r3, r3, #1
 800aad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	3314      	adds	r3, #20
 800aade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aae2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aae6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aaea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aaee:	e841 2300 	strex	r3, r2, [r1]
 800aaf2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aaf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1e1      	bne.n	800aabe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3314      	adds	r3, #20
 800ab00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab04:	e853 3f00 	ldrex	r3, [r3]
 800ab08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ab0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3314      	adds	r3, #20
 800ab1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ab1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ab20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab26:	e841 2300 	strex	r3, r2, [r1]
 800ab2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1e3      	bne.n	800aafa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	330c      	adds	r3, #12
 800ab46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab4a:	e853 3f00 	ldrex	r3, [r3]
 800ab4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab52:	f023 0310 	bic.w	r3, r3, #16
 800ab56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	330c      	adds	r3, #12
 800ab60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab64:	65ba      	str	r2, [r7, #88]	; 0x58
 800ab66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab6c:	e841 2300 	strex	r3, r2, [r1]
 800ab70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1e3      	bne.n	800ab40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fc fe59 	bl	8007834 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f8c0 	bl	800ad18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab98:	e099      	b.n	800acce <HAL_UART_IRQHandler+0x50e>
 800ab9a:	bf00      	nop
 800ab9c:	0800b307 	.word	0x0800b307
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f000 808b 	beq.w	800acd2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800abbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 8086 	beq.w	800acd2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	330c      	adds	r3, #12
 800abcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	e853 3f00 	ldrex	r3, [r3]
 800abd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	330c      	adds	r3, #12
 800abe6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800abea:	647a      	str	r2, [r7, #68]	; 0x44
 800abec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abf2:	e841 2300 	strex	r3, r2, [r1]
 800abf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1e3      	bne.n	800abc6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	3314      	adds	r3, #20
 800ac04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac08:	e853 3f00 	ldrex	r3, [r3]
 800ac0c:	623b      	str	r3, [r7, #32]
   return(result);
 800ac0e:	6a3b      	ldr	r3, [r7, #32]
 800ac10:	f023 0301 	bic.w	r3, r3, #1
 800ac14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3314      	adds	r3, #20
 800ac1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac22:	633a      	str	r2, [r7, #48]	; 0x30
 800ac24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac2a:	e841 2300 	strex	r3, r2, [r1]
 800ac2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1e3      	bne.n	800abfe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2220      	movs	r2, #32
 800ac3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	330c      	adds	r3, #12
 800ac4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	e853 3f00 	ldrex	r3, [r3]
 800ac52:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f023 0310 	bic.w	r3, r3, #16
 800ac5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	330c      	adds	r3, #12
 800ac64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ac68:	61fa      	str	r2, [r7, #28]
 800ac6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6c:	69b9      	ldr	r1, [r7, #24]
 800ac6e:	69fa      	ldr	r2, [r7, #28]
 800ac70:	e841 2300 	strex	r3, r2, [r1]
 800ac74:	617b      	str	r3, [r7, #20]
   return(result);
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1e3      	bne.n	800ac44 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 f848 	bl	800ad18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac88:	e023      	b.n	800acd2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d009      	beq.n	800acaa <HAL_UART_IRQHandler+0x4ea>
 800ac96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fb43 	bl	800b32e <UART_Transmit_IT>
    return;
 800aca8:	e014      	b.n	800acd4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800acaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00e      	beq.n	800acd4 <HAL_UART_IRQHandler+0x514>
 800acb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d008      	beq.n	800acd4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fb83 	bl	800b3ce <UART_EndTransmit_IT>
    return;
 800acc8:	e004      	b.n	800acd4 <HAL_UART_IRQHandler+0x514>
    return;
 800acca:	bf00      	nop
 800accc:	e002      	b.n	800acd4 <HAL_UART_IRQHandler+0x514>
      return;
 800acce:	bf00      	nop
 800acd0:	e000      	b.n	800acd4 <HAL_UART_IRQHandler+0x514>
      return;
 800acd2:	bf00      	nop
  }
}
 800acd4:	37e8      	adds	r7, #232	; 0xe8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop

0800acdc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b090      	sub	sp, #64	; 0x40
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d137      	bne.n	800adbc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ad4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad4e:	2200      	movs	r2, #0
 800ad50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3314      	adds	r3, #20
 800ad58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	623b      	str	r3, [r7, #32]
   return(result);
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad68:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3314      	adds	r3, #20
 800ad70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad72:	633a      	str	r2, [r7, #48]	; 0x30
 800ad74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e5      	bne.n	800ad52 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	330c      	adds	r3, #12
 800ad8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	e853 3f00 	ldrex	r3, [r3]
 800ad94:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	330c      	adds	r3, #12
 800ada4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ada6:	61fa      	str	r2, [r7, #28]
 800ada8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adaa:	69b9      	ldr	r1, [r7, #24]
 800adac:	69fa      	ldr	r2, [r7, #28]
 800adae:	e841 2300 	strex	r3, r2, [r1]
 800adb2:	617b      	str	r3, [r7, #20]
   return(result);
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1e5      	bne.n	800ad86 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adba:	e002      	b.n	800adc2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800adbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800adbe:	f7f9 fb65 	bl	800448c <HAL_UART_TxCpltCallback>
}
 800adc2:	bf00      	nop
 800adc4:	3740      	adds	r7, #64	; 0x40
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b084      	sub	sp, #16
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f7ff ff7f 	bl	800acdc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adde:	bf00      	nop
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b09c      	sub	sp, #112	; 0x70
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d172      	bne.n	800aee8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ae02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae04:	2200      	movs	r2, #0
 800ae06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	330c      	adds	r3, #12
 800ae0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae12:	e853 3f00 	ldrex	r3, [r3]
 800ae16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ae18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	330c      	adds	r3, #12
 800ae26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae28:	65ba      	str	r2, [r7, #88]	; 0x58
 800ae2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae30:	e841 2300 	strex	r3, r2, [r1]
 800ae34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e5      	bne.n	800ae08 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3314      	adds	r3, #20
 800ae42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae46:	e853 3f00 	ldrex	r3, [r3]
 800ae4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae4e:	f023 0301 	bic.w	r3, r3, #1
 800ae52:	667b      	str	r3, [r7, #100]	; 0x64
 800ae54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3314      	adds	r3, #20
 800ae5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae5c:	647a      	str	r2, [r7, #68]	; 0x44
 800ae5e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae64:	e841 2300 	strex	r3, r2, [r1]
 800ae68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1e5      	bne.n	800ae3c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3314      	adds	r3, #20
 800ae76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	e853 3f00 	ldrex	r3, [r3]
 800ae7e:	623b      	str	r3, [r7, #32]
   return(result);
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae86:	663b      	str	r3, [r7, #96]	; 0x60
 800ae88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3314      	adds	r3, #20
 800ae8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae90:	633a      	str	r2, [r7, #48]	; 0x30
 800ae92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae98:	e841 2300 	strex	r3, r2, [r1]
 800ae9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1e5      	bne.n	800ae70 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aea6:	2220      	movs	r2, #32
 800aea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d119      	bne.n	800aee8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	330c      	adds	r3, #12
 800aeba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	e853 3f00 	ldrex	r3, [r3]
 800aec2:	60fb      	str	r3, [r7, #12]
   return(result);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f023 0310 	bic.w	r3, r3, #16
 800aeca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	330c      	adds	r3, #12
 800aed2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aed4:	61fa      	str	r2, [r7, #28]
 800aed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed8:	69b9      	ldr	r1, [r7, #24]
 800aeda:	69fa      	ldr	r2, [r7, #28]
 800aedc:	e841 2300 	strex	r3, r2, [r1]
 800aee0:	617b      	str	r3, [r7, #20]
   return(result);
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1e5      	bne.n	800aeb4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d106      	bne.n	800aefe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aef2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aef4:	4619      	mov	r1, r3
 800aef6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aef8:	f7ff ff0e 	bl	800ad18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aefc:	e002      	b.n	800af04 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800aefe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800af00:	f7ff fef6 	bl	800acf0 <HAL_UART_RxCpltCallback>
}
 800af04:	bf00      	nop
 800af06:	3770      	adds	r7, #112	; 0x70
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af18:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d108      	bne.n	800af34 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af26:	085b      	lsrs	r3, r3, #1
 800af28:	b29b      	uxth	r3, r3
 800af2a:	4619      	mov	r1, r3
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f7ff fef3 	bl	800ad18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af32:	e002      	b.n	800af3a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f7ff fee5 	bl	800ad04 <HAL_UART_RxHalfCpltCallback>
}
 800af3a:	bf00      	nop
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af52:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af5e:	2b80      	cmp	r3, #128	; 0x80
 800af60:	bf0c      	ite	eq
 800af62:	2301      	moveq	r3, #1
 800af64:	2300      	movne	r3, #0
 800af66:	b2db      	uxtb	r3, r3
 800af68:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b21      	cmp	r3, #33	; 0x21
 800af74:	d108      	bne.n	800af88 <UART_DMAError+0x46>
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d005      	beq.n	800af88 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	2200      	movs	r2, #0
 800af80:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800af82:	68b8      	ldr	r0, [r7, #8]
 800af84:	f000 f934 	bl	800b1f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af92:	2b40      	cmp	r3, #64	; 0x40
 800af94:	bf0c      	ite	eq
 800af96:	2301      	moveq	r3, #1
 800af98:	2300      	movne	r3, #0
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b22      	cmp	r3, #34	; 0x22
 800afa8:	d108      	bne.n	800afbc <UART_DMAError+0x7a>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d005      	beq.n	800afbc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2200      	movs	r2, #0
 800afb4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800afb6:	68b8      	ldr	r0, [r7, #8]
 800afb8:	f000 f942 	bl	800b240 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc0:	f043 0210 	orr.w	r2, r3, #16
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afc8:	68b8      	ldr	r0, [r7, #8]
 800afca:	f7f9 fa43 	bl	8004454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afce:	bf00      	nop
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b090      	sub	sp, #64	; 0x40
 800afda:	af00      	add	r7, sp, #0
 800afdc:	60f8      	str	r0, [r7, #12]
 800afde:	60b9      	str	r1, [r7, #8]
 800afe0:	603b      	str	r3, [r7, #0]
 800afe2:	4613      	mov	r3, r2
 800afe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afe6:	e050      	b.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afee:	d04c      	beq.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d007      	beq.n	800b006 <UART_WaitOnFlagUntilTimeout+0x30>
 800aff6:	f7fc f92b 	bl	8007250 <HAL_GetTick>
 800affa:	4602      	mov	r2, r0
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b002:	429a      	cmp	r2, r3
 800b004:	d241      	bcs.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	330c      	adds	r3, #12
 800b00c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b010:	e853 3f00 	ldrex	r3, [r3]
 800b014:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b01c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	330c      	adds	r3, #12
 800b024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b026:	637a      	str	r2, [r7, #52]	; 0x34
 800b028:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b02c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b02e:	e841 2300 	strex	r3, r2, [r1]
 800b032:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1e5      	bne.n	800b006 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3314      	adds	r3, #20
 800b040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	e853 3f00 	ldrex	r3, [r3]
 800b048:	613b      	str	r3, [r7, #16]
   return(result);
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	f023 0301 	bic.w	r3, r3, #1
 800b050:	63bb      	str	r3, [r7, #56]	; 0x38
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3314      	adds	r3, #20
 800b058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b05a:	623a      	str	r2, [r7, #32]
 800b05c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05e:	69f9      	ldr	r1, [r7, #28]
 800b060:	6a3a      	ldr	r2, [r7, #32]
 800b062:	e841 2300 	strex	r3, r2, [r1]
 800b066:	61bb      	str	r3, [r7, #24]
   return(result);
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1e5      	bne.n	800b03a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2220      	movs	r2, #32
 800b072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2220      	movs	r2, #32
 800b07a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e00f      	b.n	800b0aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	4013      	ands	r3, r2
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	429a      	cmp	r2, r3
 800b098:	bf0c      	ite	eq
 800b09a:	2301      	moveq	r3, #1
 800b09c:	2300      	movne	r3, #0
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	79fb      	ldrb	r3, [r7, #7]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d09f      	beq.n	800afe8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3740      	adds	r7, #64	; 0x40
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b098      	sub	sp, #96	; 0x60
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	88fa      	ldrh	r2, [r7, #6]
 800b0cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2222      	movs	r2, #34	; 0x22
 800b0d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e0:	4a40      	ldr	r2, [pc, #256]	; (800b1e4 <UART_Start_Receive_DMA+0x130>)
 800b0e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e8:	4a3f      	ldr	r2, [pc, #252]	; (800b1e8 <UART_Start_Receive_DMA+0x134>)
 800b0ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f0:	4a3e      	ldr	r2, [pc, #248]	; (800b1ec <UART_Start_Receive_DMA+0x138>)
 800b0f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b0fc:	f107 0308 	add.w	r3, r7, #8
 800b100:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3304      	adds	r3, #4
 800b10c:	4619      	mov	r1, r3
 800b10e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	88fb      	ldrh	r3, [r7, #6]
 800b114:	f7fc fb36 	bl	8007784 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b118:	2300      	movs	r3, #0
 800b11a:	613b      	str	r3, [r7, #16]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	613b      	str	r3, [r7, #16]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	613b      	str	r3, [r7, #16]
 800b12c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d019      	beq.n	800b172 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	330c      	adds	r3, #12
 800b144:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b148:	e853 3f00 	ldrex	r3, [r3]
 800b14c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b154:	65bb      	str	r3, [r7, #88]	; 0x58
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	330c      	adds	r3, #12
 800b15c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b15e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b160:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b162:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b166:	e841 2300 	strex	r3, r2, [r1]
 800b16a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b16c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1e5      	bne.n	800b13e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3314      	adds	r3, #20
 800b178:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17c:	e853 3f00 	ldrex	r3, [r3]
 800b180:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b184:	f043 0301 	orr.w	r3, r3, #1
 800b188:	657b      	str	r3, [r7, #84]	; 0x54
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3314      	adds	r3, #20
 800b190:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b192:	63ba      	str	r2, [r7, #56]	; 0x38
 800b194:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b196:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b19a:	e841 2300 	strex	r3, r2, [r1]
 800b19e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1e5      	bne.n	800b172 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	3314      	adds	r3, #20
 800b1ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	e853 3f00 	ldrex	r3, [r3]
 800b1b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1bc:	653b      	str	r3, [r7, #80]	; 0x50
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3314      	adds	r3, #20
 800b1c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1c6:	627a      	str	r2, [r7, #36]	; 0x24
 800b1c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ca:	6a39      	ldr	r1, [r7, #32]
 800b1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ce:	e841 2300 	strex	r3, r2, [r1]
 800b1d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1e5      	bne.n	800b1a6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3760      	adds	r7, #96	; 0x60
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	0800ade7 	.word	0x0800ade7
 800b1e8:	0800af0d 	.word	0x0800af0d
 800b1ec:	0800af43 	.word	0x0800af43

0800b1f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b089      	sub	sp, #36	; 0x24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	330c      	adds	r3, #12
 800b1fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	e853 3f00 	ldrex	r3, [r3]
 800b206:	60bb      	str	r3, [r7, #8]
   return(result);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b20e:	61fb      	str	r3, [r7, #28]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	330c      	adds	r3, #12
 800b216:	69fa      	ldr	r2, [r7, #28]
 800b218:	61ba      	str	r2, [r7, #24]
 800b21a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21c:	6979      	ldr	r1, [r7, #20]
 800b21e:	69ba      	ldr	r2, [r7, #24]
 800b220:	e841 2300 	strex	r3, r2, [r1]
 800b224:	613b      	str	r3, [r7, #16]
   return(result);
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1e5      	bne.n	800b1f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2220      	movs	r2, #32
 800b230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b234:	bf00      	nop
 800b236:	3724      	adds	r7, #36	; 0x24
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b240:	b480      	push	{r7}
 800b242:	b095      	sub	sp, #84	; 0x54
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	330c      	adds	r3, #12
 800b24e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b252:	e853 3f00 	ldrex	r3, [r3]
 800b256:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b25e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	330c      	adds	r3, #12
 800b266:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b268:	643a      	str	r2, [r7, #64]	; 0x40
 800b26a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b26e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b270:	e841 2300 	strex	r3, r2, [r1]
 800b274:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1e5      	bne.n	800b248 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	3314      	adds	r3, #20
 800b282:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	e853 3f00 	ldrex	r3, [r3]
 800b28a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	f023 0301 	bic.w	r3, r3, #1
 800b292:	64bb      	str	r3, [r7, #72]	; 0x48
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3314      	adds	r3, #20
 800b29a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b29c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b29e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2a4:	e841 2300 	strex	r3, r2, [r1]
 800b2a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1e5      	bne.n	800b27c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d119      	bne.n	800b2ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	330c      	adds	r3, #12
 800b2be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	e853 3f00 	ldrex	r3, [r3]
 800b2c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	f023 0310 	bic.w	r3, r3, #16
 800b2ce:	647b      	str	r3, [r7, #68]	; 0x44
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	330c      	adds	r3, #12
 800b2d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2d8:	61ba      	str	r2, [r7, #24]
 800b2da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2dc:	6979      	ldr	r1, [r7, #20]
 800b2de:	69ba      	ldr	r2, [r7, #24]
 800b2e0:	e841 2300 	strex	r3, r2, [r1]
 800b2e4:	613b      	str	r3, [r7, #16]
   return(result);
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1e5      	bne.n	800b2b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2220      	movs	r2, #32
 800b2f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b2fa:	bf00      	nop
 800b2fc:	3754      	adds	r7, #84	; 0x54
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b084      	sub	sp, #16
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b312:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2200      	movs	r2, #0
 800b31e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f7f9 f897 	bl	8004454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b326:	bf00      	nop
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b32e:	b480      	push	{r7}
 800b330:	b085      	sub	sp, #20
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b21      	cmp	r3, #33	; 0x21
 800b340:	d13e      	bne.n	800b3c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b34a:	d114      	bne.n	800b376 <UART_Transmit_IT+0x48>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d110      	bne.n	800b376 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a1b      	ldr	r3, [r3, #32]
 800b358:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	461a      	mov	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b368:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a1b      	ldr	r3, [r3, #32]
 800b36e:	1c9a      	adds	r2, r3, #2
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	621a      	str	r2, [r3, #32]
 800b374:	e008      	b.n	800b388 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	1c59      	adds	r1, r3, #1
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	6211      	str	r1, [r2, #32]
 800b380:	781a      	ldrb	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	3b01      	subs	r3, #1
 800b390:	b29b      	uxth	r3, r3
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	4619      	mov	r1, r3
 800b396:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10f      	bne.n	800b3bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	68da      	ldr	r2, [r3, #12]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68da      	ldr	r2, [r3, #12]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	e000      	b.n	800b3c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b3c0:	2302      	movs	r3, #2
  }
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68da      	ldr	r2, [r3, #12]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2220      	movs	r2, #32
 800b3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7f9 f84c 	bl	800448c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b08c      	sub	sp, #48	; 0x30
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b22      	cmp	r3, #34	; 0x22
 800b410:	f040 80ab 	bne.w	800b56a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b41c:	d117      	bne.n	800b44e <UART_Receive_IT+0x50>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d113      	bne.n	800b44e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b42e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	b29b      	uxth	r3, r3
 800b438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b440:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b446:	1c9a      	adds	r2, r3, #2
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	629a      	str	r2, [r3, #40]	; 0x28
 800b44c:	e026      	b.n	800b49c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b452:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b454:	2300      	movs	r3, #0
 800b456:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b460:	d007      	beq.n	800b472 <UART_Receive_IT+0x74>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10a      	bne.n	800b480 <UART_Receive_IT+0x82>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d106      	bne.n	800b480 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	b2da      	uxtb	r2, r3
 800b47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47c:	701a      	strb	r2, [r3, #0]
 800b47e:	e008      	b.n	800b492 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	b2db      	uxtb	r3, r3
 800b488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b48c:	b2da      	uxtb	r2, r3
 800b48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b490:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b496:	1c5a      	adds	r2, r3, #1
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d15a      	bne.n	800b566 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68da      	ldr	r2, [r3, #12]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f022 0220 	bic.w	r2, r2, #32
 800b4be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68da      	ldr	r2, [r3, #12]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	695a      	ldr	r2, [r3, #20]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f022 0201 	bic.w	r2, r2, #1
 800b4de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2220      	movs	r2, #32
 800b4e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d135      	bne.n	800b55c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	330c      	adds	r3, #12
 800b4fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	e853 3f00 	ldrex	r3, [r3]
 800b504:	613b      	str	r3, [r7, #16]
   return(result);
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	f023 0310 	bic.w	r3, r3, #16
 800b50c:	627b      	str	r3, [r7, #36]	; 0x24
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	330c      	adds	r3, #12
 800b514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b516:	623a      	str	r2, [r7, #32]
 800b518:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51a:	69f9      	ldr	r1, [r7, #28]
 800b51c:	6a3a      	ldr	r2, [r7, #32]
 800b51e:	e841 2300 	strex	r3, r2, [r1]
 800b522:	61bb      	str	r3, [r7, #24]
   return(result);
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1e5      	bne.n	800b4f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 0310 	and.w	r3, r3, #16
 800b534:	2b10      	cmp	r3, #16
 800b536:	d10a      	bne.n	800b54e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b538:	2300      	movs	r3, #0
 800b53a:	60fb      	str	r3, [r7, #12]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	60fb      	str	r3, [r7, #12]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	60fb      	str	r3, [r7, #12]
 800b54c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7ff fbdf 	bl	800ad18 <HAL_UARTEx_RxEventCallback>
 800b55a:	e002      	b.n	800b562 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f7ff fbc7 	bl	800acf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	e002      	b.n	800b56c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	e000      	b.n	800b56c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b56a:	2302      	movs	r3, #2
  }
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3730      	adds	r7, #48	; 0x30
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b578:	b0c0      	sub	sp, #256	; 0x100
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b590:	68d9      	ldr	r1, [r3, #12]
 800b592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	ea40 0301 	orr.w	r3, r0, r1
 800b59c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b59e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5a2:	689a      	ldr	r2, [r3, #8]
 800b5a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	431a      	orrs	r2, r3
 800b5b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b5cc:	f021 010c 	bic.w	r1, r1, #12
 800b5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b5da:	430b      	orrs	r3, r1
 800b5dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b5de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b5ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ee:	6999      	ldr	r1, [r3, #24]
 800b5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	ea40 0301 	orr.w	r3, r0, r1
 800b5fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b5fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	4b8f      	ldr	r3, [pc, #572]	; (800b840 <UART_SetConfig+0x2cc>)
 800b604:	429a      	cmp	r2, r3
 800b606:	d005      	beq.n	800b614 <UART_SetConfig+0xa0>
 800b608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	4b8d      	ldr	r3, [pc, #564]	; (800b844 <UART_SetConfig+0x2d0>)
 800b610:	429a      	cmp	r2, r3
 800b612:	d104      	bne.n	800b61e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b614:	f7fc ffca 	bl	80085ac <HAL_RCC_GetPCLK2Freq>
 800b618:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b61c:	e003      	b.n	800b626 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b61e:	f7fc ffb1 	bl	8008584 <HAL_RCC_GetPCLK1Freq>
 800b622:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b62a:	69db      	ldr	r3, [r3, #28]
 800b62c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b630:	f040 810c 	bne.w	800b84c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b638:	2200      	movs	r2, #0
 800b63a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b63e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b642:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b646:	4622      	mov	r2, r4
 800b648:	462b      	mov	r3, r5
 800b64a:	1891      	adds	r1, r2, r2
 800b64c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b64e:	415b      	adcs	r3, r3
 800b650:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b652:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b656:	4621      	mov	r1, r4
 800b658:	eb12 0801 	adds.w	r8, r2, r1
 800b65c:	4629      	mov	r1, r5
 800b65e:	eb43 0901 	adc.w	r9, r3, r1
 800b662:	f04f 0200 	mov.w	r2, #0
 800b666:	f04f 0300 	mov.w	r3, #0
 800b66a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b66e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b676:	4690      	mov	r8, r2
 800b678:	4699      	mov	r9, r3
 800b67a:	4623      	mov	r3, r4
 800b67c:	eb18 0303 	adds.w	r3, r8, r3
 800b680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b684:	462b      	mov	r3, r5
 800b686:	eb49 0303 	adc.w	r3, r9, r3
 800b68a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b68e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b69a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b69e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	18db      	adds	r3, r3, r3
 800b6a6:	653b      	str	r3, [r7, #80]	; 0x50
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	eb42 0303 	adc.w	r3, r2, r3
 800b6ae:	657b      	str	r3, [r7, #84]	; 0x54
 800b6b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b6b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b6b8:	f7f5 fa24 	bl	8000b04 <__aeabi_uldivmod>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4b61      	ldr	r3, [pc, #388]	; (800b848 <UART_SetConfig+0x2d4>)
 800b6c2:	fba3 2302 	umull	r2, r3, r3, r2
 800b6c6:	095b      	lsrs	r3, r3, #5
 800b6c8:	011c      	lsls	r4, r3, #4
 800b6ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b6d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b6d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b6dc:	4642      	mov	r2, r8
 800b6de:	464b      	mov	r3, r9
 800b6e0:	1891      	adds	r1, r2, r2
 800b6e2:	64b9      	str	r1, [r7, #72]	; 0x48
 800b6e4:	415b      	adcs	r3, r3
 800b6e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b6ec:	4641      	mov	r1, r8
 800b6ee:	eb12 0a01 	adds.w	sl, r2, r1
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	eb43 0b01 	adc.w	fp, r3, r1
 800b6f8:	f04f 0200 	mov.w	r2, #0
 800b6fc:	f04f 0300 	mov.w	r3, #0
 800b700:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b704:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b70c:	4692      	mov	sl, r2
 800b70e:	469b      	mov	fp, r3
 800b710:	4643      	mov	r3, r8
 800b712:	eb1a 0303 	adds.w	r3, sl, r3
 800b716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b71a:	464b      	mov	r3, r9
 800b71c:	eb4b 0303 	adc.w	r3, fp, r3
 800b720:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b730:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b734:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b738:	460b      	mov	r3, r1
 800b73a:	18db      	adds	r3, r3, r3
 800b73c:	643b      	str	r3, [r7, #64]	; 0x40
 800b73e:	4613      	mov	r3, r2
 800b740:	eb42 0303 	adc.w	r3, r2, r3
 800b744:	647b      	str	r3, [r7, #68]	; 0x44
 800b746:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b74a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b74e:	f7f5 f9d9 	bl	8000b04 <__aeabi_uldivmod>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	4611      	mov	r1, r2
 800b758:	4b3b      	ldr	r3, [pc, #236]	; (800b848 <UART_SetConfig+0x2d4>)
 800b75a:	fba3 2301 	umull	r2, r3, r3, r1
 800b75e:	095b      	lsrs	r3, r3, #5
 800b760:	2264      	movs	r2, #100	; 0x64
 800b762:	fb02 f303 	mul.w	r3, r2, r3
 800b766:	1acb      	subs	r3, r1, r3
 800b768:	00db      	lsls	r3, r3, #3
 800b76a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b76e:	4b36      	ldr	r3, [pc, #216]	; (800b848 <UART_SetConfig+0x2d4>)
 800b770:	fba3 2302 	umull	r2, r3, r3, r2
 800b774:	095b      	lsrs	r3, r3, #5
 800b776:	005b      	lsls	r3, r3, #1
 800b778:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b77c:	441c      	add	r4, r3
 800b77e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b782:	2200      	movs	r2, #0
 800b784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b788:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b78c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b790:	4642      	mov	r2, r8
 800b792:	464b      	mov	r3, r9
 800b794:	1891      	adds	r1, r2, r2
 800b796:	63b9      	str	r1, [r7, #56]	; 0x38
 800b798:	415b      	adcs	r3, r3
 800b79a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b79c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b7a0:	4641      	mov	r1, r8
 800b7a2:	1851      	adds	r1, r2, r1
 800b7a4:	6339      	str	r1, [r7, #48]	; 0x30
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	414b      	adcs	r3, r1
 800b7aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ac:	f04f 0200 	mov.w	r2, #0
 800b7b0:	f04f 0300 	mov.w	r3, #0
 800b7b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b7b8:	4659      	mov	r1, fp
 800b7ba:	00cb      	lsls	r3, r1, #3
 800b7bc:	4651      	mov	r1, sl
 800b7be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7c2:	4651      	mov	r1, sl
 800b7c4:	00ca      	lsls	r2, r1, #3
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	4642      	mov	r2, r8
 800b7ce:	189b      	adds	r3, r3, r2
 800b7d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b7d4:	464b      	mov	r3, r9
 800b7d6:	460a      	mov	r2, r1
 800b7d8:	eb42 0303 	adc.w	r3, r2, r3
 800b7dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b7ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b7f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	18db      	adds	r3, r3, r3
 800b7f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	eb42 0303 	adc.w	r3, r2, r3
 800b800:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b806:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b80a:	f7f5 f97b 	bl	8000b04 <__aeabi_uldivmod>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4b0d      	ldr	r3, [pc, #52]	; (800b848 <UART_SetConfig+0x2d4>)
 800b814:	fba3 1302 	umull	r1, r3, r3, r2
 800b818:	095b      	lsrs	r3, r3, #5
 800b81a:	2164      	movs	r1, #100	; 0x64
 800b81c:	fb01 f303 	mul.w	r3, r1, r3
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	00db      	lsls	r3, r3, #3
 800b824:	3332      	adds	r3, #50	; 0x32
 800b826:	4a08      	ldr	r2, [pc, #32]	; (800b848 <UART_SetConfig+0x2d4>)
 800b828:	fba2 2303 	umull	r2, r3, r2, r3
 800b82c:	095b      	lsrs	r3, r3, #5
 800b82e:	f003 0207 	and.w	r2, r3, #7
 800b832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4422      	add	r2, r4
 800b83a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b83c:	e105      	b.n	800ba4a <UART_SetConfig+0x4d6>
 800b83e:	bf00      	nop
 800b840:	40011000 	.word	0x40011000
 800b844:	40011400 	.word	0x40011400
 800b848:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b84c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b850:	2200      	movs	r2, #0
 800b852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b856:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b85a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b85e:	4642      	mov	r2, r8
 800b860:	464b      	mov	r3, r9
 800b862:	1891      	adds	r1, r2, r2
 800b864:	6239      	str	r1, [r7, #32]
 800b866:	415b      	adcs	r3, r3
 800b868:	627b      	str	r3, [r7, #36]	; 0x24
 800b86a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b86e:	4641      	mov	r1, r8
 800b870:	1854      	adds	r4, r2, r1
 800b872:	4649      	mov	r1, r9
 800b874:	eb43 0501 	adc.w	r5, r3, r1
 800b878:	f04f 0200 	mov.w	r2, #0
 800b87c:	f04f 0300 	mov.w	r3, #0
 800b880:	00eb      	lsls	r3, r5, #3
 800b882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b886:	00e2      	lsls	r2, r4, #3
 800b888:	4614      	mov	r4, r2
 800b88a:	461d      	mov	r5, r3
 800b88c:	4643      	mov	r3, r8
 800b88e:	18e3      	adds	r3, r4, r3
 800b890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b894:	464b      	mov	r3, r9
 800b896:	eb45 0303 	adc.w	r3, r5, r3
 800b89a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b89e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b8aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b8ae:	f04f 0200 	mov.w	r2, #0
 800b8b2:	f04f 0300 	mov.w	r3, #0
 800b8b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	008b      	lsls	r3, r1, #2
 800b8be:	4621      	mov	r1, r4
 800b8c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b8c4:	4621      	mov	r1, r4
 800b8c6:	008a      	lsls	r2, r1, #2
 800b8c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b8cc:	f7f5 f91a 	bl	8000b04 <__aeabi_uldivmod>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4b60      	ldr	r3, [pc, #384]	; (800ba58 <UART_SetConfig+0x4e4>)
 800b8d6:	fba3 2302 	umull	r2, r3, r3, r2
 800b8da:	095b      	lsrs	r3, r3, #5
 800b8dc:	011c      	lsls	r4, r3, #4
 800b8de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b8e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b8ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b8f0:	4642      	mov	r2, r8
 800b8f2:	464b      	mov	r3, r9
 800b8f4:	1891      	adds	r1, r2, r2
 800b8f6:	61b9      	str	r1, [r7, #24]
 800b8f8:	415b      	adcs	r3, r3
 800b8fa:	61fb      	str	r3, [r7, #28]
 800b8fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b900:	4641      	mov	r1, r8
 800b902:	1851      	adds	r1, r2, r1
 800b904:	6139      	str	r1, [r7, #16]
 800b906:	4649      	mov	r1, r9
 800b908:	414b      	adcs	r3, r1
 800b90a:	617b      	str	r3, [r7, #20]
 800b90c:	f04f 0200 	mov.w	r2, #0
 800b910:	f04f 0300 	mov.w	r3, #0
 800b914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b918:	4659      	mov	r1, fp
 800b91a:	00cb      	lsls	r3, r1, #3
 800b91c:	4651      	mov	r1, sl
 800b91e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b922:	4651      	mov	r1, sl
 800b924:	00ca      	lsls	r2, r1, #3
 800b926:	4610      	mov	r0, r2
 800b928:	4619      	mov	r1, r3
 800b92a:	4603      	mov	r3, r0
 800b92c:	4642      	mov	r2, r8
 800b92e:	189b      	adds	r3, r3, r2
 800b930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b934:	464b      	mov	r3, r9
 800b936:	460a      	mov	r2, r1
 800b938:	eb42 0303 	adc.w	r3, r2, r3
 800b93c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	67bb      	str	r3, [r7, #120]	; 0x78
 800b94a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b94c:	f04f 0200 	mov.w	r2, #0
 800b950:	f04f 0300 	mov.w	r3, #0
 800b954:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b958:	4649      	mov	r1, r9
 800b95a:	008b      	lsls	r3, r1, #2
 800b95c:	4641      	mov	r1, r8
 800b95e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b962:	4641      	mov	r1, r8
 800b964:	008a      	lsls	r2, r1, #2
 800b966:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b96a:	f7f5 f8cb 	bl	8000b04 <__aeabi_uldivmod>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	4b39      	ldr	r3, [pc, #228]	; (800ba58 <UART_SetConfig+0x4e4>)
 800b974:	fba3 1302 	umull	r1, r3, r3, r2
 800b978:	095b      	lsrs	r3, r3, #5
 800b97a:	2164      	movs	r1, #100	; 0x64
 800b97c:	fb01 f303 	mul.w	r3, r1, r3
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	011b      	lsls	r3, r3, #4
 800b984:	3332      	adds	r3, #50	; 0x32
 800b986:	4a34      	ldr	r2, [pc, #208]	; (800ba58 <UART_SetConfig+0x4e4>)
 800b988:	fba2 2303 	umull	r2, r3, r2, r3
 800b98c:	095b      	lsrs	r3, r3, #5
 800b98e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b992:	441c      	add	r4, r3
 800b994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b998:	2200      	movs	r2, #0
 800b99a:	673b      	str	r3, [r7, #112]	; 0x70
 800b99c:	677a      	str	r2, [r7, #116]	; 0x74
 800b99e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b9a2:	4642      	mov	r2, r8
 800b9a4:	464b      	mov	r3, r9
 800b9a6:	1891      	adds	r1, r2, r2
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	415b      	adcs	r3, r3
 800b9ac:	60fb      	str	r3, [r7, #12]
 800b9ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9b2:	4641      	mov	r1, r8
 800b9b4:	1851      	adds	r1, r2, r1
 800b9b6:	6039      	str	r1, [r7, #0]
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	414b      	adcs	r3, r1
 800b9bc:	607b      	str	r3, [r7, #4]
 800b9be:	f04f 0200 	mov.w	r2, #0
 800b9c2:	f04f 0300 	mov.w	r3, #0
 800b9c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b9ca:	4659      	mov	r1, fp
 800b9cc:	00cb      	lsls	r3, r1, #3
 800b9ce:	4651      	mov	r1, sl
 800b9d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9d4:	4651      	mov	r1, sl
 800b9d6:	00ca      	lsls	r2, r1, #3
 800b9d8:	4610      	mov	r0, r2
 800b9da:	4619      	mov	r1, r3
 800b9dc:	4603      	mov	r3, r0
 800b9de:	4642      	mov	r2, r8
 800b9e0:	189b      	adds	r3, r3, r2
 800b9e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9e4:	464b      	mov	r3, r9
 800b9e6:	460a      	mov	r2, r1
 800b9e8:	eb42 0303 	adc.w	r3, r2, r3
 800b9ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b9ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	663b      	str	r3, [r7, #96]	; 0x60
 800b9f8:	667a      	str	r2, [r7, #100]	; 0x64
 800b9fa:	f04f 0200 	mov.w	r2, #0
 800b9fe:	f04f 0300 	mov.w	r3, #0
 800ba02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ba06:	4649      	mov	r1, r9
 800ba08:	008b      	lsls	r3, r1, #2
 800ba0a:	4641      	mov	r1, r8
 800ba0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba10:	4641      	mov	r1, r8
 800ba12:	008a      	lsls	r2, r1, #2
 800ba14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ba18:	f7f5 f874 	bl	8000b04 <__aeabi_uldivmod>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	460b      	mov	r3, r1
 800ba20:	4b0d      	ldr	r3, [pc, #52]	; (800ba58 <UART_SetConfig+0x4e4>)
 800ba22:	fba3 1302 	umull	r1, r3, r3, r2
 800ba26:	095b      	lsrs	r3, r3, #5
 800ba28:	2164      	movs	r1, #100	; 0x64
 800ba2a:	fb01 f303 	mul.w	r3, r1, r3
 800ba2e:	1ad3      	subs	r3, r2, r3
 800ba30:	011b      	lsls	r3, r3, #4
 800ba32:	3332      	adds	r3, #50	; 0x32
 800ba34:	4a08      	ldr	r2, [pc, #32]	; (800ba58 <UART_SetConfig+0x4e4>)
 800ba36:	fba2 2303 	umull	r2, r3, r2, r3
 800ba3a:	095b      	lsrs	r3, r3, #5
 800ba3c:	f003 020f 	and.w	r2, r3, #15
 800ba40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4422      	add	r2, r4
 800ba48:	609a      	str	r2, [r3, #8]
}
 800ba4a:	bf00      	nop
 800ba4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ba50:	46bd      	mov	sp, r7
 800ba52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba56:	bf00      	nop
 800ba58:	51eb851f 	.word	0x51eb851f

0800ba5c <__cxa_pure_virtual>:
 800ba5c:	b508      	push	{r3, lr}
 800ba5e:	f000 f80d 	bl	800ba7c <_ZSt9terminatev>

0800ba62 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ba62:	b508      	push	{r3, lr}
 800ba64:	4780      	blx	r0
 800ba66:	f000 f80e 	bl	800ba86 <abort>
	...

0800ba6c <_ZSt13get_terminatev>:
 800ba6c:	4b02      	ldr	r3, [pc, #8]	; (800ba78 <_ZSt13get_terminatev+0xc>)
 800ba6e:	6818      	ldr	r0, [r3, #0]
 800ba70:	f3bf 8f5b 	dmb	ish
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	2000005c 	.word	0x2000005c

0800ba7c <_ZSt9terminatev>:
 800ba7c:	b508      	push	{r3, lr}
 800ba7e:	f7ff fff5 	bl	800ba6c <_ZSt13get_terminatev>
 800ba82:	f7ff ffee 	bl	800ba62 <_ZN10__cxxabiv111__terminateEPFvvE>

0800ba86 <abort>:
 800ba86:	b508      	push	{r3, lr}
 800ba88:	2006      	movs	r0, #6
 800ba8a:	f000 f873 	bl	800bb74 <raise>
 800ba8e:	2001      	movs	r0, #1
 800ba90:	f7fb fafc 	bl	800708c <_exit>

0800ba94 <__errno>:
 800ba94:	4b01      	ldr	r3, [pc, #4]	; (800ba9c <__errno+0x8>)
 800ba96:	6818      	ldr	r0, [r3, #0]
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	20000060 	.word	0x20000060

0800baa0 <__libc_init_array>:
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	4d0d      	ldr	r5, [pc, #52]	; (800bad8 <__libc_init_array+0x38>)
 800baa4:	4c0d      	ldr	r4, [pc, #52]	; (800badc <__libc_init_array+0x3c>)
 800baa6:	1b64      	subs	r4, r4, r5
 800baa8:	10a4      	asrs	r4, r4, #2
 800baaa:	2600      	movs	r6, #0
 800baac:	42a6      	cmp	r6, r4
 800baae:	d109      	bne.n	800bac4 <__libc_init_array+0x24>
 800bab0:	4d0b      	ldr	r5, [pc, #44]	; (800bae0 <__libc_init_array+0x40>)
 800bab2:	4c0c      	ldr	r4, [pc, #48]	; (800bae4 <__libc_init_array+0x44>)
 800bab4:	f000 f9b0 	bl	800be18 <_init>
 800bab8:	1b64      	subs	r4, r4, r5
 800baba:	10a4      	asrs	r4, r4, #2
 800babc:	2600      	movs	r6, #0
 800babe:	42a6      	cmp	r6, r4
 800bac0:	d105      	bne.n	800bace <__libc_init_array+0x2e>
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bac8:	4798      	blx	r3
 800baca:	3601      	adds	r6, #1
 800bacc:	e7ee      	b.n	800baac <__libc_init_array+0xc>
 800bace:	f855 3b04 	ldr.w	r3, [r5], #4
 800bad2:	4798      	blx	r3
 800bad4:	3601      	adds	r6, #1
 800bad6:	e7f2      	b.n	800babe <__libc_init_array+0x1e>
 800bad8:	0800c1ac 	.word	0x0800c1ac
 800badc:	0800c1ac 	.word	0x0800c1ac
 800bae0:	0800c1ac 	.word	0x0800c1ac
 800bae4:	0800c1b4 	.word	0x0800c1b4

0800bae8 <memcpy>:
 800bae8:	440a      	add	r2, r1
 800baea:	4291      	cmp	r1, r2
 800baec:	f100 33ff 	add.w	r3, r0, #4294967295
 800baf0:	d100      	bne.n	800baf4 <memcpy+0xc>
 800baf2:	4770      	bx	lr
 800baf4:	b510      	push	{r4, lr}
 800baf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bafa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bafe:	4291      	cmp	r1, r2
 800bb00:	d1f9      	bne.n	800baf6 <memcpy+0xe>
 800bb02:	bd10      	pop	{r4, pc}

0800bb04 <memset>:
 800bb04:	4402      	add	r2, r0
 800bb06:	4603      	mov	r3, r0
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d100      	bne.n	800bb0e <memset+0xa>
 800bb0c:	4770      	bx	lr
 800bb0e:	f803 1b01 	strb.w	r1, [r3], #1
 800bb12:	e7f9      	b.n	800bb08 <memset+0x4>

0800bb14 <realloc>:
 800bb14:	4b02      	ldr	r3, [pc, #8]	; (800bb20 <realloc+0xc>)
 800bb16:	460a      	mov	r2, r1
 800bb18:	4601      	mov	r1, r0
 800bb1a:	6818      	ldr	r0, [r3, #0]
 800bb1c:	f000 b8da 	b.w	800bcd4 <_realloc_r>
 800bb20:	20000060 	.word	0x20000060

0800bb24 <_raise_r>:
 800bb24:	291f      	cmp	r1, #31
 800bb26:	b538      	push	{r3, r4, r5, lr}
 800bb28:	4604      	mov	r4, r0
 800bb2a:	460d      	mov	r5, r1
 800bb2c:	d904      	bls.n	800bb38 <_raise_r+0x14>
 800bb2e:	2316      	movs	r3, #22
 800bb30:	6003      	str	r3, [r0, #0]
 800bb32:	f04f 30ff 	mov.w	r0, #4294967295
 800bb36:	bd38      	pop	{r3, r4, r5, pc}
 800bb38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb3a:	b112      	cbz	r2, 800bb42 <_raise_r+0x1e>
 800bb3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb40:	b94b      	cbnz	r3, 800bb56 <_raise_r+0x32>
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 f830 	bl	800bba8 <_getpid_r>
 800bb48:	462a      	mov	r2, r5
 800bb4a:	4601      	mov	r1, r0
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb52:	f000 b817 	b.w	800bb84 <_kill_r>
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d00a      	beq.n	800bb70 <_raise_r+0x4c>
 800bb5a:	1c59      	adds	r1, r3, #1
 800bb5c:	d103      	bne.n	800bb66 <_raise_r+0x42>
 800bb5e:	2316      	movs	r3, #22
 800bb60:	6003      	str	r3, [r0, #0]
 800bb62:	2001      	movs	r0, #1
 800bb64:	e7e7      	b.n	800bb36 <_raise_r+0x12>
 800bb66:	2400      	movs	r4, #0
 800bb68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	4798      	blx	r3
 800bb70:	2000      	movs	r0, #0
 800bb72:	e7e0      	b.n	800bb36 <_raise_r+0x12>

0800bb74 <raise>:
 800bb74:	4b02      	ldr	r3, [pc, #8]	; (800bb80 <raise+0xc>)
 800bb76:	4601      	mov	r1, r0
 800bb78:	6818      	ldr	r0, [r3, #0]
 800bb7a:	f7ff bfd3 	b.w	800bb24 <_raise_r>
 800bb7e:	bf00      	nop
 800bb80:	20000060 	.word	0x20000060

0800bb84 <_kill_r>:
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	4d07      	ldr	r5, [pc, #28]	; (800bba4 <_kill_r+0x20>)
 800bb88:	2300      	movs	r3, #0
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	4608      	mov	r0, r1
 800bb8e:	4611      	mov	r1, r2
 800bb90:	602b      	str	r3, [r5, #0]
 800bb92:	f7fb fa6b 	bl	800706c <_kill>
 800bb96:	1c43      	adds	r3, r0, #1
 800bb98:	d102      	bne.n	800bba0 <_kill_r+0x1c>
 800bb9a:	682b      	ldr	r3, [r5, #0]
 800bb9c:	b103      	cbz	r3, 800bba0 <_kill_r+0x1c>
 800bb9e:	6023      	str	r3, [r4, #0]
 800bba0:	bd38      	pop	{r3, r4, r5, pc}
 800bba2:	bf00      	nop
 800bba4:	20001bf4 	.word	0x20001bf4

0800bba8 <_getpid_r>:
 800bba8:	f7fb ba58 	b.w	800705c <_getpid>

0800bbac <sbrk_aligned>:
 800bbac:	b570      	push	{r4, r5, r6, lr}
 800bbae:	4e0e      	ldr	r6, [pc, #56]	; (800bbe8 <sbrk_aligned+0x3c>)
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	6831      	ldr	r1, [r6, #0]
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	b911      	cbnz	r1, 800bbbe <sbrk_aligned+0x12>
 800bbb8:	f000 f8bc 	bl	800bd34 <_sbrk_r>
 800bbbc:	6030      	str	r0, [r6, #0]
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	f000 f8b7 	bl	800bd34 <_sbrk_r>
 800bbc6:	1c43      	adds	r3, r0, #1
 800bbc8:	d00a      	beq.n	800bbe0 <sbrk_aligned+0x34>
 800bbca:	1cc4      	adds	r4, r0, #3
 800bbcc:	f024 0403 	bic.w	r4, r4, #3
 800bbd0:	42a0      	cmp	r0, r4
 800bbd2:	d007      	beq.n	800bbe4 <sbrk_aligned+0x38>
 800bbd4:	1a21      	subs	r1, r4, r0
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	f000 f8ac 	bl	800bd34 <_sbrk_r>
 800bbdc:	3001      	adds	r0, #1
 800bbde:	d101      	bne.n	800bbe4 <sbrk_aligned+0x38>
 800bbe0:	f04f 34ff 	mov.w	r4, #4294967295
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	20001bf0 	.word	0x20001bf0

0800bbec <_malloc_r>:
 800bbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf0:	1ccd      	adds	r5, r1, #3
 800bbf2:	f025 0503 	bic.w	r5, r5, #3
 800bbf6:	3508      	adds	r5, #8
 800bbf8:	2d0c      	cmp	r5, #12
 800bbfa:	bf38      	it	cc
 800bbfc:	250c      	movcc	r5, #12
 800bbfe:	2d00      	cmp	r5, #0
 800bc00:	4607      	mov	r7, r0
 800bc02:	db01      	blt.n	800bc08 <_malloc_r+0x1c>
 800bc04:	42a9      	cmp	r1, r5
 800bc06:	d905      	bls.n	800bc14 <_malloc_r+0x28>
 800bc08:	230c      	movs	r3, #12
 800bc0a:	603b      	str	r3, [r7, #0]
 800bc0c:	2600      	movs	r6, #0
 800bc0e:	4630      	mov	r0, r6
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc14:	4e2e      	ldr	r6, [pc, #184]	; (800bcd0 <_malloc_r+0xe4>)
 800bc16:	f000 f89d 	bl	800bd54 <__malloc_lock>
 800bc1a:	6833      	ldr	r3, [r6, #0]
 800bc1c:	461c      	mov	r4, r3
 800bc1e:	bb34      	cbnz	r4, 800bc6e <_malloc_r+0x82>
 800bc20:	4629      	mov	r1, r5
 800bc22:	4638      	mov	r0, r7
 800bc24:	f7ff ffc2 	bl	800bbac <sbrk_aligned>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	d14d      	bne.n	800bcca <_malloc_r+0xde>
 800bc2e:	6834      	ldr	r4, [r6, #0]
 800bc30:	4626      	mov	r6, r4
 800bc32:	2e00      	cmp	r6, #0
 800bc34:	d140      	bne.n	800bcb8 <_malloc_r+0xcc>
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	4631      	mov	r1, r6
 800bc3a:	4638      	mov	r0, r7
 800bc3c:	eb04 0803 	add.w	r8, r4, r3
 800bc40:	f000 f878 	bl	800bd34 <_sbrk_r>
 800bc44:	4580      	cmp	r8, r0
 800bc46:	d13a      	bne.n	800bcbe <_malloc_r+0xd2>
 800bc48:	6821      	ldr	r1, [r4, #0]
 800bc4a:	3503      	adds	r5, #3
 800bc4c:	1a6d      	subs	r5, r5, r1
 800bc4e:	f025 0503 	bic.w	r5, r5, #3
 800bc52:	3508      	adds	r5, #8
 800bc54:	2d0c      	cmp	r5, #12
 800bc56:	bf38      	it	cc
 800bc58:	250c      	movcc	r5, #12
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	f7ff ffa5 	bl	800bbac <sbrk_aligned>
 800bc62:	3001      	adds	r0, #1
 800bc64:	d02b      	beq.n	800bcbe <_malloc_r+0xd2>
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	442b      	add	r3, r5
 800bc6a:	6023      	str	r3, [r4, #0]
 800bc6c:	e00e      	b.n	800bc8c <_malloc_r+0xa0>
 800bc6e:	6822      	ldr	r2, [r4, #0]
 800bc70:	1b52      	subs	r2, r2, r5
 800bc72:	d41e      	bmi.n	800bcb2 <_malloc_r+0xc6>
 800bc74:	2a0b      	cmp	r2, #11
 800bc76:	d916      	bls.n	800bca6 <_malloc_r+0xba>
 800bc78:	1961      	adds	r1, r4, r5
 800bc7a:	42a3      	cmp	r3, r4
 800bc7c:	6025      	str	r5, [r4, #0]
 800bc7e:	bf18      	it	ne
 800bc80:	6059      	strne	r1, [r3, #4]
 800bc82:	6863      	ldr	r3, [r4, #4]
 800bc84:	bf08      	it	eq
 800bc86:	6031      	streq	r1, [r6, #0]
 800bc88:	5162      	str	r2, [r4, r5]
 800bc8a:	604b      	str	r3, [r1, #4]
 800bc8c:	4638      	mov	r0, r7
 800bc8e:	f104 060b 	add.w	r6, r4, #11
 800bc92:	f000 f865 	bl	800bd60 <__malloc_unlock>
 800bc96:	f026 0607 	bic.w	r6, r6, #7
 800bc9a:	1d23      	adds	r3, r4, #4
 800bc9c:	1af2      	subs	r2, r6, r3
 800bc9e:	d0b6      	beq.n	800bc0e <_malloc_r+0x22>
 800bca0:	1b9b      	subs	r3, r3, r6
 800bca2:	50a3      	str	r3, [r4, r2]
 800bca4:	e7b3      	b.n	800bc0e <_malloc_r+0x22>
 800bca6:	6862      	ldr	r2, [r4, #4]
 800bca8:	42a3      	cmp	r3, r4
 800bcaa:	bf0c      	ite	eq
 800bcac:	6032      	streq	r2, [r6, #0]
 800bcae:	605a      	strne	r2, [r3, #4]
 800bcb0:	e7ec      	b.n	800bc8c <_malloc_r+0xa0>
 800bcb2:	4623      	mov	r3, r4
 800bcb4:	6864      	ldr	r4, [r4, #4]
 800bcb6:	e7b2      	b.n	800bc1e <_malloc_r+0x32>
 800bcb8:	4634      	mov	r4, r6
 800bcba:	6876      	ldr	r6, [r6, #4]
 800bcbc:	e7b9      	b.n	800bc32 <_malloc_r+0x46>
 800bcbe:	230c      	movs	r3, #12
 800bcc0:	603b      	str	r3, [r7, #0]
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	f000 f84c 	bl	800bd60 <__malloc_unlock>
 800bcc8:	e7a1      	b.n	800bc0e <_malloc_r+0x22>
 800bcca:	6025      	str	r5, [r4, #0]
 800bccc:	e7de      	b.n	800bc8c <_malloc_r+0xa0>
 800bcce:	bf00      	nop
 800bcd0:	20001bec 	.word	0x20001bec

0800bcd4 <_realloc_r>:
 800bcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd8:	4680      	mov	r8, r0
 800bcda:	4614      	mov	r4, r2
 800bcdc:	460e      	mov	r6, r1
 800bcde:	b921      	cbnz	r1, 800bcea <_realloc_r+0x16>
 800bce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bce4:	4611      	mov	r1, r2
 800bce6:	f7ff bf81 	b.w	800bbec <_malloc_r>
 800bcea:	b92a      	cbnz	r2, 800bcf8 <_realloc_r+0x24>
 800bcec:	f000 f83e 	bl	800bd6c <_free_r>
 800bcf0:	4625      	mov	r5, r4
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf8:	f000 f884 	bl	800be04 <_malloc_usable_size_r>
 800bcfc:	4284      	cmp	r4, r0
 800bcfe:	4607      	mov	r7, r0
 800bd00:	d802      	bhi.n	800bd08 <_realloc_r+0x34>
 800bd02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd06:	d812      	bhi.n	800bd2e <_realloc_r+0x5a>
 800bd08:	4621      	mov	r1, r4
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	f7ff ff6e 	bl	800bbec <_malloc_r>
 800bd10:	4605      	mov	r5, r0
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d0ed      	beq.n	800bcf2 <_realloc_r+0x1e>
 800bd16:	42bc      	cmp	r4, r7
 800bd18:	4622      	mov	r2, r4
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	bf28      	it	cs
 800bd1e:	463a      	movcs	r2, r7
 800bd20:	f7ff fee2 	bl	800bae8 <memcpy>
 800bd24:	4631      	mov	r1, r6
 800bd26:	4640      	mov	r0, r8
 800bd28:	f000 f820 	bl	800bd6c <_free_r>
 800bd2c:	e7e1      	b.n	800bcf2 <_realloc_r+0x1e>
 800bd2e:	4635      	mov	r5, r6
 800bd30:	e7df      	b.n	800bcf2 <_realloc_r+0x1e>
	...

0800bd34 <_sbrk_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4d06      	ldr	r5, [pc, #24]	; (800bd50 <_sbrk_r+0x1c>)
 800bd38:	2300      	movs	r3, #0
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	4608      	mov	r0, r1
 800bd3e:	602b      	str	r3, [r5, #0]
 800bd40:	f7fb f9ae 	bl	80070a0 <_sbrk>
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	d102      	bne.n	800bd4e <_sbrk_r+0x1a>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	b103      	cbz	r3, 800bd4e <_sbrk_r+0x1a>
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	20001bf4 	.word	0x20001bf4

0800bd54 <__malloc_lock>:
 800bd54:	4801      	ldr	r0, [pc, #4]	; (800bd5c <__malloc_lock+0x8>)
 800bd56:	f000 b85d 	b.w	800be14 <__retarget_lock_acquire_recursive>
 800bd5a:	bf00      	nop
 800bd5c:	20001bf8 	.word	0x20001bf8

0800bd60 <__malloc_unlock>:
 800bd60:	4801      	ldr	r0, [pc, #4]	; (800bd68 <__malloc_unlock+0x8>)
 800bd62:	f000 b858 	b.w	800be16 <__retarget_lock_release_recursive>
 800bd66:	bf00      	nop
 800bd68:	20001bf8 	.word	0x20001bf8

0800bd6c <_free_r>:
 800bd6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd6e:	2900      	cmp	r1, #0
 800bd70:	d044      	beq.n	800bdfc <_free_r+0x90>
 800bd72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd76:	9001      	str	r0, [sp, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f1a1 0404 	sub.w	r4, r1, #4
 800bd7e:	bfb8      	it	lt
 800bd80:	18e4      	addlt	r4, r4, r3
 800bd82:	f7ff ffe7 	bl	800bd54 <__malloc_lock>
 800bd86:	4a1e      	ldr	r2, [pc, #120]	; (800be00 <_free_r+0x94>)
 800bd88:	9801      	ldr	r0, [sp, #4]
 800bd8a:	6813      	ldr	r3, [r2, #0]
 800bd8c:	b933      	cbnz	r3, 800bd9c <_free_r+0x30>
 800bd8e:	6063      	str	r3, [r4, #4]
 800bd90:	6014      	str	r4, [r2, #0]
 800bd92:	b003      	add	sp, #12
 800bd94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd98:	f7ff bfe2 	b.w	800bd60 <__malloc_unlock>
 800bd9c:	42a3      	cmp	r3, r4
 800bd9e:	d908      	bls.n	800bdb2 <_free_r+0x46>
 800bda0:	6825      	ldr	r5, [r4, #0]
 800bda2:	1961      	adds	r1, r4, r5
 800bda4:	428b      	cmp	r3, r1
 800bda6:	bf01      	itttt	eq
 800bda8:	6819      	ldreq	r1, [r3, #0]
 800bdaa:	685b      	ldreq	r3, [r3, #4]
 800bdac:	1949      	addeq	r1, r1, r5
 800bdae:	6021      	streq	r1, [r4, #0]
 800bdb0:	e7ed      	b.n	800bd8e <_free_r+0x22>
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	b10b      	cbz	r3, 800bdbc <_free_r+0x50>
 800bdb8:	42a3      	cmp	r3, r4
 800bdba:	d9fa      	bls.n	800bdb2 <_free_r+0x46>
 800bdbc:	6811      	ldr	r1, [r2, #0]
 800bdbe:	1855      	adds	r5, r2, r1
 800bdc0:	42a5      	cmp	r5, r4
 800bdc2:	d10b      	bne.n	800bddc <_free_r+0x70>
 800bdc4:	6824      	ldr	r4, [r4, #0]
 800bdc6:	4421      	add	r1, r4
 800bdc8:	1854      	adds	r4, r2, r1
 800bdca:	42a3      	cmp	r3, r4
 800bdcc:	6011      	str	r1, [r2, #0]
 800bdce:	d1e0      	bne.n	800bd92 <_free_r+0x26>
 800bdd0:	681c      	ldr	r4, [r3, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	6053      	str	r3, [r2, #4]
 800bdd6:	4421      	add	r1, r4
 800bdd8:	6011      	str	r1, [r2, #0]
 800bdda:	e7da      	b.n	800bd92 <_free_r+0x26>
 800bddc:	d902      	bls.n	800bde4 <_free_r+0x78>
 800bdde:	230c      	movs	r3, #12
 800bde0:	6003      	str	r3, [r0, #0]
 800bde2:	e7d6      	b.n	800bd92 <_free_r+0x26>
 800bde4:	6825      	ldr	r5, [r4, #0]
 800bde6:	1961      	adds	r1, r4, r5
 800bde8:	428b      	cmp	r3, r1
 800bdea:	bf04      	itt	eq
 800bdec:	6819      	ldreq	r1, [r3, #0]
 800bdee:	685b      	ldreq	r3, [r3, #4]
 800bdf0:	6063      	str	r3, [r4, #4]
 800bdf2:	bf04      	itt	eq
 800bdf4:	1949      	addeq	r1, r1, r5
 800bdf6:	6021      	streq	r1, [r4, #0]
 800bdf8:	6054      	str	r4, [r2, #4]
 800bdfa:	e7ca      	b.n	800bd92 <_free_r+0x26>
 800bdfc:	b003      	add	sp, #12
 800bdfe:	bd30      	pop	{r4, r5, pc}
 800be00:	20001bec 	.word	0x20001bec

0800be04 <_malloc_usable_size_r>:
 800be04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be08:	1f18      	subs	r0, r3, #4
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	bfbc      	itt	lt
 800be0e:	580b      	ldrlt	r3, [r1, r0]
 800be10:	18c0      	addlt	r0, r0, r3
 800be12:	4770      	bx	lr

0800be14 <__retarget_lock_acquire_recursive>:
 800be14:	4770      	bx	lr

0800be16 <__retarget_lock_release_recursive>:
 800be16:	4770      	bx	lr

0800be18 <_init>:
 800be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1a:	bf00      	nop
 800be1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1e:	bc08      	pop	{r3}
 800be20:	469e      	mov	lr, r3
 800be22:	4770      	bx	lr

0800be24 <_fini>:
 800be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be26:	bf00      	nop
 800be28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be2a:	bc08      	pop	{r3}
 800be2c:	469e      	mov	lr, r3
 800be2e:	4770      	bx	lr
